
/Users/chipmc/Documents/Maker/Particle/Utilities/Force-Carrier-Test/target/1.5.1/boron/Force-Carrier-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020d4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003e338  000d60f4  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000438  2003e3b8  2003e3b8  0002e3b8  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d6174  000d6174  00026174  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d61a0  000d61a0  000261a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c70a0  00000000  00000000  000261a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e22b  00000000  00000000  000ed244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cf6d  00000000  00000000  000fb46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002340  00000000  00000000  001183dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045c0  00000000  00000000  0011a71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ff19  00000000  00000000  0011ecdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020b39  00000000  00000000  0014ebf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104da8  00000000  00000000  0016f72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c9e4  00000000  00000000  002744d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdab 	bl	d5b88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdb0 	bl	d5b9e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e338 	.word	0x2003e338
   d4048:	000d60f4 	.word	0x000d60f4
   d404c:	2003e3b8 	.word	0x2003e3b8
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbf1 	bl	d5840 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d60f0 	.word	0x000d60f0
   d4080:	000d60b8 	.word	0x000d60b8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b824 	b.w	d40d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb97 	b.w	d57c4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bba3 	b.w	d47e0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bba9 	b.w	d47f0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bba7 	b.w	d47f0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b6:	6800      	ldr	r0, [r0, #0]
   d40b8:	b108      	cbz	r0, d40be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ba:	f000 fb99 	bl	d47f0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d40c2:	2300      	movs	r3, #0
   d40c4:	461a      	mov	r2, r3
   d40c6:	4619      	mov	r1, r3
   d40c8:	6840      	ldr	r0, [r0, #4]
   d40ca:	f000 bb59 	b.w	d4780 <network_on>
	...

000d40d0 <setup>:
char carrierModeStr[16] = "Automatic";                      // Default mode is Automatic
int carrierMode = 0;                                        // Default settings - automatic carrier selection



void setup() {
   d40d0:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d40d2:	f000 fb0d 	bl	d46f0 <spark_cloud_flag_connect>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40d6:	2300      	movs	r3, #0
   d40d8:	2204      	movs	r2, #4
   d40da:	4908      	ldr	r1, [pc, #32]	; (d40fc <setup+0x2c>)
   d40dc:	4808      	ldr	r0, [pc, #32]	; (d4100 <setup+0x30>)
   d40de:	f000 faef 	bl	d46c0 <spark_variable>
   d40e2:	2300      	movs	r3, #0
   d40e4:	2204      	movs	r2, #4
   d40e6:	4907      	ldr	r1, [pc, #28]	; (d4104 <setup+0x34>)
   d40e8:	4807      	ldr	r0, [pc, #28]	; (d4108 <setup+0x38>)
   d40ea:	f000 fae9 	bl	d46c0 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d40ee:	4a07      	ldr	r2, [pc, #28]	; (d410c <setup+0x3c>)
   d40f0:	4907      	ldr	r1, [pc, #28]	; (d4110 <setup+0x40>)
   d40f2:	4808      	ldr	r0, [pc, #32]	; (d4114 <setup+0x44>)
  Particle.variable("carrierMode",carrierModeStr);
  Particle.variable("Version",currentPointRelease);

  Particle.function("setCarrierMode",setCarrierMode);

}
   d40f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40f8:	f000 bc7f 	b.w	d49fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d40fc:	2003e338 	.word	0x2003e338
   d4100:	000d5c80 	.word	0x000d5c80
   d4104:	2003e348 	.word	0x2003e348
   d4108:	000d5c8c 	.word	0x000d5c8c
   d410c:	000d5c94 	.word	0x000d5c94
   d4110:	000d42c9 	.word	0x000d42c9
   d4114:	000d49cf 	.word	0x000d49cf

000d4118 <loop>:


void loop() {
   d4118:	4770      	bx	lr
	...

000d411c <_Z17connectToParticlev>:
  connectToParticle();

  return 1;
}

bool connectToParticle() {
   d411c:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  Cellular.on();
   d4120:	4818      	ldr	r0, [pc, #96]	; (d4184 <_Z17connectToParticlev+0x68>)
   d4122:	f7ff ffce 	bl	d40c2 <_ZN5spark13CellularClass2onEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4126:	f000 fae3 	bl	d46f0 <spark_cloud_flag_connect>
   d412a:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d412e:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4132:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4134:	2000      	movs	r0, #0
   d4136:	f000 f9ff 	bl	d4538 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d413a:	f04f 0900 	mov.w	r9, #0
   d413e:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4140:	2000      	movs	r0, #0
   d4142:	f000 f9f9 	bl	d4538 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4146:	ebb0 0008 	subs.w	r0, r0, r8
   d414a:	eb61 0109 	sbc.w	r1, r1, r9
   d414e:	428f      	cmp	r7, r1
   d4150:	bf08      	it	eq
   d4152:	4286      	cmpeq	r6, r0
   d4154:	d305      	bcc.n	d4162 <_Z17connectToParticlev+0x46>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4156:	f000 fadb 	bl	d4710 <spark_cloud_flag_connected>
   d415a:	b910      	cbnz	r0, d4162 <_Z17connectToParticlev+0x46>
            spark_process();
   d415c:	f000 fac0 	bl	d46e0 <spark_process>
   d4160:	e7ee      	b.n	d4140 <_Z17connectToParticlev+0x24>
   d4162:	f000 fad5 	bl	d4710 <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4166:	b118      	cbz	r0, d4170 <_Z17connectToParticlev+0x54>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4168:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d416c:	f000 bad0 	b.w	d4710 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4170:	f000 f9da 	bl	d4528 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4174:	4b04      	ldr	r3, [pc, #16]	; (d4188 <_Z17connectToParticlev+0x6c>)
   d4176:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4178:	f000 fab2 	bl	d46e0 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d417c:	3c01      	subs	r4, #1
   d417e:	d0f3      	beq.n	d4168 <_Z17connectToParticlev+0x4c>
   d4180:	e7d8      	b.n	d4134 <_Z17connectToParticlev+0x18>
   d4182:	bf00      	nop
   d4184:	2003e3d4 	.word	0x2003e3d4
   d4188:	2003e74c 	.word	0x2003e74c

000d418c <_Z12notConnectedv>:
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d418c:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d418e:	f000 fabf 	bl	d4710 <spark_cloud_flag_connected>
  return !Particle.connected();
   d4192:	f080 0001 	eor.w	r0, r0, #1
   d4196:	b2c0      	uxtb	r0, r0
   d4198:	bd08      	pop	{r3, pc}
	...

000d419c <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d419e:	f000 faaf 	bl	d4700 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41a2:	2000      	movs	r0, #0
   d41a4:	f000 f9c8 	bl	d4538 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41a8:	2500      	movs	r5, #0
   d41aa:	4604      	mov	r4, r0
   d41ac:	f643 2697 	movw	r6, #14999	; 0x3a97
   d41b0:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41b2:	2000      	movs	r0, #0
   d41b4:	f000 f9c0 	bl	d4538 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41b8:	1b00      	subs	r0, r0, r4
   d41ba:	eb61 0105 	sbc.w	r1, r1, r5
   d41be:	428f      	cmp	r7, r1
   d41c0:	bf08      	it	eq
   d41c2:	4286      	cmpeq	r6, r0
   d41c4:	d305      	bcc.n	d41d2 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d41c6:	f7ff ffe1 	bl	d418c <_Z12notConnectedv>
   d41ca:	b910      	cbnz	r0, d41d2 <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d41cc:	f000 fa88 	bl	d46e0 <spark_process>
   d41d0:	e7ef      	b.n	d41b2 <_Z22disconnectFromParticlev+0x16>
   d41d2:	f7ff ffdb 	bl	d418c <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d41d6:	4804      	ldr	r0, [pc, #16]	; (d41e8 <_Z22disconnectFromParticlev+0x4c>)
   d41d8:	2300      	movs	r3, #0
   d41da:	461a      	mov	r2, r3
   d41dc:	4619      	mov	r1, r3
   d41de:	6840      	ldr	r0, [r0, #4]
   d41e0:	f000 fad6 	bl	d4790 <network_off>
  Cellular.off();
  return true;
}
   d41e4:	2001      	movs	r0, #1
   d41e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41e8:	2003e3d4 	.word	0x2003e3d4

000d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41ee:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41f0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d41f2:	b17c      	cbz	r4, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41f4:	6863      	ldr	r3, [r4, #4]
   d41f6:	3b01      	subs	r3, #1
   d41f8:	6063      	str	r3, [r4, #4]
   d41fa:	b95b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d41fc:	6823      	ldr	r3, [r4, #0]
   d41fe:	4620      	mov	r0, r4
   d4200:	689b      	ldr	r3, [r3, #8]
   d4202:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4204:	68a3      	ldr	r3, [r4, #8]
   d4206:	3b01      	subs	r3, #1
   d4208:	60a3      	str	r3, [r4, #8]
   d420a:	b91b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d420c:	6823      	ldr	r3, [r4, #0]
   d420e:	4620      	mov	r0, r4
   d4210:	68db      	ldr	r3, [r3, #12]
   d4212:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4214:	4628      	mov	r0, r5
   d4216:	bd38      	pop	{r3, r4, r5, pc}

000d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>:
    bool getBandAvailable(CellularBand &data_get);

    template<typename... Targs>
    inline int command(const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, 10000, format, Fargs...);
   d4218:	460b      	mov	r3, r1
   d421a:	2100      	movs	r1, #0
   d421c:	f242 7210 	movw	r2, #10000	; 0x2710
   d4220:	4608      	mov	r0, r1
   d4222:	f000 b949 	b.w	d44b8 <cellular_command>
	...

000d4228 <_Z20carrierSelectionModev>:
void loop() {


}

void carrierSelectionMode() {
   d4228:	b510      	push	{r4, lr}
  Cellular.on();
   d422a:	4c1e      	ldr	r4, [pc, #120]	; (d42a4 <_Z20carrierSelectionModev+0x7c>)
   d422c:	4620      	mov	r0, r4
   d422e:	f7ff ff48 	bl	d40c2 <_ZN5spark13CellularClass2onEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4232:	2200      	movs	r2, #0
   d4234:	2102      	movs	r1, #2
   d4236:	6860      	ldr	r0, [r4, #4]
   d4238:	f000 fa92 	bl	d4760 <network_disconnect>
  Cellular.disconnect();

  if (carrierMode == 0) {
   d423c:	4b1a      	ldr	r3, [pc, #104]	; (d42a8 <_Z20carrierSelectionModev+0x80>)
   d423e:	681b      	ldr	r3, [r3, #0]
   d4240:	b92b      	cbnz	r3, d424e <_Z20carrierSelectionModev+0x26>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4242:	491a      	ldr	r1, [pc, #104]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4244:	4620      	mov	r0, r4
   d4246:	f7ff ffe7 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=0\r\n");                      // Automatic mode
   d424a:	4919      	ldr	r1, [pc, #100]	; (d42b0 <_Z20carrierSelectionModev+0x88>)
   d424c:	e026      	b.n	d429c <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 1) {
   d424e:	2b01      	cmp	r3, #1
   d4250:	d105      	bne.n	d425e <_Z20carrierSelectionModev+0x36>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4252:	4916      	ldr	r1, [pc, #88]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4254:	4620      	mov	r0, r4
   d4256:	f7ff ffdf 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"310410\"\r\n");         // Manually connect to AT&T, and fallback to automatic mode if failed
   d425a:	4916      	ldr	r1, [pc, #88]	; (d42b4 <_Z20carrierSelectionModev+0x8c>)
   d425c:	e01e      	b.n	d429c <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 2) {
   d425e:	2b02      	cmp	r3, #2
   d4260:	d105      	bne.n	d426e <_Z20carrierSelectionModev+0x46>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4262:	4912      	ldr	r1, [pc, #72]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4264:	4620      	mov	r0, r4
   d4266:	f7ff ffd7 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"310260\"\r\n");         // Manually connect to T-mobile, and fallback to automatic mode if failed
   d426a:	4913      	ldr	r1, [pc, #76]	; (d42b8 <_Z20carrierSelectionModev+0x90>)
   d426c:	e016      	b.n	d429c <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 3) {
   d426e:	2b03      	cmp	r3, #3
   d4270:	d105      	bne.n	d427e <_Z20carrierSelectionModev+0x56>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4272:	490e      	ldr	r1, [pc, #56]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4274:	4620      	mov	r0, r4
   d4276:	f7ff ffcf 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63514\"\r\n");         // Manually connect to Airtel, and fallback to automatic mode if failed
   d427a:	4910      	ldr	r1, [pc, #64]	; (d42bc <_Z20carrierSelectionModev+0x94>)
   d427c:	e00e      	b.n	d429c <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 4) {
   d427e:	2b04      	cmp	r3, #4
   d4280:	d105      	bne.n	d428e <_Z20carrierSelectionModev+0x66>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4282:	490a      	ldr	r1, [pc, #40]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4284:	4620      	mov	r0, r4
   d4286:	f7ff ffc7 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63510\"\r\n");         // Manually connect to MTN/RwandaCell, and fallback to automatic mode if failed
   d428a:	490d      	ldr	r1, [pc, #52]	; (d42c0 <_Z20carrierSelectionModev+0x98>)
   d428c:	e006      	b.n	d429c <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 5) {
   d428e:	2b05      	cmp	r3, #5
   d4290:	d107      	bne.n	d42a2 <_Z20carrierSelectionModev+0x7a>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4292:	4906      	ldr	r1, [pc, #24]	; (d42ac <_Z20carrierSelectionModev+0x84>)
   d4294:	4620      	mov	r0, r4
   d4296:	f7ff ffbf 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63513\"\r\n");         // Manually connect to TIGO, and fallback to automatic mode if failed
   d429a:	490a      	ldr	r1, [pc, #40]	; (d42c4 <_Z20carrierSelectionModev+0x9c>)
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ffbb 	bl	d4218 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
   d42a2:	bd10      	pop	{r4, pc}
   d42a4:	2003e3d4 	.word	0x2003e3d4
   d42a8:	2003e3cc 	.word	0x2003e3cc
   d42ac:	000d5ca3 	.word	0x000d5ca3
   d42b0:	000d5caf 	.word	0x000d5caf
   d42b4:	000d5cbb 	.word	0x000d5cbb
   d42b8:	000d5cd2 	.word	0x000d5cd2
   d42bc:	000d5ce9 	.word	0x000d5ce9
   d42c0:	000d5cff 	.word	0x000d5cff
   d42c4:	000d5d15 	.word	0x000d5d15

000d42c8 <_Z14setCarrierMode6String>:
  }
}

int setCarrierMode(String command)                          // Function to force sending data in current hour
{
   d42c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d42ca:	494b      	ldr	r1, [pc, #300]	; (d43f8 <_Z14setCarrierMode6String+0x130>)
   d42cc:	4604      	mov	r4, r0
   d42ce:	f001 f923 	bl	d5518 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d42d2:	b188      	cbz	r0, d42f8 <_Z14setCarrierMode6String+0x30>
  {
    carrierMode = 0;
   d42d4:	4b49      	ldr	r3, [pc, #292]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"Automatic");
   d42d6:	494a      	ldr	r1, [pc, #296]	; (d4400 <_Z14setCarrierMode6String+0x138>)
   d42d8:	484a      	ldr	r0, [pc, #296]	; (d4404 <_Z14setCarrierMode6String+0x13c>)

int setCarrierMode(String command)                          // Function to force sending data in current hour
{
  if (command == "0")
  {
    carrierMode = 0;
   d42da:	2200      	movs	r2, #0
   d42dc:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"Automatic");
   d42de:	f001 fc99 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42e2:	f000 fa15 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Carrier Selection Mode", PRIVATE);
   d42e6:	2800      	cmp	r0, #0
   d42e8:	d07d      	beq.n	d43e6 <_Z14setCarrierMode6String+0x11e>
   d42ea:	4b47      	ldr	r3, [pc, #284]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42ec:	4a47      	ldr	r2, [pc, #284]	; (d440c <_Z14setCarrierMode6String+0x144>)
   d42ee:	781b      	ldrb	r3, [r3, #0]
   d42f0:	f88d 3000 	strb.w	r3, [sp]
   d42f4:	233c      	movs	r3, #60	; 0x3c
   d42f6:	e06f      	b.n	d43d8 <_Z14setCarrierMode6String+0x110>
   d42f8:	4945      	ldr	r1, [pc, #276]	; (d4410 <_Z14setCarrierMode6String+0x148>)
   d42fa:	4620      	mov	r0, r4
   d42fc:	f001 f90c 	bl	d5518 <_ZNK6String6equalsEPKc>
  }
  else if (command == "1")
   d4300:	b188      	cbz	r0, d4326 <_Z14setCarrierMode6String+0x5e>
  {
    carrierMode = 1;
   d4302:	4b3e      	ldr	r3, [pc, #248]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"AT&T");
   d4304:	4943      	ldr	r1, [pc, #268]	; (d4414 <_Z14setCarrierMode6String+0x14c>)
   d4306:	483f      	ldr	r0, [pc, #252]	; (d4404 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"Automatic");
    if (Particle.connected()) Particle.publish("Mode","Cleared Carrier Selection Mode", PRIVATE);
  }
  else if (command == "1")
  {
    carrierMode = 1;
   d4308:	2201      	movs	r2, #1
   d430a:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"AT&T");
   d430c:	f001 fc82 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4310:	f000 f9fe 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to AT&T", PRIVATE);
   d4314:	2800      	cmp	r0, #0
   d4316:	d066      	beq.n	d43e6 <_Z14setCarrierMode6String+0x11e>
   d4318:	4b3b      	ldr	r3, [pc, #236]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d431a:	4a3f      	ldr	r2, [pc, #252]	; (d4418 <_Z14setCarrierMode6String+0x150>)
   d431c:	781b      	ldrb	r3, [r3, #0]
   d431e:	f88d 3000 	strb.w	r3, [sp]
   d4322:	233c      	movs	r3, #60	; 0x3c
   d4324:	e058      	b.n	d43d8 <_Z14setCarrierMode6String+0x110>
   d4326:	493d      	ldr	r1, [pc, #244]	; (d441c <_Z14setCarrierMode6String+0x154>)
   d4328:	4620      	mov	r0, r4
   d432a:	f001 f8f5 	bl	d5518 <_ZNK6String6equalsEPKc>
  }
  else if (command == "2")
   d432e:	b188      	cbz	r0, d4354 <_Z14setCarrierMode6String+0x8c>
  {
    carrierMode = 2;
   d4330:	4b32      	ldr	r3, [pc, #200]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"T-Mobile");
   d4332:	493b      	ldr	r1, [pc, #236]	; (d4420 <_Z14setCarrierMode6String+0x158>)
   d4334:	4833      	ldr	r0, [pc, #204]	; (d4404 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"AT&T");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to AT&T", PRIVATE);
  }
  else if (command == "2")
  {
    carrierMode = 2;
   d4336:	2202      	movs	r2, #2
   d4338:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"T-Mobile");
   d433a:	f001 fc6b 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d433e:	f000 f9e7 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to T-Mobile", PRIVATE);
   d4342:	2800      	cmp	r0, #0
   d4344:	d04f      	beq.n	d43e6 <_Z14setCarrierMode6String+0x11e>
   d4346:	4b30      	ldr	r3, [pc, #192]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4348:	4a36      	ldr	r2, [pc, #216]	; (d4424 <_Z14setCarrierMode6String+0x15c>)
   d434a:	781b      	ldrb	r3, [r3, #0]
   d434c:	f88d 3000 	strb.w	r3, [sp]
   d4350:	233c      	movs	r3, #60	; 0x3c
   d4352:	e041      	b.n	d43d8 <_Z14setCarrierMode6String+0x110>
   d4354:	4934      	ldr	r1, [pc, #208]	; (d4428 <_Z14setCarrierMode6String+0x160>)
   d4356:	4620      	mov	r0, r4
   d4358:	f001 f8de 	bl	d5518 <_ZNK6String6equalsEPKc>
  }
  else if (command == "3")
   d435c:	b188      	cbz	r0, d4382 <_Z14setCarrierMode6String+0xba>
  {
    carrierMode = 3;
   d435e:	4b27      	ldr	r3, [pc, #156]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"Airtel");
   d4360:	4932      	ldr	r1, [pc, #200]	; (d442c <_Z14setCarrierMode6String+0x164>)
   d4362:	4828      	ldr	r0, [pc, #160]	; (d4404 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"T-Mobile");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to T-Mobile", PRIVATE);
  }
  else if (command == "3")
  {
    carrierMode = 3;
   d4364:	2203      	movs	r2, #3
   d4366:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"Airtel");
   d4368:	f001 fc54 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d436c:	f000 f9d0 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to Airtel", PRIVATE);
   d4370:	2800      	cmp	r0, #0
   d4372:	d038      	beq.n	d43e6 <_Z14setCarrierMode6String+0x11e>
   d4374:	4b24      	ldr	r3, [pc, #144]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4376:	4a2e      	ldr	r2, [pc, #184]	; (d4430 <_Z14setCarrierMode6String+0x168>)
   d4378:	781b      	ldrb	r3, [r3, #0]
   d437a:	f88d 3000 	strb.w	r3, [sp]
   d437e:	233c      	movs	r3, #60	; 0x3c
   d4380:	e02a      	b.n	d43d8 <_Z14setCarrierMode6String+0x110>
   d4382:	492c      	ldr	r1, [pc, #176]	; (d4434 <_Z14setCarrierMode6String+0x16c>)
   d4384:	4620      	mov	r0, r4
   d4386:	f001 f8c7 	bl	d5518 <_ZNK6String6equalsEPKc>
  }
  else if (command == "4")
   d438a:	b180      	cbz	r0, d43ae <_Z14setCarrierMode6String+0xe6>
  {
    carrierMode = 4;
   d438c:	4b1b      	ldr	r3, [pc, #108]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"MTN");
   d438e:	492a      	ldr	r1, [pc, #168]	; (d4438 <_Z14setCarrierMode6String+0x170>)
   d4390:	481c      	ldr	r0, [pc, #112]	; (d4404 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"Airtel");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to Airtel", PRIVATE);
  }
  else if (command == "4")
  {
    carrierMode = 4;
   d4392:	2204      	movs	r2, #4
   d4394:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"MTN");
   d4396:	f001 fc3d 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d439a:	f000 f9b9 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to MTN/RwandaCell", PRIVATE);
   d439e:	b310      	cbz	r0, d43e6 <_Z14setCarrierMode6String+0x11e>
   d43a0:	4b19      	ldr	r3, [pc, #100]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43a2:	4a26      	ldr	r2, [pc, #152]	; (d443c <_Z14setCarrierMode6String+0x174>)
   d43a4:	781b      	ldrb	r3, [r3, #0]
   d43a6:	f88d 3000 	strb.w	r3, [sp]
   d43aa:	233c      	movs	r3, #60	; 0x3c
   d43ac:	e014      	b.n	d43d8 <_Z14setCarrierMode6String+0x110>
   d43ae:	4924      	ldr	r1, [pc, #144]	; (d4440 <_Z14setCarrierMode6String+0x178>)
   d43b0:	4620      	mov	r0, r4
   d43b2:	f001 f8b1 	bl	d5518 <_ZNK6String6equalsEPKc>
  }
  else if (command == "5")
   d43b6:	b1e8      	cbz	r0, d43f4 <_Z14setCarrierMode6String+0x12c>
  {
    carrierMode = 5;
   d43b8:	4b10      	ldr	r3, [pc, #64]	; (d43fc <_Z14setCarrierMode6String+0x134>)
    strcpy(carrierModeStr,"TIGO");
   d43ba:	4922      	ldr	r1, [pc, #136]	; (d4444 <_Z14setCarrierMode6String+0x17c>)
   d43bc:	4811      	ldr	r0, [pc, #68]	; (d4404 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"MTN");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to MTN/RwandaCell", PRIVATE);
  }
  else if (command == "5")
  {
    carrierMode = 5;
   d43be:	2205      	movs	r2, #5
   d43c0:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"TIGO");
   d43c2:	f001 fc27 	bl	d5c14 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43c6:	f000 f9a3 	bl	d4710 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to TIGO", PRIVATE);
   d43ca:	b160      	cbz	r0, d43e6 <_Z14setCarrierMode6String+0x11e>
   d43cc:	4b0e      	ldr	r3, [pc, #56]	; (d4408 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43ce:	4a1e      	ldr	r2, [pc, #120]	; (d4448 <_Z14setCarrierMode6String+0x180>)
   d43d0:	781b      	ldrb	r3, [r3, #0]
   d43d2:	f88d 3000 	strb.w	r3, [sp]
   d43d6:	233c      	movs	r3, #60	; 0x3c
   d43d8:	a802      	add	r0, sp, #8
   d43da:	491c      	ldr	r1, [pc, #112]	; (d444c <_Z14setCarrierMode6String+0x184>)
   d43dc:	f000 fc2e 	bl	d4c3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43e0:	a803      	add	r0, sp, #12
   d43e2:	f7ff ff03 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  else return 0;
      
  disconnectFromParticle();
   d43e6:	f7ff fed9 	bl	d419c <_Z22disconnectFromParticlev>
  carrierSelectionMode();
   d43ea:	f7ff ff1d 	bl	d4228 <_Z20carrierSelectionModev>
  connectToParticle();
   d43ee:	f7ff fe95 	bl	d411c <_Z17connectToParticlev>

  return 1;
   d43f2:	2001      	movs	r0, #1
}
   d43f4:	b004      	add	sp, #16
   d43f6:	bd10      	pop	{r4, pc}
   d43f8:	000d5d2b 	.word	0x000d5d2b
   d43fc:	2003e3cc 	.word	0x2003e3cc
   d4400:	000d5d2d 	.word	0x000d5d2d
   d4404:	2003e338 	.word	0x2003e338
   d4408:	2003e3bc 	.word	0x2003e3bc
   d440c:	000d5d37 	.word	0x000d5d37
   d4410:	000d5e92 	.word	0x000d5e92
   d4414:	000d5d68 	.word	0x000d5d68
   d4418:	000d5d56 	.word	0x000d5d56
   d441c:	000d5d6d 	.word	0x000d5d6d
   d4420:	000d5d81 	.word	0x000d5d81
   d4424:	000d5d6f 	.word	0x000d5d6f
   d4428:	000d5d8a 	.word	0x000d5d8a
   d442c:	000d5d9e 	.word	0x000d5d9e
   d4430:	000d5d8c 	.word	0x000d5d8c
   d4434:	000d5da5 	.word	0x000d5da5
   d4438:	000d5da7 	.word	0x000d5da7
   d443c:	000d5dab 	.word	0x000d5dab
   d4440:	000d5dcc 	.word	0x000d5dcc
   d4444:	000d5de0 	.word	0x000d5de0
   d4448:	000d5dce 	.word	0x000d5dce
   d444c:	000d5d51 	.word	0x000d5d51

000d4450 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4450:	4b15      	ldr	r3, [pc, #84]	; (d44a8 <_GLOBAL__sub_I___appProductID+0x58>)
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
   d4452:	b570      	push	{r4, r5, r6, lr}
   d4454:	2601      	movs	r6, #1
   d4456:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4458:	f000 f876 	bl	d4548 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d445c:	f001 fa1c 	bl	d5898 <spark_protocol_instance>
   d4460:	2300      	movs	r3, #0
   d4462:	461a      	mov	r2, r3
   d4464:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d4468:	f001 fa1e 	bl	d58a8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d446c:	f001 fa14 	bl	d5898 <spark_protocol_instance>
   d4470:	2300      	movs	r3, #0

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4472:	4c0e      	ldr	r4, [pc, #56]	; (d44ac <_GLOBAL__sub_I___appProductID+0x5c>)
   d4474:	461a      	mov	r2, r3
   d4476:	2125      	movs	r1, #37	; 0x25
   d4478:	f001 fa1e 	bl	d58b8 <spark_protocol_set_product_firmware_version>
   d447c:	2500      	movs	r5, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d447e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4482:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4484:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4486:	6025      	str	r5, [r4, #0]
   d4488:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d448a:	71a5      	strb	r5, [r4, #6]
   d448c:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d448e:	f000 f8e3 	bl	d4658 <set_system_mode>
PRODUCT_ID(10709);                                  // Boron Connected Counter Header
PRODUCT_VERSION(37);
#define DSTRULES isDSTusa
char currentPointRelease[6] ="37.02";

SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d4492:	4907      	ldr	r1, [pc, #28]	; (d44b0 <_GLOBAL__sub_I___appProductID+0x60>)
   d4494:	4a07      	ldr	r2, [pc, #28]	; (d44b4 <_GLOBAL__sub_I___appProductID+0x64>)
   d4496:	4620      	mov	r0, r4
   d4498:	f001 fa16 	bl	d58c8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d449c:	4629      	mov	r1, r5
   d449e:	4630      	mov	r0, r6
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
   d44a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
PRODUCT_VERSION(37);
#define DSTRULES isDSTusa
char currentPointRelease[6] ="37.02";

SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d44a4:	f000 b8e0 	b.w	d4668 <system_thread_set_state>
   d44a8:	2003e3bc 	.word	0x2003e3bc
   d44ac:	2003e3c0 	.word	0x2003e3c0
   d44b0:	000d40b3 	.word	0x000d40b3
   d44b4:	2003e3b8 	.word	0x2003e3b8

000d44b8 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <cellular_command+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030274 	.word	0x00030274

000d44c8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <os_thread_is_current+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	689b      	ldr	r3, [r3, #8]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030248 	.word	0x00030248

000d44d8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <os_thread_join+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	691b      	ldr	r3, [r3, #16]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030248 	.word	0x00030248

000d44e8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <os_thread_cleanup+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030248 	.word	0x00030248

000d44f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <os_mutex_recursive_create+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030248 	.word	0x00030248

000d4508 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <os_mutex_recursive_destroy+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030248 	.word	0x00030248

000d4518 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_RNG_GetRandomNumber+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030218 	.word	0x00030218

000d4528 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030218 	.word	0x00030218

000d4538 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <hal_timer_millis+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030218 	.word	0x00030218

000d4548 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_Pin_Map+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	681b      	ldr	r3, [r3, #0]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003022c 	.word	0x0003022c

000d4558 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <inet_inet_ntop+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	695b      	ldr	r3, [r3, #20]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030264 	.word	0x00030264

000d4568 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <netdb_freeaddrinfo+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	689b      	ldr	r3, [r3, #8]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030268 	.word	0x00030268

000d4578 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <netdb_getaddrinfo+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	68db      	ldr	r3, [r3, #12]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030268 	.word	0x00030268

000d4588 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_USART_Init+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	681b      	ldr	r3, [r3, #0]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	0003023c 	.word	0x0003023c

000d4598 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_USART_Write_Data+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	68db      	ldr	r3, [r3, #12]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	0003023c 	.word	0x0003023c

000d45a8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_USART_Available_Data+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	691b      	ldr	r3, [r3, #16]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003023c 	.word	0x0003023c

000d45b8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_USART_Read_Data+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	695b      	ldr	r3, [r3, #20]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003023c 	.word	0x0003023c

000d45c8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_USART_Peek_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	699b      	ldr	r3, [r3, #24]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003023c 	.word	0x0003023c

000d45d8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_USART_Flush_Data+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	69db      	ldr	r3, [r3, #28]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USART_Available_Data_For_Write+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USB_USART_Init+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	681b      	ldr	r3, [r3, #0]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003024c 	.word	0x0003024c

000d4608 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USB_USART_Available_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	691b      	ldr	r3, [r3, #16]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003024c 	.word	0x0003024c

000d4618 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003024c 	.word	0x0003024c

000d4628 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Receive_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	699b      	ldr	r3, [r3, #24]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Send_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	69db      	ldr	r3, [r3, #28]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Flush_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6a1b      	ldr	r3, [r3, #32]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <set_system_mode+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	685b      	ldr	r3, [r3, #4]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030220 	.word	0x00030220

000d4668 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <system_thread_set_state+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030220 	.word	0x00030220

000d4678 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <application_thread_current+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030220 	.word	0x00030220

000d4688 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <application_thread_invoke+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030220 	.word	0x00030220

000d4698 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b03      	ldr	r3, [pc, #12]	; (d46a8 <system_ctrl_set_app_request_handler+0x10>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46a2:	9301      	str	r3, [sp, #4]
   d46a4:	bd08      	pop	{r3, pc}
   d46a6:	0000      	.short	0x0000
   d46a8:	00030220 	.word	0x00030220

000d46ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b03      	ldr	r3, [pc, #12]	; (d46bc <system_ctrl_set_result+0x10>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46b6:	9301      	str	r3, [sp, #4]
   d46b8:	bd08      	pop	{r3, pc}
   d46ba:	0000      	.short	0x0000
   d46bc:	00030220 	.word	0x00030220

000d46c0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <spark_variable+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	681b      	ldr	r3, [r3, #0]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030244 	.word	0x00030244

000d46d0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <spark_function+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	685b      	ldr	r3, [r3, #4]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030244 	.word	0x00030244

000d46e0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <spark_process+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	689b      	ldr	r3, [r3, #8]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030244 	.word	0x00030244

000d46f0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <spark_cloud_flag_connect+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	68db      	ldr	r3, [r3, #12]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030244 	.word	0x00030244

000d4700 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <spark_cloud_flag_disconnect+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	691b      	ldr	r3, [r3, #16]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030244 	.word	0x00030244

000d4710 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <spark_cloud_flag_connected+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030244 	.word	0x00030244

000d4720 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <spark_send_event+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a1b      	ldr	r3, [r3, #32]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030244 	.word	0x00030244

000d4730 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030244 	.word	0x00030244

000d4740 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <network_connect+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	685b      	ldr	r3, [r3, #4]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030240 	.word	0x00030240

000d4750 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <network_connecting+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	689b      	ldr	r3, [r3, #8]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030240 	.word	0x00030240

000d4760 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <network_disconnect+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	68db      	ldr	r3, [r3, #12]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030240 	.word	0x00030240

000d4770 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_ready+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	691b      	ldr	r3, [r3, #16]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_on+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_off+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	699b      	ldr	r3, [r3, #24]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_listen+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	69db      	ldr	r3, [r3, #28]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_listening+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6a1b      	ldr	r3, [r3, #32]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_set_listen_timeout+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_get_listen_timeout+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <malloc+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	681b      	ldr	r3, [r3, #0]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003021c 	.word	0x0003021c

000d47f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <free+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	685b      	ldr	r3, [r3, #4]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003021c 	.word	0x0003021c

000d4800 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <realloc+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	689b      	ldr	r3, [r3, #8]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003021c 	.word	0x0003021c

000d4810 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <abort+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003021c 	.word	0x0003021c

000d4820 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <_malloc_r+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4830:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4832:	6883      	ldr	r3, [r0, #8]
   d4834:	4604      	mov	r4, r0
   d4836:	b90b      	cbnz	r3, d483c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4838:	f001 f84d 	bl	d58d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d483c:	68c3      	ldr	r3, [r0, #12]
   d483e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4840:	68a3      	ldr	r3, [r4, #8]
   d4842:	b11b      	cbz	r3, d484c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4844:	2203      	movs	r2, #3
   d4846:	4621      	mov	r1, r4
   d4848:	4620      	mov	r0, r4
   d484a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d484c:	4620      	mov	r0, r4
   d484e:	2110      	movs	r1, #16
}
   d4850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4854:	f001 b83d 	b.w	d58d2 <_ZdlPvj>

000d4858 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4858:	b510      	push	{r4, lr}
   d485a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d485c:	6800      	ldr	r0, [r0, #0]
   d485e:	b108      	cbz	r0, d4864 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4860:	f7ff fe52 	bl	d4508 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4864:	4620      	mov	r0, r4
   d4866:	bd10      	pop	{r4, pc}

000d4868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4868:	680b      	ldr	r3, [r1, #0]
   d486a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d486c:	b113      	cbz	r3, d4874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d486e:	685a      	ldr	r2, [r3, #4]
   d4870:	3201      	adds	r2, #1
   d4872:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4874:	4770      	bx	lr
	...

000d4878 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4878:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d487a:	4c06      	ldr	r4, [pc, #24]	; (d4894 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d487c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d487e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4880:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4882:	f7ff fe39 	bl	d44f8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4886:	4620      	mov	r0, r4
   d4888:	4a03      	ldr	r2, [pc, #12]	; (d4898 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d488a:	4904      	ldr	r1, [pc, #16]	; (d489c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4890:	f001 b81a 	b.w	d58c8 <__aeabi_atexit>
   d4894:	2003e3d0 	.word	0x2003e3d0
   d4898:	2003e3b8 	.word	0x2003e3b8
   d489c:	000d4859 	.word	0x000d4859

000d48a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d48a0:	2200      	movs	r2, #0
   d48a2:	4611      	mov	r1, r2
   d48a4:	6840      	ldr	r0, [r0, #4]
   d48a6:	f7ff bf63 	b.w	d4770 <network_ready>

000d48aa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48aa:	2200      	movs	r2, #0
   d48ac:	4611      	mov	r1, r2
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	f7ff bf7e 	b.w	d47b0 <network_listening>

000d48b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48b4:	2200      	movs	r2, #0
   d48b6:	4611      	mov	r1, r2
   d48b8:	6840      	ldr	r0, [r0, #4]
   d48ba:	f7ff bf89 	b.w	d47d0 <network_get_listen_timeout>

000d48be <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48be:	2200      	movs	r2, #0
   d48c0:	6840      	ldr	r0, [r0, #4]
   d48c2:	f7ff bf7d 	b.w	d47c0 <network_set_listen_timeout>

000d48c6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48c6:	2200      	movs	r2, #0
   d48c8:	f081 0101 	eor.w	r1, r1, #1
   d48cc:	6840      	ldr	r0, [r0, #4]
   d48ce:	f7ff bf67 	b.w	d47a0 <network_listen>

000d48d2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d48d2:	2300      	movs	r3, #0
   d48d4:	461a      	mov	r2, r3
   d48d6:	4619      	mov	r1, r3
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	f7ff bf59 	b.w	d4790 <network_off>

000d48de <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48de:	2200      	movs	r2, #0
   d48e0:	4611      	mov	r1, r2
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff bf34 	b.w	d4750 <network_connecting>

000d48e8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	2102      	movs	r1, #2
   d48ec:	6840      	ldr	r0, [r0, #4]
   d48ee:	f7ff bf37 	b.w	d4760 <network_disconnect>

000d48f2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48f2:	2300      	movs	r3, #0
   d48f4:	461a      	mov	r2, r3
   d48f6:	6840      	ldr	r0, [r0, #4]
   d48f8:	f7ff bf22 	b.w	d4740 <network_connect>

000d48fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d48fc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d48fe:	4c08      	ldr	r4, [pc, #32]	; (d4920 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4900:	2528      	movs	r5, #40	; 0x28
   d4902:	462a      	mov	r2, r5
   d4904:	2100      	movs	r1, #0
   d4906:	4620      	mov	r0, r4
   d4908:	f001 f949 	bl	d5b9e <memset>
        cid = -1;
   d490c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4910:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4912:	4b04      	ldr	r3, [pc, #16]	; (d4924 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4914:	8025      	strh	r5, [r4, #0]
   d4916:	2204      	movs	r2, #4
   d4918:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d491a:	4a03      	ldr	r2, [pc, #12]	; (d4928 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d491c:	601a      	str	r2, [r3, #0]
   d491e:	bd38      	pop	{r3, r4, r5, pc}
   d4920:	2003e3dc 	.word	0x2003e3dc
   d4924:	2003e3d4 	.word	0x2003e3d4
   d4928:	000d5df0 	.word	0x000d5df0

000d492c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d492c:	4770      	bx	lr

000d492e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d492e:	2000      	movs	r0, #0
   d4930:	4770      	bx	lr

000d4932 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4932:	b510      	push	{r4, lr}
   d4934:	2110      	movs	r1, #16
   d4936:	4604      	mov	r4, r0
   d4938:	f000 ffcb 	bl	d58d2 <_ZdlPvj>
   d493c:	4620      	mov	r0, r4
   d493e:	bd10      	pop	{r4, pc}

000d4940 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4940:	b508      	push	{r3, lr}
      { delete this; }
   d4942:	b108      	cbz	r0, d4948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4944:	f7ff fff5 	bl	d4932 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4948:	bd08      	pop	{r3, pc}

000d494a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d494a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d494c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d494e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4950:	b113      	cbz	r3, d4958 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4952:	2203      	movs	r2, #3
   d4954:	4601      	mov	r1, r0
   d4956:	4798      	blx	r3
    }
   d4958:	4620      	mov	r0, r4
   d495a:	bd10      	pop	{r4, pc}

000d495c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d495c:	2200      	movs	r2, #0
   d495e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4960:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4962:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4966:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4968:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d496c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d496e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4970:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4972:	680c      	ldr	r4, [r1, #0]
   d4974:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4976:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4978:	bd10      	pop	{r4, pc}

000d497a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d497a:	b510      	push	{r4, lr}
   d497c:	4604      	mov	r4, r0
    free((void*)msg_);
   d497e:	6800      	ldr	r0, [r0, #0]
   d4980:	f7ff ff36 	bl	d47f0 <free>
}
   d4984:	4620      	mov	r0, r4
   d4986:	bd10      	pop	{r4, pc}

000d4988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4988:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d498a:	68c4      	ldr	r4, [r0, #12]
   d498c:	b1f4      	cbz	r4, d49cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d498e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4990:	2b02      	cmp	r3, #2
   d4992:	d103      	bne.n	d499c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4994:	f104 000c 	add.w	r0, r4, #12
   d4998:	f7ff ffef 	bl	d497a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d499c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d499e:	b135      	cbz	r5, d49ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49a0:	4628      	mov	r0, r5
   d49a2:	f7ff ffd2 	bl	d494a <_ZNSt14_Function_baseD1Ev>
   d49a6:	2110      	movs	r1, #16
   d49a8:	4628      	mov	r0, r5
   d49aa:	f000 ff92 	bl	d58d2 <_ZdlPvj>
   d49ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d49b0:	b135      	cbz	r5, d49c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d49b2:	4628      	mov	r0, r5
   d49b4:	f7ff ffc9 	bl	d494a <_ZNSt14_Function_baseD1Ev>
   d49b8:	2110      	movs	r1, #16
   d49ba:	4628      	mov	r0, r5
   d49bc:	f000 ff89 	bl	d58d2 <_ZdlPvj>
   d49c0:	4620      	mov	r0, r4
   d49c2:	2114      	movs	r1, #20
   d49c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d49c8:	f000 bf83 	b.w	d58d2 <_ZdlPvj>
   d49cc:	bd38      	pop	{r3, r4, r5, pc}

000d49ce <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d49ce:	b510      	push	{r4, lr}
   d49d0:	b088      	sub	sp, #32
   d49d2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d49d4:	4668      	mov	r0, sp
   d49d6:	f000 fd72 	bl	d54be <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d49da:	4669      	mov	r1, sp
   d49dc:	a804      	add	r0, sp, #16
   d49de:	f000 fd90 	bl	d5502 <_ZN6StringC1ERKS_>
   d49e2:	a804      	add	r0, sp, #16
   d49e4:	47a0      	blx	r4
   d49e6:	4604      	mov	r4, r0
   d49e8:	a804      	add	r0, sp, #16
   d49ea:	f000 fd21 	bl	d5430 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d49ee:	4668      	mov	r0, sp
   d49f0:	f000 fd1e 	bl	d5430 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d49f4:	4620      	mov	r0, r4
   d49f6:	b008      	add	sp, #32
   d49f8:	bd10      	pop	{r4, pc}

000d49fa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d49fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d49fc:	2410      	movs	r4, #16
   d49fe:	b085      	sub	sp, #20
   d4a00:	4607      	mov	r7, r0
   d4a02:	460e      	mov	r6, r1
   d4a04:	4615      	mov	r5, r2
   d4a06:	2100      	movs	r1, #0
   d4a08:	4622      	mov	r2, r4
   d4a0a:	4668      	mov	r0, sp
   d4a0c:	f001 f8c7 	bl	d5b9e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a10:	2200      	movs	r2, #0
   d4a12:	4669      	mov	r1, sp
   d4a14:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4a16:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4a1a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4a1c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4a1e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a20:	f7ff fe56 	bl	d46d0 <spark_function>
}
   d4a24:	b005      	add	sp, #20
   d4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a28:	b513      	push	{r0, r1, r4, lr}
   d4a2a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a2c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a30:	2300      	movs	r3, #0
   d4a32:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a34:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4a36:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4a38:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a3a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4a3c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a3e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a40:	f7ff fbd4 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a44:	4620      	mov	r0, r4
   d4a46:	b002      	add	sp, #8
   d4a48:	bd10      	pop	{r4, pc}

000d4a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a4c:	460c      	mov	r4, r1
   d4a4e:	ad02      	add	r5, sp, #8
   d4a50:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a54:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a58:	4606      	mov	r6, r0
   d4a5a:	460f      	mov	r7, r1
   d4a5c:	a801      	add	r0, sp, #4
   d4a5e:	4621      	mov	r1, r4
   d4a60:	f7ff ff02 	bl	d4868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4a64:	4629      	mov	r1, r5
   d4a66:	4630      	mov	r0, r6
   d4a68:	f7ff ffde 	bl	d4a28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a6c:	a801      	add	r0, sp, #4
   d4a6e:	f7ff fbbd 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a72:	4620      	mov	r0, r4
   d4a74:	f7ff fbba 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4a78:	4638      	mov	r0, r7
   d4a7a:	2108      	movs	r1, #8
   d4a7c:	f000 ff29 	bl	d58d2 <_ZdlPvj>
        return p;
    }
   d4a80:	4630      	mov	r0, r6
   d4a82:	b003      	add	sp, #12
   d4a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a86 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a86:	b513      	push	{r0, r1, r4, lr}
   d4a88:	460b      	mov	r3, r1
   d4a8a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a8c:	c803      	ldmia	r0, {r0, r1}
   d4a8e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a92:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a96:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a9a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4aa2:	b002      	add	sp, #8
   d4aa4:	bd10      	pop	{r4, pc}
	...

000d4aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4aa8:	b538      	push	{r3, r4, r5, lr}
   d4aaa:	2300      	movs	r3, #0
   d4aac:	4604      	mov	r4, r0
   d4aae:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ab0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ab2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ab4:	f7ff faef 	bl	d4096 <_Znwj>
   d4ab8:	b128      	cbz	r0, d4ac6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4aba:	2301      	movs	r3, #1
   d4abc:	6043      	str	r3, [r0, #4]
   d4abe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4ac0:	4b02      	ldr	r3, [pc, #8]	; (d4acc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4ac2:	6003      	str	r3, [r0, #0]
   d4ac4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ac6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4ac8:	4620      	mov	r0, r4
   d4aca:	bd38      	pop	{r3, r4, r5, pc}
   d4acc:	000d5e24 	.word	0x000d5e24

000d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ad0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ad2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ad4:	b90a      	cbnz	r2, d4ada <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ad6:	f000 fefe 	bl	d58d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ada:	68c3      	ldr	r3, [r0, #12]
    }
   d4adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ae0:	4718      	bx	r3

000d4ae2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ae2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ae4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ae6:	f100 0110 	add.w	r1, r0, #16
   d4aea:	f7ff fff1 	bl	d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4aee:	bd08      	pop	{r3, pc}

000d4af0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4af0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4af2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4af4:	b90a      	cbnz	r2, d4afa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4af6:	f000 feee 	bl	d58d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4afa:	68c3      	ldr	r3, [r0, #12]
    }
   d4afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b00:	4718      	bx	r3

000d4b02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b06:	f100 0110 	add.w	r1, r0, #16
   d4b0a:	f7ff fff1 	bl	d4af0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4b0e:	bd08      	pop	{r3, pc}

000d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b12:	2300      	movs	r3, #0
   d4b14:	6083      	str	r3, [r0, #8]
   d4b16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b18:	4604      	mov	r4, r0
   d4b1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b1c:	b12b      	cbz	r3, d4b2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b1e:	2202      	movs	r2, #2
   d4b20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b22:	68eb      	ldr	r3, [r5, #12]
   d4b24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b26:	68ab      	ldr	r3, [r5, #8]
   d4b28:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b32:	b089      	sub	sp, #36	; 0x24
   d4b34:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4b36:	4668      	mov	r0, sp
   d4b38:	f7ff ff10 	bl	d495c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b3c:	2300      	movs	r3, #0
   d4b3e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b42:	f04f 0202 	mov.w	r2, #2
   d4b46:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b4a:	2b00      	cmp	r3, #0
   d4b4c:	d103      	bne.n	d4b56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b4e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b52:	2900      	cmp	r1, #0
   d4b54:	d1f7      	bne.n	d4b46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4b56:	d002      	beq.n	d4b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4b58:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b5c:	e063      	b.n	d4c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4b5e:	f114 050c 	adds.w	r5, r4, #12
   d4b62:	d003      	beq.n	d4b6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4b64:	4669      	mov	r1, sp
   d4b66:	4628      	mov	r0, r5
   d4b68:	f7ff fef8 	bl	d495c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b6c:	f3bf 8f5f 	dmb	sy
   d4b70:	2301      	movs	r3, #1
   d4b72:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b74:	2000      	movs	r0, #0
   d4b76:	f104 0308 	add.w	r3, r4, #8
   d4b7a:	f3bf 8f5f 	dmb	sy
   d4b7e:	e853 6f00 	ldrex	r6, [r3]
   d4b82:	e843 0200 	strex	r2, r0, [r3]
   d4b86:	2a00      	cmp	r2, #0
   d4b88:	d1f9      	bne.n	d4b7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4b8a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b8e:	2e00      	cmp	r6, #0
   d4b90:	d049      	beq.n	d4c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b92:	f7ff fd71 	bl	d4678 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b96:	b120      	cbz	r0, d4ba2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4b98:	4629      	mov	r1, r5
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	f7ff ff98 	bl	d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ba0:	e03a      	b.n	d4c18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4ba2:	4631      	mov	r1, r6
   d4ba4:	a802      	add	r0, sp, #8
   d4ba6:	f7ff ffb3 	bl	d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4baa:	68e0      	ldr	r0, [r4, #12]
   d4bac:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bb0:	b108      	cbz	r0, d4bb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4bb2:	f001 f837 	bl	d5c24 <strdup>
   d4bb6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4bb8:	2010      	movs	r0, #16
   d4bba:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4bbe:	f7ff fa6a 	bl	d4096 <_Znwj>
   d4bc2:	4605      	mov	r5, r0
   d4bc4:	b1e8      	cbz	r0, d4c02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bc6:	2700      	movs	r7, #0
   d4bc8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4bca:	2018      	movs	r0, #24
   d4bcc:	f7ff fa63 	bl	d4096 <_Znwj>
   d4bd0:	4604      	mov	r4, r0
   d4bd2:	b188      	cbz	r0, d4bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4bd4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bd6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4bd8:	a802      	add	r0, sp, #8
   d4bda:	f7ff ff54 	bl	d4a86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bde:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4be0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4be2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4be4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4be6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4be8:	a906      	add	r1, sp, #24
   d4bea:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bec:	60e3      	str	r3, [r4, #12]
   d4bee:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4bf2:	9205      	str	r2, [sp, #20]
   d4bf4:	f7ff feb2 	bl	d495c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4bf8:	4b0d      	ldr	r3, [pc, #52]	; (d4c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4bfa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4bfc:	4b0d      	ldr	r3, [pc, #52]	; (d4c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4bfe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c00:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4c02:	a806      	add	r0, sp, #24
   d4c04:	f7ff feb9 	bl	d497a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c08:	a802      	add	r0, sp, #8
   d4c0a:	f7ff fe9e 	bl	d494a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c0e:	2200      	movs	r2, #0
   d4c10:	4629      	mov	r1, r5
   d4c12:	4809      	ldr	r0, [pc, #36]	; (d4c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4c14:	f7ff fd38 	bl	d4688 <application_thread_invoke>
   d4c18:	4630      	mov	r0, r6
   d4c1a:	f7ff fe96 	bl	d494a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c1e:	2110      	movs	r1, #16
   d4c20:	4630      	mov	r0, r6
   d4c22:	f000 fe56 	bl	d58d2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4c26:	4668      	mov	r0, sp
   d4c28:	f7ff fea7 	bl	d497a <_ZN8particle5ErrorD1Ev>
    }
   d4c2c:	b009      	add	sp, #36	; 0x24
   d4c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c30:	000d4ae3 	.word	0x000d4ae3
   d4c34:	000d4d59 	.word	0x000d4d59
   d4c38:	000d4831 	.word	0x000d4831

000d4c3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c40:	b08b      	sub	sp, #44	; 0x2c
   d4c42:	4606      	mov	r6, r0
   d4c44:	460f      	mov	r7, r1
   d4c46:	4690      	mov	r8, r2
   d4c48:	4699      	mov	r9, r3
   d4c4a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c4e:	f7ff fd5f 	bl	d4710 <spark_cloud_flag_connected>
   d4c52:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4c54:	4683      	mov	fp, r0
   d4c56:	bb30      	cbnz	r0, d4ca6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4c5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c5e:	a905      	add	r1, sp, #20
   d4c60:	4628      	mov	r0, r5
   d4c62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c66:	f7ff fe79 	bl	d495c <_ZN8particle5ErrorC1EOS0_>
   d4c6a:	2014      	movs	r0, #20
   d4c6c:	f7ff fa13 	bl	d4096 <_Znwj>
   d4c70:	4604      	mov	r4, r0
   d4c72:	b158      	cbz	r0, d4c8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4c74:	2302      	movs	r3, #2
   d4c76:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c78:	2301      	movs	r3, #1
   d4c7a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c7c:	f8c0 b004 	str.w	fp, [r0, #4]
   d4c80:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4c84:	4629      	mov	r1, r5
   d4c86:	300c      	adds	r0, #12
   d4c88:	f7ff fe68 	bl	d495c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c8c:	4630      	mov	r0, r6
   d4c8e:	4621      	mov	r1, r4
   d4c90:	f840 4b04 	str.w	r4, [r0], #4
   d4c94:	f7ff ff08 	bl	d4aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c98:	4628      	mov	r0, r5
   d4c9a:	f7ff fe6e 	bl	d497a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4c9e:	a805      	add	r0, sp, #20
   d4ca0:	f7ff fe6b 	bl	d497a <_ZN8particle5ErrorD1Ev>
   d4ca4:	e052      	b.n	d4d4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ca6:	2400      	movs	r4, #0
   d4ca8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4caa:	2014      	movs	r0, #20
   d4cac:	606c      	str	r4, [r5, #4]
   d4cae:	60ac      	str	r4, [r5, #8]
   d4cb0:	9307      	str	r3, [sp, #28]
   d4cb2:	f7ff f9f0 	bl	d4096 <_Znwj>
   d4cb6:	4601      	mov	r1, r0
   d4cb8:	b118      	cbz	r0, d4cc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4cba:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cbc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cbe:	6044      	str	r4, [r0, #4]
   d4cc0:	6084      	str	r4, [r0, #8]
   d4cc2:	a804      	add	r0, sp, #16
   d4cc4:	9103      	str	r1, [sp, #12]
   d4cc6:	f7ff feef 	bl	d4aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4cca:	4b22      	ldr	r3, [pc, #136]	; (d4d54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4ccc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4cce:	2008      	movs	r0, #8
   d4cd0:	f7ff f9e1 	bl	d4096 <_Znwj>
   d4cd4:	4604      	mov	r4, r0
   d4cd6:	b128      	cbz	r0, d4ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cd8:	9b03      	ldr	r3, [sp, #12]
   d4cda:	f840 3b04 	str.w	r3, [r0], #4
   d4cde:	a904      	add	r1, sp, #16
   d4ce0:	f7ff fdc2 	bl	d4868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ce4:	9500      	str	r5, [sp, #0]
   d4ce6:	fa5f f38a 	uxtb.w	r3, sl
   d4cea:	464a      	mov	r2, r9
   d4cec:	4641      	mov	r1, r8
   d4cee:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4cf0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4cf2:	f7ff fd15 	bl	d4720 <spark_send_event>
   d4cf6:	b920      	cbnz	r0, d4d02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4cf8:	9b03      	ldr	r3, [sp, #12]
   d4cfa:	785b      	ldrb	r3, [r3, #1]
   d4cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d00:	b183      	cbz	r3, d4d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4d02:	9b03      	ldr	r3, [sp, #12]
   d4d04:	9305      	str	r3, [sp, #20]
   d4d06:	a904      	add	r1, sp, #16
   d4d08:	a806      	add	r0, sp, #24
   d4d0a:	f7ff fdad 	bl	d4868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d0e:	a905      	add	r1, sp, #20
   d4d10:	4630      	mov	r0, r6
   d4d12:	f7ff fe89 	bl	d4a28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d16:	a806      	add	r0, sp, #24
   d4d18:	f7ff fa68 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d1c:	a804      	add	r0, sp, #16
   d4d1e:	f7ff fa65 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d22:	e013      	b.n	d4d4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4d24:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4d28:	a905      	add	r1, sp, #20
   d4d2a:	a803      	add	r0, sp, #12
   d4d2c:	9205      	str	r2, [sp, #20]
   d4d2e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d32:	f7ff fefd 	bl	d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4d36:	a805      	add	r0, sp, #20
   d4d38:	f7ff fe1f 	bl	d497a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d3c:	a805      	add	r0, sp, #20
   d4d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d40:	f7ff fe83 	bl	d4a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d44:	a806      	add	r0, sp, #24
   d4d46:	f7ff fa51 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d4a:	e7da      	b.n	d4d02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4d4c:	4630      	mov	r0, r6
   d4d4e:	b00b      	add	sp, #44	; 0x2c
   d4d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d54:	000d4ec9 	.word	0x000d4ec9

000d4d58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d58:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d5c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d5e:	d006      	beq.n	d4d6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4d60:	2a03      	cmp	r2, #3
   d4d62:	d017      	beq.n	d4d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4d64:	2a01      	cmp	r2, #1
   d4d66:	d122      	bne.n	d4dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d68:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d6a:	6003      	str	r3, [r0, #0]
	      break;
   d4d6c:	e01f      	b.n	d4dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d6e:	2018      	movs	r0, #24
   d4d70:	680e      	ldr	r6, [r1, #0]
   d4d72:	f7ff f990 	bl	d4096 <_Znwj>
   d4d76:	4605      	mov	r5, r0
   d4d78:	b150      	cbz	r0, d4d90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d7a:	4631      	mov	r1, r6
   d4d7c:	f7ff fec8 	bl	d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d80:	6930      	ldr	r0, [r6, #16]
   d4d82:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d86:	b108      	cbz	r0, d4d8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4d88:	f000 ff4c 	bl	d5c24 <strdup>
   d4d8c:	6128      	str	r0, [r5, #16]
   d4d8e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d90:	6025      	str	r5, [r4, #0]
   d4d92:	e00c      	b.n	d4dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d94:	6804      	ldr	r4, [r0, #0]
   d4d96:	b154      	cbz	r4, d4dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4d98:	f104 0010 	add.w	r0, r4, #16
   d4d9c:	f7ff fded 	bl	d497a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4da0:	4620      	mov	r0, r4
   d4da2:	f7ff fdd2 	bl	d494a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4da6:	2118      	movs	r1, #24
   d4da8:	4620      	mov	r0, r4
   d4daa:	f000 fd92 	bl	d58d2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4dae:	2000      	movs	r0, #0
   d4db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4db2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4db2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4db4:	2300      	movs	r3, #0
   d4db6:	6083      	str	r3, [r0, #8]
   d4db8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dba:	4604      	mov	r4, r0
   d4dbc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4dbe:	b12b      	cbz	r3, d4dcc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dc0:	2202      	movs	r2, #2
   d4dc2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dc4:	68eb      	ldr	r3, [r5, #12]
   d4dc6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dc8:	68ab      	ldr	r3, [r5, #8]
   d4dca:	60a3      	str	r3, [r4, #8]
	}
    }
   d4dcc:	4620      	mov	r0, r4
   d4dce:	bd38      	pop	{r3, r4, r5, pc}

000d4dd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4dd0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4dd2:	b570      	push	{r4, r5, r6, lr}
   d4dd4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4dd6:	d006      	beq.n	d4de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4dd8:	2a03      	cmp	r2, #3
   d4dda:	d011      	beq.n	d4e00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4ddc:	2a01      	cmp	r2, #1
   d4dde:	d118      	bne.n	d4e12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4de0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4de2:	6003      	str	r3, [r0, #0]
	      break;
   d4de4:	e015      	b.n	d4e12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4de6:	2014      	movs	r0, #20
   d4de8:	680e      	ldr	r6, [r1, #0]
   d4dea:	f7ff f954 	bl	d4096 <_Znwj>
   d4dee:	4605      	mov	r5, r0
   d4df0:	b120      	cbz	r0, d4dfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4df2:	4631      	mov	r1, r6
   d4df4:	f7ff ffdd 	bl	d4db2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4df8:	7c33      	ldrb	r3, [r6, #16]
   d4dfa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dfc:	6025      	str	r5, [r4, #0]
   d4dfe:	e008      	b.n	d4e12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e00:	6804      	ldr	r4, [r0, #0]
   d4e02:	b134      	cbz	r4, d4e12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e04:	4620      	mov	r0, r4
   d4e06:	f7ff fda0 	bl	d494a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e0a:	2114      	movs	r1, #20
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	f000 fd60 	bl	d58d2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e12:	2000      	movs	r0, #0
   d4e14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4e18:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e1a:	2300      	movs	r3, #0
   d4e1c:	b087      	sub	sp, #28
   d4e1e:	460c      	mov	r4, r1
   d4e20:	f3bf 8f5f 	dmb	sy
   d4e24:	e850 6f00 	ldrex	r6, [r0]
   d4e28:	e840 3200 	strex	r2, r3, [r0]
   d4e2c:	2a00      	cmp	r2, #0
   d4e2e:	d1f9      	bne.n	d4e24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e30:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e34:	2e00      	cmp	r6, #0
   d4e36:	d03f      	beq.n	d4eb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e38:	4618      	mov	r0, r3
   d4e3a:	f7ff fc1d 	bl	d4678 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e3e:	4607      	mov	r7, r0
   d4e40:	b120      	cbz	r0, d4e4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e42:	4621      	mov	r1, r4
   d4e44:	4630      	mov	r0, r6
   d4e46:	f7ff fe53 	bl	d4af0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e4a:	e02e      	b.n	d4eaa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e4c:	4631      	mov	r1, r6
   d4e4e:	a801      	add	r0, sp, #4
   d4e50:	f7ff ffaf 	bl	d4db2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e54:	7823      	ldrb	r3, [r4, #0]
   d4e56:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e5a:	2010      	movs	r0, #16
   d4e5c:	f7ff f91b 	bl	d4096 <_Znwj>
   d4e60:	4605      	mov	r5, r0
   d4e62:	b1d0      	cbz	r0, d4e9a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e64:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e66:	2014      	movs	r0, #20
   d4e68:	f7ff f915 	bl	d4096 <_Znwj>
   d4e6c:	4604      	mov	r4, r0
   d4e6e:	b178      	cbz	r0, d4e90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e70:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e72:	4601      	mov	r1, r0
   d4e74:	a801      	add	r0, sp, #4
   d4e76:	f7ff fe06 	bl	d4a86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e7e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e82:	9203      	str	r2, [sp, #12]
   d4e84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e86:	60e3      	str	r3, [r4, #12]
   d4e88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e8c:	9204      	str	r2, [sp, #16]
   d4e8e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e90:	4b0a      	ldr	r3, [pc, #40]	; (d4ebc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4e92:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e94:	4b0a      	ldr	r3, [pc, #40]	; (d4ec0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e96:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e98:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e9a:	a801      	add	r0, sp, #4
   d4e9c:	f7ff fd55 	bl	d494a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ea0:	2200      	movs	r2, #0
   d4ea2:	4629      	mov	r1, r5
   d4ea4:	4807      	ldr	r0, [pc, #28]	; (d4ec4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4ea6:	f7ff fbef 	bl	d4688 <application_thread_invoke>
   d4eaa:	4630      	mov	r0, r6
   d4eac:	f7ff fd4d 	bl	d494a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4eb0:	2110      	movs	r1, #16
   d4eb2:	4630      	mov	r0, r6
   d4eb4:	f000 fd0d 	bl	d58d2 <_ZdlPvj>
        }
    }
   d4eb8:	b007      	add	sp, #28
   d4eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ebc:	000d4b03 	.word	0x000d4b03
   d4ec0:	000d4dd1 	.word	0x000d4dd1
   d4ec4:	000d4831 	.word	0x000d4831

000d4ec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4ec8:	b530      	push	{r4, r5, lr}
   d4eca:	b085      	sub	sp, #20
   d4ecc:	4604      	mov	r4, r0
   d4ece:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4ed0:	4668      	mov	r0, sp
   d4ed2:	4611      	mov	r1, r2
   d4ed4:	f7ff fdb9 	bl	d4a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4ed8:	b17c      	cbz	r4, d4efa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4eda:	b224      	sxth	r4, r4
   d4edc:	4628      	mov	r0, r5
   d4ede:	b10d      	cbz	r5, d4ee4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4ee0:	f000 fea0 	bl	d5c24 <strdup>
   d4ee4:	9002      	str	r0, [sp, #8]
   d4ee6:	a902      	add	r1, sp, #8
   d4ee8:	4668      	mov	r0, sp
   d4eea:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4eee:	f7ff fe1f 	bl	d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ef2:	a802      	add	r0, sp, #8
   d4ef4:	f7ff fd41 	bl	d497a <_ZN8particle5ErrorD1Ev>
   d4ef8:	e01d      	b.n	d4f36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4efa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4efc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f00:	f04f 0201 	mov.w	r2, #1
   d4f04:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4f08:	42a3      	cmp	r3, r4
   d4f0a:	d103      	bne.n	d4f14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4f0c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4f10:	2900      	cmp	r1, #0
   d4f12:	d1f7      	bne.n	d4f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4f14:	d002      	beq.n	d4f1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4f16:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f1a:	e00c      	b.n	d4f36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f1c:	f110 010c 	adds.w	r1, r0, #12
   d4f20:	f04f 0301 	mov.w	r3, #1
   d4f24:	bf18      	it	ne
   d4f26:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f28:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f2c:	3004      	adds	r0, #4
   d4f2e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f32:	f7ff ff71 	bl	d4e18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f36:	a801      	add	r0, sp, #4
   d4f38:	f7ff f958 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f3c:	b005      	add	sp, #20
   d4f3e:	bd30      	pop	{r4, r5, pc}

000d4f40 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f40:	2200      	movs	r2, #0
   d4f42:	4611      	mov	r1, r2
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	f7ff bc33 	b.w	d47b0 <network_listening>

000d4f4a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	4611      	mov	r1, r2
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	f7ff bc3e 	b.w	d47d0 <network_get_listen_timeout>

000d4f54 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f54:	2200      	movs	r2, #0
   d4f56:	6840      	ldr	r0, [r0, #4]
   d4f58:	f7ff bc32 	b.w	d47c0 <network_set_listen_timeout>

000d4f5c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f5c:	2200      	movs	r2, #0
   d4f5e:	f081 0101 	eor.w	r1, r1, #1
   d4f62:	6840      	ldr	r0, [r0, #4]
   d4f64:	f7ff bc1c 	b.w	d47a0 <network_listen>

000d4f68 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f68:	2300      	movs	r3, #0
   d4f6a:	461a      	mov	r2, r3
   d4f6c:	4619      	mov	r1, r3
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	f7ff bc0e 	b.w	d4790 <network_off>

000d4f74 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f74:	2300      	movs	r3, #0
   d4f76:	461a      	mov	r2, r3
   d4f78:	4619      	mov	r1, r3
   d4f7a:	6840      	ldr	r0, [r0, #4]
   d4f7c:	f7ff bc00 	b.w	d4780 <network_on>

000d4f80 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f80:	2200      	movs	r2, #0
   d4f82:	4611      	mov	r1, r2
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	f7ff bbf3 	b.w	d4770 <network_ready>

000d4f8a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f8a:	2200      	movs	r2, #0
   d4f8c:	4611      	mov	r1, r2
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	f7ff bbde 	b.w	d4750 <network_connecting>

000d4f94 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f94:	2200      	movs	r2, #0
   d4f96:	2102      	movs	r1, #2
   d4f98:	6840      	ldr	r0, [r0, #4]
   d4f9a:	f7ff bbe1 	b.w	d4760 <network_disconnect>

000d4f9e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f9e:	2300      	movs	r3, #0
   d4fa0:	461a      	mov	r2, r3
   d4fa2:	6840      	ldr	r0, [r0, #4]
   d4fa4:	f7ff bbcc 	b.w	d4740 <network_connect>

000d4fa8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4fa8:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4faa:	2203      	movs	r2, #3
   d4fac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4fae:	4a02      	ldr	r2, [pc, #8]	; (d4fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4fb0:	601a      	str	r2, [r3, #0]
   d4fb2:	4770      	bx	lr
   d4fb4:	2003e404 	.word	0x2003e404
   d4fb8:	000d5e40 	.word	0x000d5e40

000d4fbc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fbc:	4770      	bx	lr

000d4fbe <_ZN9IPAddressD0Ev>:
   d4fbe:	b510      	push	{r4, lr}
   d4fc0:	2118      	movs	r1, #24
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	f000 fc85 	bl	d58d2 <_ZdlPvj>
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fce:	7d03      	ldrb	r3, [r0, #20]
   d4fd0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fd2:	b08d      	sub	sp, #52	; 0x34
   d4fd4:	460e      	mov	r6, r1
   d4fd6:	f100 0704 	add.w	r7, r0, #4
   d4fda:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fde:	d002      	beq.n	d4fe6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fe0:	f100 0508 	add.w	r5, r0, #8
   d4fe4:	e018      	b.n	d5018 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fe6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fe8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fea:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fee:	232f      	movs	r3, #47	; 0x2f
   d4ff0:	462a      	mov	r2, r5
   d4ff2:	200a      	movs	r0, #10
   d4ff4:	f7ff fab0 	bl	d4558 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	f000 fe2e 	bl	d5c5a <strlen>
   d4ffe:	6833      	ldr	r3, [r6, #0]
   d5000:	4602      	mov	r2, r0
   d5002:	68db      	ldr	r3, [r3, #12]
   d5004:	4629      	mov	r1, r5
   d5006:	4630      	mov	r0, r6
   d5008:	4798      	blx	r3
   d500a:	e00f      	b.n	d502c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d500c:	b124      	cbz	r4, d5018 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d500e:	212e      	movs	r1, #46	; 0x2e
   d5010:	4630      	mov	r0, r6
   d5012:	f000 f9d5 	bl	d53c0 <_ZN5Print5printEc>
   d5016:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5018:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d501c:	220a      	movs	r2, #10
   d501e:	4630      	mov	r0, r6
   d5020:	f000 f9d1 	bl	d53c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5024:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5026:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5028:	d1f0      	bne.n	d500c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d502a:	4620      	mov	r0, r4
    }
    return n;
}
   d502c:	b00d      	add	sp, #52	; 0x34
   d502e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5030 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5030:	b510      	push	{r4, lr}
   d5032:	4b05      	ldr	r3, [pc, #20]	; (d5048 <_ZN9IPAddressC1Ev+0x18>)
   d5034:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5036:	2211      	movs	r2, #17
   d5038:	f840 3b04 	str.w	r3, [r0], #4
   d503c:	2100      	movs	r1, #0
   d503e:	f000 fdae 	bl	d5b9e <memset>
{
    clear();
}
   d5042:	4620      	mov	r0, r4
   d5044:	bd10      	pop	{r4, pc}
   d5046:	bf00      	nop
   d5048:	000d5e74 	.word	0x000d5e74

000d504c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d504c:	4603      	mov	r3, r0
   d504e:	4a07      	ldr	r2, [pc, #28]	; (d506c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5050:	b510      	push	{r4, lr}
   d5052:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5056:	f101 0210 	add.w	r2, r1, #16
   d505a:	f851 4b04 	ldr.w	r4, [r1], #4
   d505e:	f843 4b04 	str.w	r4, [r3], #4
   d5062:	4291      	cmp	r1, r2
   d5064:	d1f9      	bne.n	d505a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5066:	780a      	ldrb	r2, [r1, #0]
   d5068:	701a      	strb	r2, [r3, #0]
}
   d506a:	bd10      	pop	{r4, pc}
   d506c:	000d5e74 	.word	0x000d5e74

000d5070 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5070:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5072:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5076:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d507a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d507e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5082:	2304      	movs	r3, #4
   d5084:	6041      	str	r1, [r0, #4]
   d5086:	7503      	strb	r3, [r0, #20]
   d5088:	bd10      	pop	{r4, pc}

000d508a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d508a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d508c:	780d      	ldrb	r5, [r1, #0]
   d508e:	788b      	ldrb	r3, [r1, #2]
   d5090:	784a      	ldrb	r2, [r1, #1]
   d5092:	78c9      	ldrb	r1, [r1, #3]
   d5094:	9100      	str	r1, [sp, #0]
   d5096:	4629      	mov	r1, r5
   d5098:	f7ff ffea 	bl	d5070 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d509c:	b003      	add	sp, #12
   d509e:	bd30      	pop	{r4, r5, pc}

000d50a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50a0:	4b01      	ldr	r3, [pc, #4]	; (d50a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50a2:	4a02      	ldr	r2, [pc, #8]	; (d50ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50a4:	601a      	str	r2, [r3, #0]
   d50a6:	4770      	bx	lr
   d50a8:	2003e40c 	.word	0x2003e40c
   d50ac:	000d5ef3 	.word	0x000d5ef3

000d50b0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50b0:	2200      	movs	r2, #0
   d50b2:	4611      	mov	r1, r2
   d50b4:	6840      	ldr	r0, [r0, #4]
   d50b6:	f7ff bb7b 	b.w	d47b0 <network_listening>

000d50ba <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50ba:	2200      	movs	r2, #0
   d50bc:	4611      	mov	r1, r2
   d50be:	6840      	ldr	r0, [r0, #4]
   d50c0:	f7ff bb86 	b.w	d47d0 <network_get_listen_timeout>

000d50c4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50c4:	2200      	movs	r2, #0
   d50c6:	6840      	ldr	r0, [r0, #4]
   d50c8:	f7ff bb7a 	b.w	d47c0 <network_set_listen_timeout>

000d50cc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50cc:	2200      	movs	r2, #0
   d50ce:	f081 0101 	eor.w	r1, r1, #1
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff bb64 	b.w	d47a0 <network_listen>

000d50d8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d50d8:	2300      	movs	r3, #0
   d50da:	461a      	mov	r2, r3
   d50dc:	2101      	movs	r1, #1
   d50de:	6840      	ldr	r0, [r0, #4]
   d50e0:	f7ff bb56 	b.w	d4790 <network_off>

000d50e4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50e4:	2300      	movs	r3, #0
   d50e6:	461a      	mov	r2, r3
   d50e8:	4619      	mov	r1, r3
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	f7ff bb48 	b.w	d4780 <network_on>

000d50f0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50f0:	2200      	movs	r2, #0
   d50f2:	4611      	mov	r1, r2
   d50f4:	6840      	ldr	r0, [r0, #4]
   d50f6:	f7ff bb3b 	b.w	d4770 <network_ready>

000d50fa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50fa:	2200      	movs	r2, #0
   d50fc:	4611      	mov	r1, r2
   d50fe:	6840      	ldr	r0, [r0, #4]
   d5100:	f7ff bb26 	b.w	d4750 <network_connecting>

000d5104 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5104:	2200      	movs	r2, #0
   d5106:	2102      	movs	r1, #2
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	f7ff bb29 	b.w	d4760 <network_disconnect>

000d510e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d510e:	2300      	movs	r3, #0
   d5110:	461a      	mov	r2, r3
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff bb14 	b.w	d4740 <network_connect>

000d5118 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5118:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d511a:	4605      	mov	r5, r0
   d511c:	b188      	cbz	r0, d5142 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d511e:	6804      	ldr	r4, [r0, #0]
   d5120:	b14c      	cbz	r4, d5136 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5122:	68a3      	ldr	r3, [r4, #8]
   d5124:	b11b      	cbz	r3, d512e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5126:	2203      	movs	r2, #3
   d5128:	4621      	mov	r1, r4
   d512a:	4620      	mov	r0, r4
   d512c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d512e:	2110      	movs	r1, #16
   d5130:	4620      	mov	r0, r4
   d5132:	f000 fbce 	bl	d58d2 <_ZdlPvj>
   d5136:	4628      	mov	r0, r5
   d5138:	2114      	movs	r1, #20
      }
   d513a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d513e:	f000 bbc8 	b.w	d58d2 <_ZdlPvj>
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5144:	b110      	cbz	r0, d514c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5146:	6803      	ldr	r3, [r0, #0]
   d5148:	685b      	ldr	r3, [r3, #4]
   d514a:	4718      	bx	r3
   d514c:	4770      	bx	lr

000d514e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d514e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5150:	6803      	ldr	r3, [r0, #0]
   d5152:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5154:	b1bb      	cbz	r3, d5186 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5156:	6858      	ldr	r0, [r3, #4]
   d5158:	f7ff f9b6 	bl	d44c8 <os_thread_is_current>
   d515c:	b978      	cbnz	r0, d517e <_ZN6ThreadD1Ev+0x30>
   d515e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5160:	7c5a      	ldrb	r2, [r3, #17]
   d5162:	b912      	cbnz	r2, d516a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5164:	6858      	ldr	r0, [r3, #4]
   d5166:	f7ff f9b7 	bl	d44d8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d516a:	6823      	ldr	r3, [r4, #0]
   d516c:	6858      	ldr	r0, [r3, #4]
   d516e:	f7ff f9bb 	bl	d44e8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5172:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5174:	2300      	movs	r3, #0
   d5176:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5178:	b128      	cbz	r0, d5186 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d517a:	f7ff ffcd 	bl	d5118 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d517e:	6820      	ldr	r0, [r4, #0]
   d5180:	b108      	cbz	r0, d5186 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5182:	f7ff ffc9 	bl	d5118 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5186:	4620      	mov	r0, r4
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d518a:	b538      	push	{r3, r4, r5, lr}
   d518c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d518e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5192:	b108      	cbz	r0, d5198 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5194:	f7fe ff83 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5198:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d519c:	b108      	cbz	r0, d51a2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d519e:	f7ff f9b3 	bl	d4508 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51a2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d51a6:	b135      	cbz	r5, d51b6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51a8:	4628      	mov	r0, r5
   d51aa:	f7ff ffd0 	bl	d514e <_ZN6ThreadD1Ev>
   d51ae:	2104      	movs	r1, #4
   d51b0:	4628      	mov	r0, r5
   d51b2:	f000 fb8e 	bl	d58d2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51b6:	6820      	ldr	r0, [r4, #0]
   d51b8:	b108      	cbz	r0, d51be <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d51ba:	f7ff ffc3 	bl	d5144 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d51be:	4620      	mov	r0, r4
   d51c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51c4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4b04      	ldr	r3, [pc, #16]	; (d51d8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d51c8:	4604      	mov	r4, r0
   d51ca:	f840 3b08 	str.w	r3, [r0], #8
   d51ce:	f7ff ffdc 	bl	d518a <_ZN5spark11MeshPublishD1Ev>
   d51d2:	4620      	mov	r0, r4
   d51d4:	bd10      	pop	{r4, pc}
   d51d6:	bf00      	nop
   d51d8:	000d5f68 	.word	0x000d5f68

000d51dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d51dc:	b538      	push	{r3, r4, r5, lr}
   d51de:	4c0e      	ldr	r4, [pc, #56]	; (d5218 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d51e0:	4b0e      	ldr	r3, [pc, #56]	; (d521c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d51e2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d51e4:	2500      	movs	r5, #0
   d51e6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d51e8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d51ec:	6063      	str	r3, [r4, #4]
   d51ee:	60a5      	str	r5, [r4, #8]
   d51f0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51f4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d51f8:	f7ff f97e 	bl	d44f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d51fc:	4b08      	ldr	r3, [pc, #32]	; (d5220 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d51fe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5202:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5206:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5208:	4620      	mov	r0, r4
   d520a:	4a06      	ldr	r2, [pc, #24]	; (d5224 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d520c:	4906      	ldr	r1, [pc, #24]	; (d5228 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5212:	f000 bb59 	b.w	d58c8 <__aeabi_atexit>
   d5216:	bf00      	nop
   d5218:	2003e410 	.word	0x2003e410
   d521c:	000d5f9c 	.word	0x000d5f9c
   d5220:	000d5f68 	.word	0x000d5f68
   d5224:	2003e3b8 	.word	0x2003e3b8
   d5228:	000d51c5 	.word	0x000d51c5

000d522c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d522c:	2300      	movs	r3, #0
   d522e:	461a      	mov	r2, r3
   d5230:	6840      	ldr	r0, [r0, #4]
   d5232:	f7ff ba85 	b.w	d4740 <network_connect>

000d5236 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5236:	2200      	movs	r2, #0
   d5238:	2102      	movs	r1, #2
   d523a:	6840      	ldr	r0, [r0, #4]
   d523c:	f7ff ba90 	b.w	d4760 <network_disconnect>

000d5240 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5240:	2200      	movs	r2, #0
   d5242:	4611      	mov	r1, r2
   d5244:	6840      	ldr	r0, [r0, #4]
   d5246:	f7ff ba83 	b.w	d4750 <network_connecting>

000d524a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d524a:	2200      	movs	r2, #0
   d524c:	4611      	mov	r1, r2
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	f7ff ba8e 	b.w	d4770 <network_ready>

000d5254 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5254:	2300      	movs	r3, #0
   d5256:	461a      	mov	r2, r3
   d5258:	4619      	mov	r1, r3
   d525a:	6840      	ldr	r0, [r0, #4]
   d525c:	f7ff ba90 	b.w	d4780 <network_on>

000d5260 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5260:	2300      	movs	r3, #0
   d5262:	461a      	mov	r2, r3
   d5264:	4619      	mov	r1, r3
   d5266:	6840      	ldr	r0, [r0, #4]
   d5268:	f7ff ba92 	b.w	d4790 <network_off>

000d526c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d526c:	2200      	movs	r2, #0
   d526e:	f081 0101 	eor.w	r1, r1, #1
   d5272:	6840      	ldr	r0, [r0, #4]
   d5274:	f7ff ba94 	b.w	d47a0 <network_listen>

000d5278 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5278:	2200      	movs	r2, #0
   d527a:	6840      	ldr	r0, [r0, #4]
   d527c:	f7ff baa0 	b.w	d47c0 <network_set_listen_timeout>

000d5280 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5280:	2200      	movs	r2, #0
   d5282:	4611      	mov	r1, r2
   d5284:	6840      	ldr	r0, [r0, #4]
   d5286:	f7ff baa3 	b.w	d47d0 <network_get_listen_timeout>

000d528a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d528a:	2200      	movs	r2, #0
   d528c:	4611      	mov	r1, r2
   d528e:	6840      	ldr	r0, [r0, #4]
   d5290:	f7ff ba8e 	b.w	d47b0 <network_listening>

000d5294 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5298:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d529a:	b095      	sub	sp, #84	; 0x54
   d529c:	4616      	mov	r6, r2
   d529e:	460d      	mov	r5, r1
   d52a0:	4607      	mov	r7, r0
    IPAddress addr;
   d52a2:	f7ff fec5 	bl	d5030 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52a6:	4621      	mov	r1, r4
   d52a8:	2220      	movs	r2, #32
   d52aa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52ac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52ae:	f000 fc76 	bl	d5b9e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52b2:	2340      	movs	r3, #64	; 0x40
   d52b4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52b6:	4621      	mov	r1, r4
   d52b8:	466b      	mov	r3, sp
   d52ba:	aa0c      	add	r2, sp, #48	; 0x30
   d52bc:	4630      	mov	r0, r6
   d52be:	f7ff f95b 	bl	d4578 <netdb_getaddrinfo>
    if (!r) {
   d52c2:	4604      	mov	r4, r0
   d52c4:	2800      	cmp	r0, #0
   d52c6:	d144      	bne.n	d5352 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52c8:	4602      	mov	r2, r0
   d52ca:	2101      	movs	r1, #1
   d52cc:	6868      	ldr	r0, [r5, #4]
   d52ce:	f7ff fa4f 	bl	d4770 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52d2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52d4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52d6:	4622      	mov	r2, r4
   d52d8:	6868      	ldr	r0, [r5, #4]
   d52da:	f7ff fa49 	bl	d4770 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52de:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52e0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d52e2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52e4:	2e00      	cmp	r6, #0
   d52e6:	d034      	beq.n	d5352 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d52e8:	2900      	cmp	r1, #0
   d52ea:	d132      	bne.n	d5352 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d52ec:	6873      	ldr	r3, [r6, #4]
   d52ee:	2b02      	cmp	r3, #2
   d52f0:	d002      	beq.n	d52f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d52f2:	2b0a      	cmp	r3, #10
   d52f4:	d009      	beq.n	d530a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d52f6:	e02a      	b.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d52f8:	f1b8 0f00 	cmp.w	r8, #0
   d52fc:	d027      	beq.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d52fe:	6971      	ldr	r1, [r6, #20]
   d5300:	4638      	mov	r0, r7
   d5302:	3104      	adds	r1, #4
   d5304:	f7ff fec1 	bl	d508a <_ZN9IPAddressaSEPKh>
   d5308:	e020      	b.n	d534c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d530a:	f1b9 0f00 	cmp.w	r9, #0
   d530e:	d01e      	beq.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5310:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5312:	2211      	movs	r2, #17
   d5314:	a801      	add	r0, sp, #4
   d5316:	f000 fc42 	bl	d5b9e <memset>
                    a.v = 6;
   d531a:	2306      	movs	r3, #6
   d531c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5320:	ad01      	add	r5, sp, #4
   d5322:	f104 0308 	add.w	r3, r4, #8
   d5326:	3418      	adds	r4, #24
   d5328:	6818      	ldr	r0, [r3, #0]
   d532a:	6859      	ldr	r1, [r3, #4]
   d532c:	462a      	mov	r2, r5
   d532e:	c203      	stmia	r2!, {r0, r1}
   d5330:	3308      	adds	r3, #8
   d5332:	42a3      	cmp	r3, r4
   d5334:	4615      	mov	r5, r2
   d5336:	d1f7      	bne.n	d5328 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5338:	a901      	add	r1, sp, #4
   d533a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d533c:	ad07      	add	r5, sp, #28
   d533e:	f7ff fe85 	bl	d504c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5344:	1d3c      	adds	r4, r7, #4
   d5346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5348:	682b      	ldr	r3, [r5, #0]
   d534a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d534c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d534e:	69f6      	ldr	r6, [r6, #28]
   d5350:	e7c8      	b.n	d52e4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5352:	9800      	ldr	r0, [sp, #0]
   d5354:	f7ff f908 	bl	d4568 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5358:	4638      	mov	r0, r7
   d535a:	b015      	add	sp, #84	; 0x54
   d535c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5360 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5360:	4b02      	ldr	r3, [pc, #8]	; (d536c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5362:	4a03      	ldr	r2, [pc, #12]	; (d5370 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5364:	601a      	str	r2, [r3, #0]
   d5366:	2200      	movs	r2, #0
   d5368:	605a      	str	r2, [r3, #4]
   d536a:	4770      	bx	lr
   d536c:	2003e5e4 	.word	0x2003e5e4
   d5370:	000d5f9c 	.word	0x000d5f9c

000d5374 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5376:	4606      	mov	r6, r0
   d5378:	460d      	mov	r5, r1
   d537a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d537c:	2400      	movs	r4, #0
  while (size--) {
   d537e:	42bd      	cmp	r5, r7
   d5380:	d00c      	beq.n	d539c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5382:	6833      	ldr	r3, [r6, #0]
   d5384:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5388:	689b      	ldr	r3, [r3, #8]
   d538a:	4630      	mov	r0, r6
   d538c:	4798      	blx	r3
     if (chunk>=0)
   d538e:	2800      	cmp	r0, #0
   d5390:	db01      	blt.n	d5396 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5392:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5394:	e7f3      	b.n	d537e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5396:	2c00      	cmp	r4, #0
   d5398:	bf08      	it	eq
   d539a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d539c:	4620      	mov	r0, r4
   d539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53a0:	b570      	push	{r4, r5, r6, lr}
   d53a2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53a4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53a6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53a8:	b149      	cbz	r1, d53be <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53aa:	f000 fc56 	bl	d5c5a <strlen>
   d53ae:	682b      	ldr	r3, [r5, #0]
   d53b0:	4602      	mov	r2, r0
   d53b2:	4621      	mov	r1, r4
   d53b4:	4628      	mov	r0, r5
   d53b6:	68db      	ldr	r3, [r3, #12]
    }
   d53b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53bc:	4718      	bx	r3
    }
   d53be:	bd70      	pop	{r4, r5, r6, pc}

000d53c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53c0:	6803      	ldr	r3, [r0, #0]
   d53c2:	689b      	ldr	r3, [r3, #8]
   d53c4:	4718      	bx	r3

000d53c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53c6:	b530      	push	{r4, r5, lr}
   d53c8:	b08b      	sub	sp, #44	; 0x2c
   d53ca:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53cc:	2100      	movs	r1, #0
   d53ce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53d2:	2a01      	cmp	r2, #1
   d53d4:	bf98      	it	ls
   d53d6:	220a      	movls	r2, #10
   d53d8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d53dc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d53e0:	fb05 3312 	mls	r3, r5, r2, r3
   d53e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53e8:	2b09      	cmp	r3, #9
   d53ea:	bf94      	ite	ls
   d53ec:	3330      	addls	r3, #48	; 0x30
   d53ee:	3337      	addhi	r3, #55	; 0x37
   d53f0:	b2db      	uxtb	r3, r3
   d53f2:	4621      	mov	r1, r4
   d53f4:	f804 3901 	strb.w	r3, [r4], #-1
   d53f8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53fa:	2d00      	cmp	r5, #0
   d53fc:	d1ee      	bne.n	d53dc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53fe:	f7ff ffcf 	bl	d53a0 <_ZN5Print5writeEPKc>
}
   d5402:	b00b      	add	sp, #44	; 0x2c
   d5404:	bd30      	pop	{r4, r5, pc}

000d5406 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5406:	b510      	push	{r4, lr}
   d5408:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d540a:	f7ff fa9e 	bl	d494a <_ZNSt14_Function_baseD1Ev>
   d540e:	4620      	mov	r0, r4
   d5410:	bd10      	pop	{r4, pc}
	...

000d5414 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5414:	4803      	ldr	r0, [pc, #12]	; (d5424 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5416:	4a04      	ldr	r2, [pc, #16]	; (d5428 <_GLOBAL__sub_I_RGB+0x14>)
   d5418:	4904      	ldr	r1, [pc, #16]	; (d542c <_GLOBAL__sub_I_RGB+0x18>)
   d541a:	2300      	movs	r3, #0
   d541c:	6083      	str	r3, [r0, #8]
   d541e:	f000 ba53 	b.w	d58c8 <__aeabi_atexit>
   d5422:	bf00      	nop
   d5424:	2003e5ec 	.word	0x2003e5ec
   d5428:	2003e3b8 	.word	0x2003e3b8
   d542c:	000d5407 	.word	0x000d5407

000d5430 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5430:	b510      	push	{r4, lr}
   d5432:	4604      	mov	r4, r0
{
	free(buffer);
   d5434:	6800      	ldr	r0, [r0, #0]
   d5436:	f7ff f9db 	bl	d47f0 <free>
}
   d543a:	4620      	mov	r0, r4
   d543c:	bd10      	pop	{r4, pc}

000d543e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d543e:	b510      	push	{r4, lr}
   d5440:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5442:	6800      	ldr	r0, [r0, #0]
   d5444:	b108      	cbz	r0, d544a <_ZN6String10invalidateEv+0xc>
   d5446:	f7ff f9d3 	bl	d47f0 <free>
	buffer = NULL;
   d544a:	2300      	movs	r3, #0
   d544c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d544e:	60a3      	str	r3, [r4, #8]
   d5450:	6063      	str	r3, [r4, #4]
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5454:	b538      	push	{r3, r4, r5, lr}
   d5456:	4604      	mov	r4, r0
   d5458:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d545a:	6800      	ldr	r0, [r0, #0]
   d545c:	3101      	adds	r1, #1
   d545e:	f7ff f9cf 	bl	d4800 <realloc>
	if (newbuffer) {
   d5462:	b110      	cbz	r0, d546a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5464:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5468:	2001      	movs	r0, #1
	}
	return 0;
}
   d546a:	bd38      	pop	{r3, r4, r5, pc}

000d546c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d546c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d546e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5470:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5472:	b113      	cbz	r3, d547a <_ZN6String7reserveEj+0xe>
   d5474:	6843      	ldr	r3, [r0, #4]
   d5476:	428b      	cmp	r3, r1
   d5478:	d207      	bcs.n	d548a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d547a:	4620      	mov	r0, r4
   d547c:	f7ff ffea 	bl	d5454 <_ZN6String12changeBufferEj>
   d5480:	b120      	cbz	r0, d548c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5482:	68a3      	ldr	r3, [r4, #8]
   d5484:	b90b      	cbnz	r3, d548a <_ZN6String7reserveEj+0x1e>
   d5486:	6822      	ldr	r2, [r4, #0]
   d5488:	7013      	strb	r3, [r2, #0]
   d548a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d548c:	bd10      	pop	{r4, pc}

000d548e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d548e:	b570      	push	{r4, r5, r6, lr}
   d5490:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5492:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5494:	4604      	mov	r4, r0
   d5496:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5498:	f7ff ffe8 	bl	d546c <_ZN6String7reserveEj>
   d549c:	b918      	cbnz	r0, d54a6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d549e:	4620      	mov	r0, r4
   d54a0:	f7ff ffcd 	bl	d543e <_ZN6String10invalidateEv>
		return *this;
   d54a4:	e009      	b.n	d54ba <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54a6:	462a      	mov	r2, r5
   d54a8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54aa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54ac:	6820      	ldr	r0, [r4, #0]
   d54ae:	f000 fb6b 	bl	d5b88 <memcpy>
	buffer[len] = 0;
   d54b2:	6822      	ldr	r2, [r4, #0]
   d54b4:	68a3      	ldr	r3, [r4, #8]
   d54b6:	2100      	movs	r1, #0
   d54b8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d54ba:	4620      	mov	r0, r4
   d54bc:	bd70      	pop	{r4, r5, r6, pc}

000d54be <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54be:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54c0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54c2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54c4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54c6:	6043      	str	r3, [r0, #4]
	len = 0;
   d54c8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54ca:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d54cc:	460d      	mov	r5, r1
   d54ce:	b139      	cbz	r1, d54e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d54d0:	4608      	mov	r0, r1
   d54d2:	f000 fbc2 	bl	d5c5a <strlen>
   d54d6:	4629      	mov	r1, r5
   d54d8:	4602      	mov	r2, r0
   d54da:	4620      	mov	r0, r4
   d54dc:	f7ff ffd7 	bl	d548e <_ZN6String4copyEPKcj>
}
   d54e0:	4620      	mov	r0, r4
   d54e2:	bd38      	pop	{r3, r4, r5, pc}

000d54e4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d54e4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d54e6:	b510      	push	{r4, lr}
   d54e8:	460b      	mov	r3, r1
   d54ea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d54ec:	d007      	beq.n	d54fe <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d54ee:	6809      	ldr	r1, [r1, #0]
   d54f0:	b119      	cbz	r1, d54fa <_ZN6StringaSERKS_+0x16>
   d54f2:	689a      	ldr	r2, [r3, #8]
   d54f4:	f7ff ffcb 	bl	d548e <_ZN6String4copyEPKcj>
   d54f8:	e001      	b.n	d54fe <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d54fa:	f7ff ffa0 	bl	d543e <_ZN6String10invalidateEv>

	return *this;
}
   d54fe:	4620      	mov	r0, r4
   d5500:	bd10      	pop	{r4, pc}

000d5502 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5502:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5504:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5506:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5508:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d550a:	6043      	str	r3, [r0, #4]
	len = 0;
   d550c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d550e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5510:	f7ff ffe8 	bl	d54e4 <_ZN6StringaSERKS_>
}
   d5514:	4620      	mov	r0, r4
   d5516:	bd10      	pop	{r4, pc}

000d5518 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5518:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d551a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d551c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d551e:	b912      	cbnz	r2, d5526 <_ZNK6String6equalsEPKc+0xe>
   d5520:	b919      	cbnz	r1, d552a <_ZNK6String6equalsEPKc+0x12>
   d5522:	2001      	movs	r0, #1
   d5524:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5526:	b911      	cbnz	r1, d552e <_ZNK6String6equalsEPKc+0x16>
   d5528:	6803      	ldr	r3, [r0, #0]
   d552a:	7818      	ldrb	r0, [r3, #0]
   d552c:	e002      	b.n	d5534 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d552e:	6800      	ldr	r0, [r0, #0]
   d5530:	f000 fb66 	bl	d5c00 <strcmp>
   d5534:	fab0 f080 	clz	r0, r0
   d5538:	0940      	lsrs	r0, r0, #5
}
   d553a:	bd08      	pop	{r3, pc}

000d553c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d553c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d553e:	4c09      	ldr	r4, [pc, #36]	; (d5564 <_GLOBAL__sub_I_System+0x28>)
   d5540:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5542:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5546:	6020      	str	r0, [r4, #0]
   d5548:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d554a:	71a0      	strb	r0, [r4, #6]
   d554c:	8120      	strh	r0, [r4, #8]
   d554e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5550:	f7ff f882 	bl	d4658 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5554:	4620      	mov	r0, r4
   d5556:	4a04      	ldr	r2, [pc, #16]	; (d5568 <_GLOBAL__sub_I_System+0x2c>)
   d5558:	4904      	ldr	r1, [pc, #16]	; (d556c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d555e:	f000 b9b3 	b.w	d58c8 <__aeabi_atexit>
   d5562:	bf00      	nop
   d5564:	2003e5fc 	.word	0x2003e5fc
   d5568:	2003e3b8 	.word	0x2003e3b8
   d556c:	000d40b3 	.word	0x000d40b3

000d5570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5570:	4b02      	ldr	r3, [pc, #8]	; (d557c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5572:	681a      	ldr	r2, [r3, #0]
   d5574:	4b02      	ldr	r3, [pc, #8]	; (d5580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5576:	601a      	str	r2, [r3, #0]
   d5578:	4770      	bx	lr
   d557a:	bf00      	nop
   d557c:	2003e350 	.word	0x2003e350
   d5580:	2003e608 	.word	0x2003e608

000d5584 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5584:	4770      	bx	lr

000d5586 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5586:	7441      	strb	r1, [r0, #17]
   d5588:	4770      	bx	lr

000d558a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d558a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d558c:	7c00      	ldrb	r0, [r0, #16]
   d558e:	f7ff f82b 	bl	d45e8 <HAL_USART_Available_Data_For_Write>
}
   d5592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5596:	bd08      	pop	{r3, pc}

000d5598 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5598:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d559a:	7c00      	ldrb	r0, [r0, #16]
   d559c:	f7ff f804 	bl	d45a8 <HAL_USART_Available_Data>
}
   d55a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55a4:	bd08      	pop	{r3, pc}

000d55a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55a8:	7c00      	ldrb	r0, [r0, #16]
   d55aa:	f7ff f80d 	bl	d45c8 <HAL_USART_Peek_Data>
}
   d55ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55b2:	bf28      	it	cs
   d55b4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55b8:	bd08      	pop	{r3, pc}

000d55ba <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d55ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	f7fe fffb 	bl	d45b8 <HAL_USART_Read_Data>
}
   d55c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55c6:	bf28      	it	cs
   d55c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55cc:	bd08      	pop	{r3, pc}

000d55ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d55ce:	7c00      	ldrb	r0, [r0, #16]
   d55d0:	f7ff b802 	b.w	d45d8 <HAL_USART_Flush_Data>

000d55d4 <_ZN11USARTSerialD0Ev>:
   d55d4:	b510      	push	{r4, lr}
   d55d6:	2114      	movs	r1, #20
   d55d8:	4604      	mov	r4, r0
   d55da:	f000 f97a 	bl	d58d2 <_ZdlPvj>
   d55de:	4620      	mov	r0, r4
   d55e0:	bd10      	pop	{r4, pc}

000d55e2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55e2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55e4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55e6:	4604      	mov	r4, r0
   d55e8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55ea:	b925      	cbnz	r5, d55f6 <_ZN11USARTSerial5writeEh+0x14>
   d55ec:	7c00      	ldrb	r0, [r0, #16]
   d55ee:	f7fe fffb 	bl	d45e8 <HAL_USART_Available_Data_For_Write>
   d55f2:	2800      	cmp	r0, #0
   d55f4:	dd05      	ble.n	d5602 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55f6:	4631      	mov	r1, r6
   d55f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55fe:	f7fe bfcb 	b.w	d4598 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5602:	4628      	mov	r0, r5
   d5604:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5608 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5608:	b510      	push	{r4, lr}
   d560a:	4604      	mov	r4, r0
   d560c:	4608      	mov	r0, r1
   d560e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5610:	2200      	movs	r2, #0
   d5612:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5618:	60a2      	str	r2, [r4, #8]
   d561a:	4a05      	ldr	r2, [pc, #20]	; (d5630 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d561c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d561e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5620:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5622:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5624:	461a      	mov	r2, r3
   d5626:	f7fe ffaf 	bl	d4588 <HAL_USART_Init>
}
   d562a:	4620      	mov	r0, r4
   d562c:	bd10      	pop	{r4, pc}
   d562e:	bf00      	nop
   d5630:	000d5ffc 	.word	0x000d5ffc

000d5634 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5634:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5636:	4d0c      	ldr	r5, [pc, #48]	; (d5668 <_Z22__fetch_global_Serial1v+0x34>)
   d5638:	6829      	ldr	r1, [r5, #0]
   d563a:	f011 0401 	ands.w	r4, r1, #1
   d563e:	d111      	bne.n	d5664 <_Z22__fetch_global_Serial1v+0x30>
   d5640:	4628      	mov	r0, r5
   d5642:	f7fe fd2e 	bl	d40a2 <__cxa_guard_acquire>
   d5646:	b168      	cbz	r0, d5664 <_Z22__fetch_global_Serial1v+0x30>
   d5648:	4a08      	ldr	r2, [pc, #32]	; (d566c <_Z22__fetch_global_Serial1v+0x38>)
   d564a:	4b09      	ldr	r3, [pc, #36]	; (d5670 <_Z22__fetch_global_Serial1v+0x3c>)
   d564c:	4809      	ldr	r0, [pc, #36]	; (d5674 <_Z22__fetch_global_Serial1v+0x40>)
   d564e:	4621      	mov	r1, r4
   d5650:	f7ff ffda 	bl	d5608 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5654:	4628      	mov	r0, r5
   d5656:	f7fe fd29 	bl	d40ac <__cxa_guard_release>
   d565a:	4a07      	ldr	r2, [pc, #28]	; (d5678 <_Z22__fetch_global_Serial1v+0x44>)
   d565c:	4907      	ldr	r1, [pc, #28]	; (d567c <_Z22__fetch_global_Serial1v+0x48>)
   d565e:	4805      	ldr	r0, [pc, #20]	; (d5674 <_Z22__fetch_global_Serial1v+0x40>)
   d5660:	f000 f932 	bl	d58c8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5664:	4803      	ldr	r0, [pc, #12]	; (d5674 <_Z22__fetch_global_Serial1v+0x40>)
   d5666:	bd38      	pop	{r3, r4, r5, pc}
   d5668:	2003e6a4 	.word	0x2003e6a4
   d566c:	2003e6a8 	.word	0x2003e6a8
   d5670:	2003e620 	.word	0x2003e620
   d5674:	2003e60c 	.word	0x2003e60c
   d5678:	2003e3b8 	.word	0x2003e3b8
   d567c:	000d5585 	.word	0x000d5585

000d5680 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5680:	7441      	strb	r1, [r0, #17]
   d5682:	4770      	bx	lr

000d5684 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5684:	4770      	bx	lr

000d5686 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5686:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5688:	2100      	movs	r1, #0
   d568a:	7c00      	ldrb	r0, [r0, #16]
   d568c:	f7fe ffcc 	bl	d4628 <HAL_USB_USART_Receive_Data>
}
   d5690:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5694:	bf28      	it	cs
   d5696:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d569a:	bd08      	pop	{r3, pc}

000d569c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d569c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d569e:	2101      	movs	r1, #1
   d56a0:	7c00      	ldrb	r0, [r0, #16]
   d56a2:	f7fe ffc1 	bl	d4628 <HAL_USB_USART_Receive_Data>
}
   d56a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56aa:	bf28      	it	cs
   d56ac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56b0:	bd08      	pop	{r3, pc}

000d56b2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d56b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56b4:	7c00      	ldrb	r0, [r0, #16]
   d56b6:	f7fe ffaf 	bl	d4618 <HAL_USB_USART_Available_Data_For_Write>
}
   d56ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56be:	bd08      	pop	{r3, pc}

000d56c0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d56c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56c2:	7c00      	ldrb	r0, [r0, #16]
   d56c4:	f7fe ffa0 	bl	d4608 <HAL_USB_USART_Available_Data>
}
   d56c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56cc:	bd08      	pop	{r3, pc}

000d56ce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d56ce:	7c00      	ldrb	r0, [r0, #16]
   d56d0:	f7fe bfba 	b.w	d4648 <HAL_USB_USART_Flush_Data>

000d56d4 <_ZN9USBSerialD0Ev>:
   d56d4:	b510      	push	{r4, lr}
   d56d6:	2114      	movs	r1, #20
   d56d8:	4604      	mov	r4, r0
   d56da:	f000 f8fa 	bl	d58d2 <_ZdlPvj>
   d56de:	4620      	mov	r0, r4
   d56e0:	bd10      	pop	{r4, pc}

000d56e2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56e2:	b538      	push	{r3, r4, r5, lr}
   d56e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56e6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56ea:	f7fe ff95 	bl	d4618 <HAL_USB_USART_Available_Data_For_Write>
   d56ee:	2800      	cmp	r0, #0
   d56f0:	dc01      	bgt.n	d56f6 <_ZN9USBSerial5writeEh+0x14>
   d56f2:	7c60      	ldrb	r0, [r4, #17]
   d56f4:	b128      	cbz	r0, d5702 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d56f6:	4629      	mov	r1, r5
   d56f8:	7c20      	ldrb	r0, [r4, #16]
   d56fa:	f7fe ff9d 	bl	d4638 <HAL_USB_USART_Send_Data>
   d56fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5702:	bd38      	pop	{r3, r4, r5, pc}

000d5704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5704:	b510      	push	{r4, lr}
   d5706:	4604      	mov	r4, r0
   d5708:	2300      	movs	r3, #0
   d570a:	6063      	str	r3, [r4, #4]
   d570c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5710:	60a3      	str	r3, [r4, #8]
   d5712:	4b05      	ldr	r3, [pc, #20]	; (d5728 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5714:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5716:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5718:	4608      	mov	r0, r1
{
  _serial = serial;
   d571a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d571c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d571e:	4611      	mov	r1, r2
   d5720:	f7fe ff6a 	bl	d45f8 <HAL_USB_USART_Init>
}
   d5724:	4620      	mov	r0, r4
   d5726:	bd10      	pop	{r4, pc}
   d5728:	000d602c 	.word	0x000d602c

000d572c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d572c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d572e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5730:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5732:	2100      	movs	r1, #0
   d5734:	f000 fa33 	bl	d5b9e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5738:	4620      	mov	r0, r4
   d573a:	bd10      	pop	{r4, pc}

000d573c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d573c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d573e:	4d0e      	ldr	r5, [pc, #56]	; (d5778 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5740:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5742:	a801      	add	r0, sp, #4
   d5744:	f7ff fff2 	bl	d572c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5748:	6829      	ldr	r1, [r5, #0]
   d574a:	f011 0401 	ands.w	r4, r1, #1
   d574e:	d110      	bne.n	d5772 <_Z16_fetch_usbserialv+0x36>
   d5750:	4628      	mov	r0, r5
   d5752:	f7fe fca6 	bl	d40a2 <__cxa_guard_acquire>
   d5756:	b160      	cbz	r0, d5772 <_Z16_fetch_usbserialv+0x36>
   d5758:	aa01      	add	r2, sp, #4
   d575a:	4621      	mov	r1, r4
   d575c:	4807      	ldr	r0, [pc, #28]	; (d577c <_Z16_fetch_usbserialv+0x40>)
   d575e:	f7ff ffd1 	bl	d5704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5762:	4628      	mov	r0, r5
   d5764:	f7fe fca2 	bl	d40ac <__cxa_guard_release>
   d5768:	4a05      	ldr	r2, [pc, #20]	; (d5780 <_Z16_fetch_usbserialv+0x44>)
   d576a:	4906      	ldr	r1, [pc, #24]	; (d5784 <_Z16_fetch_usbserialv+0x48>)
   d576c:	4803      	ldr	r0, [pc, #12]	; (d577c <_Z16_fetch_usbserialv+0x40>)
   d576e:	f000 f8ab 	bl	d58c8 <__aeabi_atexit>
	return _usbserial;
}
   d5772:	4802      	ldr	r0, [pc, #8]	; (d577c <_Z16_fetch_usbserialv+0x40>)
   d5774:	b007      	add	sp, #28
   d5776:	bd30      	pop	{r4, r5, pc}
   d5778:	2003e72c 	.word	0x2003e72c
   d577c:	2003e730 	.word	0x2003e730
   d5780:	2003e3b8 	.word	0x2003e3b8
   d5784:	000d5685 	.word	0x000d5685

000d5788 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5788:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d578a:	4b0c      	ldr	r3, [pc, #48]	; (d57bc <serialEventRun+0x34>)
   d578c:	b133      	cbz	r3, d579c <serialEventRun+0x14>
   d578e:	f7ff ffd5 	bl	d573c <_Z16_fetch_usbserialv>
   d5792:	6803      	ldr	r3, [r0, #0]
   d5794:	691b      	ldr	r3, [r3, #16]
   d5796:	4798      	blx	r3
   d5798:	2800      	cmp	r0, #0
   d579a:	dc09      	bgt.n	d57b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d579c:	4b08      	ldr	r3, [pc, #32]	; (d57c0 <serialEventRun+0x38>)
   d579e:	b163      	cbz	r3, d57ba <serialEventRun+0x32>
   d57a0:	f7ff ff48 	bl	d5634 <_Z22__fetch_global_Serial1v>
   d57a4:	6803      	ldr	r3, [r0, #0]
   d57a6:	691b      	ldr	r3, [r3, #16]
   d57a8:	4798      	blx	r3
   d57aa:	2800      	cmp	r0, #0
   d57ac:	dc03      	bgt.n	d57b6 <serialEventRun+0x2e>
   d57ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57b0:	f3af 8000 	nop.w
   d57b4:	e7f2      	b.n	d579c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57b6:	f3af 8000 	nop.w
   d57ba:	bd08      	pop	{r3, pc}
	...

000d57c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57c4:	b508      	push	{r3, lr}
	serialEventRun();
   d57c6:	f7ff ffdf 	bl	d5788 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57ca:	f7fe fead 	bl	d4528 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57ce:	4b01      	ldr	r3, [pc, #4]	; (d57d4 <_post_loop+0x10>)
   d57d0:	6018      	str	r0, [r3, #0]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	2003e74c 	.word	0x2003e74c

000d57d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d57d8:	4802      	ldr	r0, [pc, #8]	; (d57e4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d57da:	4a03      	ldr	r2, [pc, #12]	; (d57e8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d57dc:	4903      	ldr	r1, [pc, #12]	; (d57ec <_Z33system_initialize_user_backup_ramv+0x14>)
   d57de:	1a12      	subs	r2, r2, r0
   d57e0:	f000 b9d2 	b.w	d5b88 <memcpy>
   d57e4:	2003f400 	.word	0x2003f400
   d57e8:	2003f404 	.word	0x2003f404
   d57ec:	000d60f0 	.word	0x000d60f0

000d57f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57f2:	2300      	movs	r3, #0
   d57f4:	9300      	str	r3, [sp, #0]
   d57f6:	461a      	mov	r2, r3
   d57f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57fc:	f7fe ff56 	bl	d46ac <system_ctrl_set_result>
}
   d5800:	b003      	add	sp, #12
   d5802:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5808 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5808:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d580a:	8843      	ldrh	r3, [r0, #2]
   d580c:	2b0a      	cmp	r3, #10
   d580e:	d008      	beq.n	d5822 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5810:	2b50      	cmp	r3, #80	; 0x50
   d5812:	d109      	bne.n	d5828 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5814:	4b09      	ldr	r3, [pc, #36]	; (d583c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5816:	681b      	ldr	r3, [r3, #0]
   d5818:	b13b      	cbz	r3, d582a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d581a:	b003      	add	sp, #12
   d581c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5820:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5822:	f7ff ffe5 	bl	d57f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5826:	e006      	b.n	d5836 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5828:	2300      	movs	r3, #0
   d582a:	9300      	str	r3, [sp, #0]
   d582c:	461a      	mov	r2, r3
   d582e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5832:	f7fe ff3b 	bl	d46ac <system_ctrl_set_result>
        break;
    }
}
   d5836:	b003      	add	sp, #12
   d5838:	f85d fb04 	ldr.w	pc, [sp], #4
   d583c:	2003e744 	.word	0x2003e744

000d5840 <module_user_init_hook>:

void module_user_init_hook()
{
   d5840:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5842:	4c10      	ldr	r4, [pc, #64]	; (d5884 <module_user_init_hook+0x44>)
   d5844:	4d10      	ldr	r5, [pc, #64]	; (d5888 <module_user_init_hook+0x48>)
   d5846:	6823      	ldr	r3, [r4, #0]
   d5848:	42ab      	cmp	r3, r5
   d584a:	4b10      	ldr	r3, [pc, #64]	; (d588c <module_user_init_hook+0x4c>)
   d584c:	bf0c      	ite	eq
   d584e:	2201      	moveq	r2, #1
   d5850:	2200      	movne	r2, #0
   d5852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5854:	d002      	beq.n	d585c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5856:	f7ff ffbf 	bl	d57d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d585a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d585c:	f7fe fe5c 	bl	d4518 <HAL_RNG_GetRandomNumber>
   d5860:	4604      	mov	r4, r0
    srand(seed);
   d5862:	f000 f9a5 	bl	d5bb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5866:	4b0a      	ldr	r3, [pc, #40]	; (d5890 <module_user_init_hook+0x50>)
   d5868:	b113      	cbz	r3, d5870 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d586a:	4620      	mov	r0, r4
   d586c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5870:	2100      	movs	r1, #0
   d5872:	4807      	ldr	r0, [pc, #28]	; (d5890 <module_user_init_hook+0x50>)
   d5874:	f7fe ff5c 	bl	d4730 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5878:	2100      	movs	r1, #0
   d587a:	4806      	ldr	r0, [pc, #24]	; (d5894 <module_user_init_hook+0x54>)
}
   d587c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5880:	f7fe bf0a 	b.w	d4698 <system_ctrl_set_app_request_handler>
   d5884:	2003f400 	.word	0x2003f400
   d5888:	9a271c1e 	.word	0x9a271c1e
   d588c:	2003e748 	.word	0x2003e748
   d5890:	00000000 	.word	0x00000000
   d5894:	000d5809 	.word	0x000d5809

000d5898 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <spark_protocol_instance+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	681b      	ldr	r3, [r3, #0]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003025c 	.word	0x0003025c

000d58a8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <spark_protocol_set_product_id+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	685b      	ldr	r3, [r3, #4]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003025c 	.word	0x0003025c

000d58b8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <spark_protocol_set_product_firmware_version+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	689b      	ldr	r3, [r3, #8]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003025c 	.word	0x0003025c

000d58c8 <__aeabi_atexit>:
   d58c8:	460b      	mov	r3, r1
   d58ca:	4601      	mov	r1, r0
   d58cc:	4618      	mov	r0, r3
   d58ce:	f000 b94d 	b.w	d5b6c <__cxa_atexit>

000d58d2 <_ZdlPvj>:
   d58d2:	f7fe bbe2 	b.w	d409a <_ZdlPv>

000d58d6 <_ZSt25__throw_bad_function_callv>:
   d58d6:	b508      	push	{r3, lr}
   d58d8:	f7fe ff9a 	bl	d4810 <abort>

000d58dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d58dc:	4b24      	ldr	r3, [pc, #144]	; (d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	07d0      	lsls	r0, r2, #31
   d58e2:	bf5c      	itt	pl
   d58e4:	2201      	movpl	r2, #1
   d58e6:	601a      	strpl	r2, [r3, #0]
   d58e8:	4b22      	ldr	r3, [pc, #136]	; (d5974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d58ea:	681a      	ldr	r2, [r3, #0]
   d58ec:	07d1      	lsls	r1, r2, #31
   d58ee:	bf5c      	itt	pl
   d58f0:	2201      	movpl	r2, #1
   d58f2:	601a      	strpl	r2, [r3, #0]
   d58f4:	4b20      	ldr	r3, [pc, #128]	; (d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d58f6:	681a      	ldr	r2, [r3, #0]
   d58f8:	07d2      	lsls	r2, r2, #31
   d58fa:	bf5c      	itt	pl
   d58fc:	2201      	movpl	r2, #1
   d58fe:	601a      	strpl	r2, [r3, #0]
   d5900:	4b1e      	ldr	r3, [pc, #120]	; (d597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d0      	lsls	r0, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b1c      	ldr	r3, [pc, #112]	; (d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d1      	lsls	r1, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4b1a      	ldr	r3, [pc, #104]	; (d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d591a:	681a      	ldr	r2, [r3, #0]
   d591c:	07d2      	lsls	r2, r2, #31
   d591e:	bf5c      	itt	pl
   d5920:	2201      	movpl	r2, #1
   d5922:	601a      	strpl	r2, [r3, #0]
   d5924:	4b18      	ldr	r3, [pc, #96]	; (d5988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5926:	681a      	ldr	r2, [r3, #0]
   d5928:	07d0      	lsls	r0, r2, #31
   d592a:	bf5c      	itt	pl
   d592c:	2201      	movpl	r2, #1
   d592e:	601a      	strpl	r2, [r3, #0]
   d5930:	4b16      	ldr	r3, [pc, #88]	; (d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5932:	681a      	ldr	r2, [r3, #0]
   d5934:	07d1      	lsls	r1, r2, #31
   d5936:	bf5c      	itt	pl
   d5938:	2201      	movpl	r2, #1
   d593a:	601a      	strpl	r2, [r3, #0]
   d593c:	4b14      	ldr	r3, [pc, #80]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d593e:	681a      	ldr	r2, [r3, #0]
   d5940:	07d2      	lsls	r2, r2, #31
   d5942:	bf5c      	itt	pl
   d5944:	2201      	movpl	r2, #1
   d5946:	601a      	strpl	r2, [r3, #0]
   d5948:	4b12      	ldr	r3, [pc, #72]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d0      	lsls	r0, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4b10      	ldr	r3, [pc, #64]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d1      	lsls	r1, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4b0e      	ldr	r3, [pc, #56]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	07d2      	lsls	r2, r2, #31
   d5966:	bf5c      	itt	pl
   d5968:	2201      	movpl	r2, #1
   d596a:	601a      	strpl	r2, [r3, #0]
   d596c:	4770      	bx	lr
   d596e:	bf00      	nop
   d5970:	2003e77c 	.word	0x2003e77c
   d5974:	2003e778 	.word	0x2003e778
   d5978:	2003e774 	.word	0x2003e774
   d597c:	2003e770 	.word	0x2003e770
   d5980:	2003e76c 	.word	0x2003e76c
   d5984:	2003e768 	.word	0x2003e768
   d5988:	2003e764 	.word	0x2003e764
   d598c:	2003e760 	.word	0x2003e760
   d5990:	2003e75c 	.word	0x2003e75c
   d5994:	2003e758 	.word	0x2003e758
   d5998:	2003e754 	.word	0x2003e754
   d599c:	2003e750 	.word	0x2003e750

000d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d59a0:	4b18      	ldr	r3, [pc, #96]	; (d5a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d59a2:	681a      	ldr	r2, [r3, #0]
   d59a4:	07d1      	lsls	r1, r2, #31
   d59a6:	bf5c      	itt	pl
   d59a8:	2201      	movpl	r2, #1
   d59aa:	601a      	strpl	r2, [r3, #0]
   d59ac:	4b16      	ldr	r3, [pc, #88]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d59ae:	681a      	ldr	r2, [r3, #0]
   d59b0:	07d2      	lsls	r2, r2, #31
   d59b2:	bf5c      	itt	pl
   d59b4:	2201      	movpl	r2, #1
   d59b6:	601a      	strpl	r2, [r3, #0]
   d59b8:	4b14      	ldr	r3, [pc, #80]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d59ba:	681a      	ldr	r2, [r3, #0]
   d59bc:	07d0      	lsls	r0, r2, #31
   d59be:	bf5c      	itt	pl
   d59c0:	2201      	movpl	r2, #1
   d59c2:	601a      	strpl	r2, [r3, #0]
   d59c4:	4b12      	ldr	r3, [pc, #72]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d59c6:	681a      	ldr	r2, [r3, #0]
   d59c8:	07d1      	lsls	r1, r2, #31
   d59ca:	bf5c      	itt	pl
   d59cc:	2201      	movpl	r2, #1
   d59ce:	601a      	strpl	r2, [r3, #0]
   d59d0:	4b10      	ldr	r3, [pc, #64]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d59d2:	681a      	ldr	r2, [r3, #0]
   d59d4:	07d2      	lsls	r2, r2, #31
   d59d6:	bf5c      	itt	pl
   d59d8:	2201      	movpl	r2, #1
   d59da:	601a      	strpl	r2, [r3, #0]
   d59dc:	4b0e      	ldr	r3, [pc, #56]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d59de:	681a      	ldr	r2, [r3, #0]
   d59e0:	07d0      	lsls	r0, r2, #31
   d59e2:	bf5c      	itt	pl
   d59e4:	2201      	movpl	r2, #1
   d59e6:	601a      	strpl	r2, [r3, #0]
   d59e8:	4b0c      	ldr	r3, [pc, #48]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d59ea:	681a      	ldr	r2, [r3, #0]
   d59ec:	07d1      	lsls	r1, r2, #31
   d59ee:	bf5c      	itt	pl
   d59f0:	2201      	movpl	r2, #1
   d59f2:	601a      	strpl	r2, [r3, #0]
   d59f4:	4b0a      	ldr	r3, [pc, #40]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d59f6:	681a      	ldr	r2, [r3, #0]
   d59f8:	07d2      	lsls	r2, r2, #31
   d59fa:	bf5c      	itt	pl
   d59fc:	2201      	movpl	r2, #1
   d59fe:	601a      	strpl	r2, [r3, #0]
   d5a00:	4770      	bx	lr
   d5a02:	bf00      	nop
   d5a04:	2003e79c 	.word	0x2003e79c
   d5a08:	2003e798 	.word	0x2003e798
   d5a0c:	2003e794 	.word	0x2003e794
   d5a10:	2003e790 	.word	0x2003e790
   d5a14:	2003e78c 	.word	0x2003e78c
   d5a18:	2003e788 	.word	0x2003e788
   d5a1c:	2003e784 	.word	0x2003e784
   d5a20:	2003e780 	.word	0x2003e780

000d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a24:	4b18      	ldr	r3, [pc, #96]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a26:	681a      	ldr	r2, [r3, #0]
   d5a28:	07d1      	lsls	r1, r2, #31
   d5a2a:	bf5c      	itt	pl
   d5a2c:	2201      	movpl	r2, #1
   d5a2e:	601a      	strpl	r2, [r3, #0]
   d5a30:	4b16      	ldr	r3, [pc, #88]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d2      	lsls	r2, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b14      	ldr	r3, [pc, #80]	; (d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d0      	lsls	r0, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b12      	ldr	r3, [pc, #72]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d1      	lsls	r1, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b10      	ldr	r3, [pc, #64]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d2      	lsls	r2, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b0e      	ldr	r3, [pc, #56]	; (d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d0      	lsls	r0, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b0c      	ldr	r3, [pc, #48]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d1      	lsls	r1, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b0a      	ldr	r3, [pc, #40]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d2      	lsls	r2, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4770      	bx	lr
   d5a86:	bf00      	nop
   d5a88:	2003e7bc 	.word	0x2003e7bc
   d5a8c:	2003e7b8 	.word	0x2003e7b8
   d5a90:	2003e7b4 	.word	0x2003e7b4
   d5a94:	2003e7b0 	.word	0x2003e7b0
   d5a98:	2003e7ac 	.word	0x2003e7ac
   d5a9c:	2003e7a8 	.word	0x2003e7a8
   d5aa0:	2003e7a4 	.word	0x2003e7a4
   d5aa4:	2003e7a0 	.word	0x2003e7a0

000d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5aa8:	4b24      	ldr	r3, [pc, #144]	; (d5b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d0      	lsls	r0, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b22      	ldr	r3, [pc, #136]	; (d5b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d1      	lsls	r1, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b20      	ldr	r3, [pc, #128]	; (d5b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d2      	lsls	r2, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b1e      	ldr	r3, [pc, #120]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d0      	lsls	r0, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b1c      	ldr	r3, [pc, #112]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d1      	lsls	r1, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b1a      	ldr	r3, [pc, #104]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d2      	lsls	r2, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b18      	ldr	r3, [pc, #96]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d0      	lsls	r0, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b16      	ldr	r3, [pc, #88]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d1      	lsls	r1, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b14      	ldr	r3, [pc, #80]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d2      	lsls	r2, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b12      	ldr	r3, [pc, #72]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d0      	lsls	r0, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b10      	ldr	r3, [pc, #64]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d1      	lsls	r1, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b0e      	ldr	r3, [pc, #56]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d2      	lsls	r2, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4770      	bx	lr
   d5b3a:	bf00      	nop
   d5b3c:	2003e7ec 	.word	0x2003e7ec
   d5b40:	2003e7e8 	.word	0x2003e7e8
   d5b44:	2003e7e4 	.word	0x2003e7e4
   d5b48:	2003e7e0 	.word	0x2003e7e0
   d5b4c:	2003e7dc 	.word	0x2003e7dc
   d5b50:	2003e7d8 	.word	0x2003e7d8
   d5b54:	2003e7d4 	.word	0x2003e7d4
   d5b58:	2003e7d0 	.word	0x2003e7d0
   d5b5c:	2003e7cc 	.word	0x2003e7cc
   d5b60:	2003e7c8 	.word	0x2003e7c8
   d5b64:	2003e7c4 	.word	0x2003e7c4
   d5b68:	2003e7c0 	.word	0x2003e7c0

000d5b6c <__cxa_atexit>:
   d5b6c:	b510      	push	{r4, lr}
   d5b6e:	4c05      	ldr	r4, [pc, #20]	; (d5b84 <__cxa_atexit+0x18>)
   d5b70:	4613      	mov	r3, r2
   d5b72:	b12c      	cbz	r4, d5b80 <__cxa_atexit+0x14>
   d5b74:	460a      	mov	r2, r1
   d5b76:	4601      	mov	r1, r0
   d5b78:	2002      	movs	r0, #2
   d5b7a:	f3af 8000 	nop.w
   d5b7e:	bd10      	pop	{r4, pc}
   d5b80:	4620      	mov	r0, r4
   d5b82:	bd10      	pop	{r4, pc}
   d5b84:	00000000 	.word	0x00000000

000d5b88 <memcpy>:
   d5b88:	b510      	push	{r4, lr}
   d5b8a:	1e43      	subs	r3, r0, #1
   d5b8c:	440a      	add	r2, r1
   d5b8e:	4291      	cmp	r1, r2
   d5b90:	d004      	beq.n	d5b9c <memcpy+0x14>
   d5b92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5b9a:	e7f8      	b.n	d5b8e <memcpy+0x6>
   d5b9c:	bd10      	pop	{r4, pc}

000d5b9e <memset>:
   d5b9e:	4402      	add	r2, r0
   d5ba0:	4603      	mov	r3, r0
   d5ba2:	4293      	cmp	r3, r2
   d5ba4:	d002      	beq.n	d5bac <memset+0xe>
   d5ba6:	f803 1b01 	strb.w	r1, [r3], #1
   d5baa:	e7fa      	b.n	d5ba2 <memset+0x4>
   d5bac:	4770      	bx	lr
	...

000d5bb0 <srand>:
   d5bb0:	b538      	push	{r3, r4, r5, lr}
   d5bb2:	4b12      	ldr	r3, [pc, #72]	; (d5bfc <srand+0x4c>)
   d5bb4:	681c      	ldr	r4, [r3, #0]
   d5bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5bb8:	4605      	mov	r5, r0
   d5bba:	b9d3      	cbnz	r3, d5bf2 <srand+0x42>
   d5bbc:	2018      	movs	r0, #24
   d5bbe:	f7fe fe0f 	bl	d47e0 <malloc>
   d5bc2:	f243 330e 	movw	r3, #13070	; 0x330e
   d5bc6:	63a0      	str	r0, [r4, #56]	; 0x38
   d5bc8:	8003      	strh	r3, [r0, #0]
   d5bca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5bce:	8043      	strh	r3, [r0, #2]
   d5bd0:	f241 2334 	movw	r3, #4660	; 0x1234
   d5bd4:	8083      	strh	r3, [r0, #4]
   d5bd6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5bda:	80c3      	strh	r3, [r0, #6]
   d5bdc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5be0:	8103      	strh	r3, [r0, #8]
   d5be2:	2305      	movs	r3, #5
   d5be4:	8143      	strh	r3, [r0, #10]
   d5be6:	230b      	movs	r3, #11
   d5be8:	8183      	strh	r3, [r0, #12]
   d5bea:	2201      	movs	r2, #1
   d5bec:	2300      	movs	r3, #0
   d5bee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5bf4:	2200      	movs	r2, #0
   d5bf6:	611d      	str	r5, [r3, #16]
   d5bf8:	615a      	str	r2, [r3, #20]
   d5bfa:	bd38      	pop	{r3, r4, r5, pc}
   d5bfc:	2003e3b4 	.word	0x2003e3b4

000d5c00 <strcmp>:
   d5c00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5c04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5c08:	2a01      	cmp	r2, #1
   d5c0a:	bf28      	it	cs
   d5c0c:	429a      	cmpcs	r2, r3
   d5c0e:	d0f7      	beq.n	d5c00 <strcmp>
   d5c10:	1ad0      	subs	r0, r2, r3
   d5c12:	4770      	bx	lr

000d5c14 <strcpy>:
   d5c14:	4603      	mov	r3, r0
   d5c16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5c1a:	f803 2b01 	strb.w	r2, [r3], #1
   d5c1e:	2a00      	cmp	r2, #0
   d5c20:	d1f9      	bne.n	d5c16 <strcpy+0x2>
   d5c22:	4770      	bx	lr

000d5c24 <strdup>:
   d5c24:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <strdup+0xc>)
   d5c26:	4601      	mov	r1, r0
   d5c28:	6818      	ldr	r0, [r3, #0]
   d5c2a:	f000 b803 	b.w	d5c34 <_strdup_r>
   d5c2e:	bf00      	nop
   d5c30:	2003e3b4 	.word	0x2003e3b4

000d5c34 <_strdup_r>:
   d5c34:	b570      	push	{r4, r5, r6, lr}
   d5c36:	4606      	mov	r6, r0
   d5c38:	4608      	mov	r0, r1
   d5c3a:	460c      	mov	r4, r1
   d5c3c:	f000 f80d 	bl	d5c5a <strlen>
   d5c40:	1c45      	adds	r5, r0, #1
   d5c42:	4629      	mov	r1, r5
   d5c44:	4630      	mov	r0, r6
   d5c46:	f7fe fdeb 	bl	d4820 <_malloc_r>
   d5c4a:	4606      	mov	r6, r0
   d5c4c:	b118      	cbz	r0, d5c56 <_strdup_r+0x22>
   d5c4e:	462a      	mov	r2, r5
   d5c50:	4621      	mov	r1, r4
   d5c52:	f7ff ff99 	bl	d5b88 <memcpy>
   d5c56:	4630      	mov	r0, r6
   d5c58:	bd70      	pop	{r4, r5, r6, pc}

000d5c5a <strlen>:
   d5c5a:	4603      	mov	r3, r0
   d5c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c60:	2a00      	cmp	r2, #0
   d5c62:	d1fb      	bne.n	d5c5c <strlen+0x2>
   d5c64:	1a18      	subs	r0, r3, r0
   d5c66:	3801      	subs	r0, #1
   d5c68:	4770      	bx	lr

000d5c6a <link_code_end>:
	...

000d5c6c <dynalib_user>:
   d5c6c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5c7c:	0000 0000 6163 7272 6569 4d72 646f 0065     ....carrierMode.
   d5c8c:	6556 7372 6f69 006e 6573 4374 7261 6972     Version.setCarri
   d5c9c:	7265 6f4d 6564 4100 2b54 4f43 5350 323d     erMode.AT+COPS=2
   d5cac:	0a0d 4100 2b54 4f43 5350 303d 0a0d 4100     ...AT+COPS=0...A
   d5cbc:	2b54 4f43 5350 343d 322c 222c 3133 3430     T+COPS=4,2,"3104
   d5ccc:	3031 0d22 000a 5441 432b 504f 3d53 2c34     10"...AT+COPS=4,
   d5cdc:	2c32 3322 3031 3632 2230 0a0d 4100 2b54     2,"310260"...AT+
   d5cec:	4f43 5350 343d 322c 222c 3336 3135 2234     COPS=4,2,"63514"
   d5cfc:	0a0d 4100 2b54 4f43 5350 343d 322c 222c     ...AT+COPS=4,2,"
   d5d0c:	3336 3135 2230 0a0d 4100 2b54 4f43 5350     63510"...AT+COPS
   d5d1c:	343d 322c 222c 3336 3135 2233 0a0d 3000     =4,2,"63513"...0
   d5d2c:	4100 7475 6d6f 7461 6369 4300 656c 7261     .Automatic.Clear
   d5d3c:	6465 4320 7261 6972 7265 5320 6c65 6365     ed Carrier Selec
   d5d4c:	6974 6e6f 4d20 646f 0065 6143 7272 6569     tion Mode.Carrie
   d5d5c:	2072 6f46 6372 6465 7420 206f 5441 5426     r Forced to AT&T
   d5d6c:	3200 4300 7261 6972 7265 4620 726f 6563     .2.Carrier Force
   d5d7c:	2064 6f74 5420 4d2d 626f 6c69 0065 0033     d to T-Mobile.3.
   d5d8c:	6143 7272 6569 2072 6f46 6372 6465 7420     Carrier Forced t
   d5d9c:	206f 6941 7472 6c65 3400 4d00 4e54 4300     o Airtel.4.MTN.C
   d5dac:	7261 6972 7265 4620 726f 6563 2064 6f74     arrier Forced to
   d5dbc:	4d20 4e54 522f 6177 646e 4361 6c65 006c      MTN/RwandaCell.
   d5dcc:	0035 6143 7272 6569 2072 6f46 6372 6465     5.Carrier Forced
   d5ddc:	7420 206f 4954 4f47 0000 0000                to TIGO....

000d5de8 <_ZTVN5spark13CellularClassE>:
	...
   d5df0:	48f3 000d 48e9 000d 48df 000d 48a1 000d     .H...H...H...H..
   d5e00:	40c3 000d 48d3 000d 48c7 000d 48bf 000d     .@...H...H...H..
   d5e10:	48b5 000d 48ab 000d 5295 000d               .H...H...R..

000d5e1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5e24:	492d 000d 4933 000d 4989 000d 4941 000d     -I..3I...I..AI..
   d5e34:	492f 000d                                   /I..

000d5e38 <_ZTVN5spark13EthernetClassE>:
	...
   d5e40:	4f9f 000d 4f95 000d 4f8b 000d 4f81 000d     .O...O...O...O..
   d5e50:	4f75 000d 4f69 000d 4f5d 000d 4f55 000d     uO..iO..]O..UO..
   d5e60:	4f4b 000d 4f41 000d 5295 000d               KO..AO...R..

000d5e6c <_ZTV9IPAddress>:
	...
   d5e74:	4fcd 000d 4fbd 000d 4fbf 000d 6162 6475     .O...O...O..baud
   d5e84:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5e94:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5ea4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5eb4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5ec4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5ed4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5ee4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5ef4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5f04:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5f14:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5f24:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d5f34:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d5f44:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d5f54:	6170 696e 0063 6c61 006c 0000               panic.all...

000d5f60 <_ZTVN5spark9MeshClassE>:
	...
   d5f68:	510f 000d 5105 000d 50fb 000d 50f1 000d     .Q...Q...P...P..
   d5f78:	50e5 000d 50d9 000d 50cd 000d 50c5 000d     .P...P...P...P..
   d5f88:	50bb 000d 50b1 000d 5295 000d               .P...P...R..

000d5f94 <_ZTVN5spark12NetworkClassE>:
	...
   d5f9c:	522d 000d 5237 000d 5241 000d 524b 000d     -R..7R..AR..KR..
   d5fac:	5255 000d 5261 000d 526d 000d 5279 000d     UR..aR..mR..yR..
   d5fbc:	5281 000d 528b 000d 5295 000d 005a 2b25     .R...R...R..Z.%+
   d5fcc:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5fdc:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5fec:	6974 656d 0000 0000                         time....

000d5ff4 <_ZTV11USARTSerial>:
	...
   d5ffc:	5585 000d 55d5 000d 55e3 000d 5375 000d     .U...U...U..uS..
   d600c:	5599 000d 55bb 000d 55a7 000d 55cf 000d     .U...U...U...U..
   d601c:	5587 000d 558b 000d                         .U...U..

000d6024 <_ZTV9USBSerial>:
	...
   d602c:	5685 000d 56d5 000d 56e3 000d 5375 000d     .V...V...V..uS..
   d603c:	56c1 000d 5687 000d 569d 000d 56cf 000d     .V...V...V...V..
   d604c:	56b3 000d 5681 000d                         .V...V..

000d6054 <__sf_fake_stdin>:
	...

000d6074 <__sf_fake_stdout>:
	...

000d6094 <__sf_fake_stderr>:
	...
   d60b4:	0043                                        C.

000d60b6 <link_const_variable_data_end>:
	...

000d60b8 <link_constructors_location>:
   d60b8:	000d4451 	.word	0x000d4451
   d60bc:	000d4879 	.word	0x000d4879
   d60c0:	000d48fd 	.word	0x000d48fd
   d60c4:	000d4fa9 	.word	0x000d4fa9
   d60c8:	000d50a1 	.word	0x000d50a1
   d60cc:	000d51dd 	.word	0x000d51dd
   d60d0:	000d5361 	.word	0x000d5361
   d60d4:	000d5415 	.word	0x000d5415
   d60d8:	000d553d 	.word	0x000d553d
   d60dc:	000d5571 	.word	0x000d5571
   d60e0:	000d58dd 	.word	0x000d58dd
   d60e4:	000d59a1 	.word	0x000d59a1
   d60e8:	000d5a25 	.word	0x000d5a25
   d60ec:	000d5aa9 	.word	0x000d5aa9
