
/Users/chipmc/Documents/Maker/Particle/Utilities/Force-Carrier-Test/target/1.5.1/boron/Force-Carrier-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d61e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003e330  000d61e4  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b0  2003e3b0  0002e3b0  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d6264  000d6264  00026264  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d6290  000d6290  00026290  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ccb79  00000000  00000000  00026294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ed21  00000000  00000000  000f2e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d1a6  00000000  00000000  00101b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024d0  00000000  00000000  0011ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004720  00000000  00000000  001211a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031061  00000000  00000000  001258c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022a47  00000000  00000000  00156925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010566c  00000000  00000000  0017936c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ccd0  00000000  00000000  0027e9d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fde7 	bl	d5c00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdec 	bl	d5c16 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e330 	.word	0x2003e330
   d4048:	000d61e4 	.word	0x000d61e4
   d404c:	2003e3b0 	.word	0x2003e3b0
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc19 	bl	d5890 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d61e0 	.word	0x000d61e0
   d4080:	000d61a8 	.word	0x000d61a8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9aa 	b.w	d43dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f81c 	bl	d40c6 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bbbf 	b.w	d5814 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbbb 	b.w	d4810 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbc1 	b.w	d4820 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbbf 	b.w	d4820 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b6:	6800      	ldr	r0, [r0, #0]
   d40b8:	b108      	cbz	r0, d40be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ba:	f000 fbb1 	bl	d4820 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN11EEPROMClass5writeEih.isra.7>:
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d40c2:	f000 ba49 	b.w	d4558 <HAL_EEPROM_Write>

000d40c6 <loop>:

  connectToParticle();
}


void loop() {
   d40c6:	4770      	bx	lr

000d40c8 <_Z17connectToParticlev>:
  delay(2000);                // Give the Particle Publish a second or two to go through
  System.reset();
  return 1;
}

bool connectToParticle() {
   d40c8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d40cc:	f000 fb30 	bl	d4730 <spark_cloud_flag_connect>
   d40d0:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40d4:	f240 36e7 	movw	r6, #999	; 0x3e7
   d40d8:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d40da:	2000      	movs	r0, #0
   d40dc:	f000 fa44 	bl	d4568 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40e0:	f04f 0900 	mov.w	r9, #0
   d40e4:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d40e6:	2000      	movs	r0, #0
   d40e8:	f000 fa3e 	bl	d4568 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40ec:	ebb0 0008 	subs.w	r0, r0, r8
   d40f0:	eb61 0109 	sbc.w	r1, r1, r9
   d40f4:	428f      	cmp	r7, r1
   d40f6:	bf08      	it	eq
   d40f8:	4286      	cmpeq	r6, r0
   d40fa:	d305      	bcc.n	d4108 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40fc:	f000 fb20 	bl	d4740 <spark_cloud_flag_connected>
   d4100:	b910      	cbnz	r0, d4108 <_Z17connectToParticlev+0x40>
            spark_process();
   d4102:	f000 fb0d 	bl	d4720 <spark_process>
   d4106:	e7ee      	b.n	d40e6 <_Z17connectToParticlev+0x1e>
   d4108:	f000 fb1a 	bl	d4740 <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d410c:	b118      	cbz	r0, d4116 <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d410e:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
   d4112:	f000 bb15 	b.w	d4740 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4116:	f000 fa07 	bl	d4528 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_Z17connectToParticlev+0x60>)
   d411c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d411e:	f000 faff 	bl	d4720 <spark_process>
}

bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4122:	3c01      	subs	r4, #1
   d4124:	d0f3      	beq.n	d410e <_Z17connectToParticlev+0x46>
   d4126:	e7d8      	b.n	d40da <_Z17connectToParticlev+0x12>
   d4128:	2003e744 	.word	0x2003e744

000d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d412c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d412e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4130:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4132:	b17c      	cbz	r4, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4134:	6863      	ldr	r3, [r4, #4]
   d4136:	3b01      	subs	r3, #1
   d4138:	6063      	str	r3, [r4, #4]
   d413a:	b95b      	cbnz	r3, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	4620      	mov	r0, r4
   d4140:	689b      	ldr	r3, [r3, #8]
   d4142:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4144:	68a3      	ldr	r3, [r4, #8]
   d4146:	3b01      	subs	r3, #1
   d4148:	60a3      	str	r3, [r4, #8]
   d414a:	b91b      	cbnz	r3, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d414c:	6823      	ldr	r3, [r4, #0]
   d414e:	4620      	mov	r0, r4
   d4150:	68db      	ldr	r3, [r3, #12]
   d4152:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4154:	4628      	mov	r0, r5
   d4156:	bd38      	pop	{r3, r4, r5, pc}

000d4158 <_Z14setCarrierMode6String>:
    break;
  }
}

int setCarrierMode(String command)                          // Function to force sending data in current hour
{
   d4158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d415a:	494b      	ldr	r1, [pc, #300]	; (d4288 <_Z14setCarrierMode6String+0x130>)
   d415c:	4604      	mov	r4, r0
   d415e:	f001 f9fb 	bl	d5558 <_ZNK6String6equalsEPKc>
  if (command == "0")
   d4162:	b188      	cbz	r0, d4188 <_Z14setCarrierMode6String+0x30>
  {
    EEPROM.write(carrierModeAddr,0); 
   d4164:	f001 fbd8 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d4168:	4b48      	ldr	r3, [pc, #288]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d416a:	2100      	movs	r1, #0
   d416c:	7818      	ldrb	r0, [r3, #0]
   d416e:	f7ff ffa8 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4172:	f000 fae5 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Selection Mode to Automatic - Resetting", PRIVATE);
   d4176:	2800      	cmp	r0, #0
   d4178:	d07d      	beq.n	d4276 <_Z14setCarrierMode6String+0x11e>
   d417a:	4b45      	ldr	r3, [pc, #276]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d417c:	4a45      	ldr	r2, [pc, #276]	; (d4294 <_Z14setCarrierMode6String+0x13c>)
   d417e:	781b      	ldrb	r3, [r3, #0]
   d4180:	f88d 3000 	strb.w	r3, [sp]
   d4184:	233c      	movs	r3, #60	; 0x3c
   d4186:	e06f      	b.n	d4268 <_Z14setCarrierMode6String+0x110>
   d4188:	4943      	ldr	r1, [pc, #268]	; (d4298 <_Z14setCarrierMode6String+0x140>)
   d418a:	4620      	mov	r0, r4
   d418c:	f001 f9e4 	bl	d5558 <_ZNK6String6equalsEPKc>
  }
  else if (command == "1")
   d4190:	b188      	cbz	r0, d41b6 <_Z14setCarrierMode6String+0x5e>
  {
    EEPROM.write(carrierModeAddr,1); 
   d4192:	f001 fbc1 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d4196:	4b3d      	ldr	r3, [pc, #244]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d4198:	2101      	movs	r1, #1
   d419a:	7818      	ldrb	r0, [r3, #0]
   d419c:	f7ff ff91 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41a0:	f000 face 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to AT&T - Resetting", PRIVATE);
   d41a4:	2800      	cmp	r0, #0
   d41a6:	d066      	beq.n	d4276 <_Z14setCarrierMode6String+0x11e>
   d41a8:	4b39      	ldr	r3, [pc, #228]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41aa:	4a3c      	ldr	r2, [pc, #240]	; (d429c <_Z14setCarrierMode6String+0x144>)
   d41ac:	781b      	ldrb	r3, [r3, #0]
   d41ae:	f88d 3000 	strb.w	r3, [sp]
   d41b2:	233c      	movs	r3, #60	; 0x3c
   d41b4:	e058      	b.n	d4268 <_Z14setCarrierMode6String+0x110>
   d41b6:	493a      	ldr	r1, [pc, #232]	; (d42a0 <_Z14setCarrierMode6String+0x148>)
   d41b8:	4620      	mov	r0, r4
   d41ba:	f001 f9cd 	bl	d5558 <_ZNK6String6equalsEPKc>
  }
  else if (command == "2")
   d41be:	b188      	cbz	r0, d41e4 <_Z14setCarrierMode6String+0x8c>
  {
    EEPROM.write(carrierModeAddr,2); 
   d41c0:	f001 fbaa 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d41c4:	4b31      	ldr	r3, [pc, #196]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d41c6:	2102      	movs	r1, #2
   d41c8:	7818      	ldrb	r0, [r3, #0]
   d41ca:	f7ff ff7a 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ce:	f000 fab7 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to T-Mobile - Resetting", PRIVATE);
   d41d2:	2800      	cmp	r0, #0
   d41d4:	d04f      	beq.n	d4276 <_Z14setCarrierMode6String+0x11e>
   d41d6:	4b2e      	ldr	r3, [pc, #184]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41d8:	4a32      	ldr	r2, [pc, #200]	; (d42a4 <_Z14setCarrierMode6String+0x14c>)
   d41da:	781b      	ldrb	r3, [r3, #0]
   d41dc:	f88d 3000 	strb.w	r3, [sp]
   d41e0:	233c      	movs	r3, #60	; 0x3c
   d41e2:	e041      	b.n	d4268 <_Z14setCarrierMode6String+0x110>
   d41e4:	4930      	ldr	r1, [pc, #192]	; (d42a8 <_Z14setCarrierMode6String+0x150>)
   d41e6:	4620      	mov	r0, r4
   d41e8:	f001 f9b6 	bl	d5558 <_ZNK6String6equalsEPKc>
  }
  else if (command == "3")
   d41ec:	b188      	cbz	r0, d4212 <_Z14setCarrierMode6String+0xba>
  {
    EEPROM.write(carrierModeAddr,3); 
   d41ee:	f001 fb93 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d41f2:	4b26      	ldr	r3, [pc, #152]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d41f4:	2103      	movs	r1, #3
   d41f6:	7818      	ldrb	r0, [r3, #0]
   d41f8:	f7ff ff63 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41fc:	f000 faa0 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to Airtel - Resetting", PRIVATE);
   d4200:	2800      	cmp	r0, #0
   d4202:	d038      	beq.n	d4276 <_Z14setCarrierMode6String+0x11e>
   d4204:	4b22      	ldr	r3, [pc, #136]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	4a29      	ldr	r2, [pc, #164]	; (d42ac <_Z14setCarrierMode6String+0x154>)
   d4208:	781b      	ldrb	r3, [r3, #0]
   d420a:	f88d 3000 	strb.w	r3, [sp]
   d420e:	233c      	movs	r3, #60	; 0x3c
   d4210:	e02a      	b.n	d4268 <_Z14setCarrierMode6String+0x110>
   d4212:	4927      	ldr	r1, [pc, #156]	; (d42b0 <_Z14setCarrierMode6String+0x158>)
   d4214:	4620      	mov	r0, r4
   d4216:	f001 f99f 	bl	d5558 <_ZNK6String6equalsEPKc>
  }
  else if (command == "4")
   d421a:	b180      	cbz	r0, d423e <_Z14setCarrierMode6String+0xe6>
  {
    EEPROM.write(carrierModeAddr,4); 
   d421c:	f001 fb7c 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d4220:	4b1a      	ldr	r3, [pc, #104]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d4222:	2104      	movs	r1, #4
   d4224:	7818      	ldrb	r0, [r3, #0]
   d4226:	f7ff ff4c 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d422a:	f000 fa89 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to MTN/RwandaCell - Resetting", PRIVATE);
   d422e:	b310      	cbz	r0, d4276 <_Z14setCarrierMode6String+0x11e>
   d4230:	4b17      	ldr	r3, [pc, #92]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4232:	4a20      	ldr	r2, [pc, #128]	; (d42b4 <_Z14setCarrierMode6String+0x15c>)
   d4234:	781b      	ldrb	r3, [r3, #0]
   d4236:	f88d 3000 	strb.w	r3, [sp]
   d423a:	233c      	movs	r3, #60	; 0x3c
   d423c:	e014      	b.n	d4268 <_Z14setCarrierMode6String+0x110>
   d423e:	491e      	ldr	r1, [pc, #120]	; (d42b8 <_Z14setCarrierMode6String+0x160>)
   d4240:	4620      	mov	r0, r4
   d4242:	f001 f989 	bl	d5558 <_ZNK6String6equalsEPKc>
  }
  else if (command == "5")
   d4246:	b1e8      	cbz	r0, d4284 <_Z14setCarrierMode6String+0x12c>
  {
    EEPROM.write(carrierModeAddr,5); 
   d4248:	f001 fb66 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d424c:	4b0f      	ldr	r3, [pc, #60]	; (d428c <_Z14setCarrierMode6String+0x134>)
   d424e:	2105      	movs	r1, #5
   d4250:	7818      	ldrb	r0, [r3, #0]
   d4252:	f7ff ff36 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4256:	f000 fa73 	bl	d4740 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to TIGO - Resetting", PRIVATE);
   d425a:	b160      	cbz	r0, d4276 <_Z14setCarrierMode6String+0x11e>
   d425c:	4b0c      	ldr	r3, [pc, #48]	; (d4290 <_Z14setCarrierMode6String+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d425e:	4a17      	ldr	r2, [pc, #92]	; (d42bc <_Z14setCarrierMode6String+0x164>)
   d4260:	781b      	ldrb	r3, [r3, #0]
   d4262:	f88d 3000 	strb.w	r3, [sp]
   d4266:	233c      	movs	r3, #60	; 0x3c
   d4268:	a802      	add	r0, sp, #8
   d426a:	4915      	ldr	r1, [pc, #84]	; (d42c0 <_Z14setCarrierMode6String+0x168>)
   d426c:	f000 fd06 	bl	d4c7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4270:	a803      	add	r0, sp, #12
   d4272:	f7ff ff5b 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  else return 0;
  delay(2000);                // Give the Particle Publish a second or two to go through
   d4276:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d427a:	f000 faf1 	bl	d4860 <delay>
  System.reset();
   d427e:	f001 f982 	bl	d5586 <_ZN11SystemClass5resetEv>
  return 1;
   d4282:	2001      	movs	r0, #1
}
   d4284:	b004      	add	sp, #16
   d4286:	bd10      	pop	{r4, pc}
   d4288:	000d5cf8 	.word	0x000d5cf8
   d428c:	2003e346 	.word	0x2003e346
   d4290:	2003e3b4 	.word	0x2003e3b4
   d4294:	000d5cfa 	.word	0x000d5cfa
   d4298:	000d5f82 	.word	0x000d5f82
   d429c:	000d5d2a 	.word	0x000d5d2a
   d42a0:	000d5d4d 	.word	0x000d5d4d
   d42a4:	000d5d4f 	.word	0x000d5d4f
   d42a8:	000d5d76 	.word	0x000d5d76
   d42ac:	000d5d78 	.word	0x000d5d78
   d42b0:	000d5d9d 	.word	0x000d5d9d
   d42b4:	000d5d9f 	.word	0x000d5d9f
   d42b8:	000d5dcc 	.word	0x000d5dcc
   d42bc:	000d5dce 	.word	0x000d5dce
   d42c0:	000d5ed2 	.word	0x000d5ed2

000d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>:
    bool getBandAvailable(CellularBand &data_get);

    template<typename... Targs>
    inline int command(const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, 10000, format, Fargs...);
   d42c4:	460b      	mov	r3, r1
   d42c6:	2100      	movs	r1, #0
   d42c8:	f242 7210 	movw	r2, #10000	; 0x2710
   d42cc:	4608      	mov	r0, r1
   d42ce:	f000 b8eb 	b.w	d44a8 <cellular_command>
	...

000d42d4 <_Z20carrierSelectionModeh>:

void loop() {

}

void carrierSelectionMode(byte mode) {
   d42d4:	b538      	push	{r3, r4, r5, lr}
   d42d6:	4d30      	ldr	r5, [pc, #192]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d42d8:	2300      	movs	r3, #0
   d42da:	461a      	mov	r2, r3
   d42dc:	4619      	mov	r1, r3
   d42de:	4604      	mov	r4, r0
   d42e0:	6868      	ldr	r0, [r5, #4]
   d42e2:	f000 fa65 	bl	d47b0 <network_on>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d42e6:	2200      	movs	r2, #0
   d42e8:	2102      	movs	r1, #2
   d42ea:	6868      	ldr	r0, [r5, #4]
   d42ec:	f000 fa50 	bl	d4790 <network_disconnect>
  Cellular.on();
  Cellular.disconnect();

  switch (mode) {
   d42f0:	2c05      	cmp	r4, #5
   d42f2:	d843      	bhi.n	d437c <_Z20carrierSelectionModeh+0xa8>
   d42f4:	e8df f004 	tbb	[pc, r4]
   d42f8:	21170d03 	.word	0x21170d03
   d42fc:	352b      	.short	0x352b
    case 0:
      strcpy(carrierModeStr,"Automatic");
   d42fe:	4927      	ldr	r1, [pc, #156]	; (d439c <_Z20carrierSelectionModeh+0xc8>)
   d4300:	4827      	ldr	r0, [pc, #156]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d4302:	f001 fcc3 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4306:	4927      	ldr	r1, [pc, #156]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d4308:	4823      	ldr	r0, [pc, #140]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d430a:	f7ff ffdb 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=0\r\n");                      // Automatic mode
   d430e:	4926      	ldr	r1, [pc, #152]	; (d43a8 <_Z20carrierSelectionModeh+0xd4>)
   d4310:	e030      	b.n	d4374 <_Z20carrierSelectionModeh+0xa0>
    break;

    case 1:
      strcpy(carrierModeStr,"AT&T");
   d4312:	4926      	ldr	r1, [pc, #152]	; (d43ac <_Z20carrierSelectionModeh+0xd8>)
   d4314:	4822      	ldr	r0, [pc, #136]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d4316:	f001 fcb9 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d431a:	4922      	ldr	r1, [pc, #136]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d431c:	481e      	ldr	r0, [pc, #120]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d431e:	f7ff ffd1 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=4,2,\"310410\"\r\n");         // Manually connect to AT&T, and fallback to automatic mode if failed
   d4322:	4923      	ldr	r1, [pc, #140]	; (d43b0 <_Z20carrierSelectionModeh+0xdc>)
   d4324:	e026      	b.n	d4374 <_Z20carrierSelectionModeh+0xa0>
    break;

    case 2:
      strcpy(carrierModeStr,"T-Mobile");
   d4326:	4923      	ldr	r1, [pc, #140]	; (d43b4 <_Z20carrierSelectionModeh+0xe0>)
   d4328:	481d      	ldr	r0, [pc, #116]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d432a:	f001 fcaf 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d432e:	491d      	ldr	r1, [pc, #116]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d4330:	4819      	ldr	r0, [pc, #100]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d4332:	f7ff ffc7 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=4,2,\"310260\"\r\n");         // Manually connect to T-mobile, and fallback to automatic mode if failed
   d4336:	4920      	ldr	r1, [pc, #128]	; (d43b8 <_Z20carrierSelectionModeh+0xe4>)
   d4338:	e01c      	b.n	d4374 <_Z20carrierSelectionModeh+0xa0>
    break;

    case 3:
      strcpy(carrierModeStr,"Airtel");
   d433a:	4920      	ldr	r1, [pc, #128]	; (d43bc <_Z20carrierSelectionModeh+0xe8>)
   d433c:	4818      	ldr	r0, [pc, #96]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d433e:	f001 fca5 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4342:	4918      	ldr	r1, [pc, #96]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d4344:	4814      	ldr	r0, [pc, #80]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d4346:	f7ff ffbd 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=4,2,\"63514\"\r\n");         // Manually connect to Airtel, and fallback to automatic mode if failed
   d434a:	491d      	ldr	r1, [pc, #116]	; (d43c0 <_Z20carrierSelectionModeh+0xec>)
   d434c:	e012      	b.n	d4374 <_Z20carrierSelectionModeh+0xa0>
    break;

    case 4:
      strcpy(carrierModeStr,"MTN/Rwandacell");
   d434e:	491d      	ldr	r1, [pc, #116]	; (d43c4 <_Z20carrierSelectionModeh+0xf0>)
   d4350:	4813      	ldr	r0, [pc, #76]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d4352:	f001 fc9b 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d4356:	4913      	ldr	r1, [pc, #76]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d4358:	480f      	ldr	r0, [pc, #60]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d435a:	f7ff ffb3 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=4,2,\"63510\"\r\n");         // Manually connect to MTN/RwandaCell, and fallback to automatic mode if failed
   d435e:	491a      	ldr	r1, [pc, #104]	; (d43c8 <_Z20carrierSelectionModeh+0xf4>)
   d4360:	e008      	b.n	d4374 <_Z20carrierSelectionModeh+0xa0>
    break;

    case 5:
      strcpy(carrierModeStr,"TIGO");
   d4362:	491a      	ldr	r1, [pc, #104]	; (d43cc <_Z20carrierSelectionModeh+0xf8>)
   d4364:	480e      	ldr	r0, [pc, #56]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
   d4366:	f001 fc91 	bl	d5c8c <strcpy>
      Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
   d436a:	490e      	ldr	r1, [pc, #56]	; (d43a4 <_Z20carrierSelectionModeh+0xd0>)
   d436c:	480a      	ldr	r0, [pc, #40]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d436e:	f7ff ffa9 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
      Cellular.command("AT+COPS=4,2,\"63513\"\r\n");         // Manually connect to TIGO, and fallback to automatic mode if failed
   d4372:	4917      	ldr	r1, [pc, #92]	; (d43d0 <_Z20carrierSelectionModeh+0xfc>)
   d4374:	4808      	ldr	r0, [pc, #32]	; (d4398 <_Z20carrierSelectionModeh+0xc4>)
   d4376:	f7ff ffa5 	bl	d42c4 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    break;
   d437a:	bd38      	pop	{r3, r4, r5, pc}

    default:
      EEPROM.write(carrierModeAddr,0);                      // Bad carrier code - go to default - Auto
   d437c:	f001 facc 	bl	d5918 <_Z21__fetch_global_EEPROMv>
   d4380:	4b14      	ldr	r3, [pc, #80]	; (d43d4 <_Z20carrierSelectionModeh+0x100>)
   d4382:	2100      	movs	r1, #0
   d4384:	7818      	ldrb	r0, [r3, #0]
   d4386:	f7ff fe9c 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.7>
      strcpy(carrierModeStr,"Default");
   d438a:	4913      	ldr	r1, [pc, #76]	; (d43d8 <_Z20carrierSelectionModeh+0x104>)
   d438c:	4804      	ldr	r0, [pc, #16]	; (d43a0 <_Z20carrierSelectionModeh+0xcc>)
    break;
  }
}
   d438e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Cellular.command("AT+COPS=4,2,\"63513\"\r\n");         // Manually connect to TIGO, and fallback to automatic mode if failed
    break;

    default:
      EEPROM.write(carrierModeAddr,0);                      // Bad carrier code - go to default - Auto
      strcpy(carrierModeStr,"Default");
   d4392:	f001 bc7b 	b.w	d5c8c <strcpy>
   d4396:	bf00      	nop
   d4398:	2003e3cc 	.word	0x2003e3cc
   d439c:	000d5df1 	.word	0x000d5df1
   d43a0:	2003e330 	.word	0x2003e330
   d43a4:	000d5dfb 	.word	0x000d5dfb
   d43a8:	000d5e07 	.word	0x000d5e07
   d43ac:	000d5e13 	.word	0x000d5e13
   d43b0:	000d5e18 	.word	0x000d5e18
   d43b4:	000d5e2f 	.word	0x000d5e2f
   d43b8:	000d5e38 	.word	0x000d5e38
   d43bc:	000d5e4f 	.word	0x000d5e4f
   d43c0:	000d5e56 	.word	0x000d5e56
   d43c4:	000d5e6c 	.word	0x000d5e6c
   d43c8:	000d5e7b 	.word	0x000d5e7b
   d43cc:	000d5e91 	.word	0x000d5e91
   d43d0:	000d5e96 	.word	0x000d5e96
   d43d4:	2003e346 	.word	0x2003e346
   d43d8:	000d5eac 	.word	0x000d5eac

000d43dc <setup>:
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.

char carrierModeStr[16] = "Automatic";              // Default mode is Automatic
byte carrierMode = 0;                               // Default settings - automatic carrier selection

void setup() {
   d43dc:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d43de:	2204      	movs	r2, #4
   d43e0:	2300      	movs	r3, #0
   d43e2:	490e      	ldr	r1, [pc, #56]	; (d441c <setup+0x40>)
   d43e4:	480e      	ldr	r0, [pc, #56]	; (d4420 <setup+0x44>)
   d43e6:	f000 f98b 	bl	d4700 <spark_variable>
   d43ea:	2300      	movs	r3, #0
   d43ec:	2204      	movs	r2, #4
   d43ee:	490d      	ldr	r1, [pc, #52]	; (d4424 <setup+0x48>)
   d43f0:	480d      	ldr	r0, [pc, #52]	; (d4428 <setup+0x4c>)
   d43f2:	f000 f985 	bl	d4700 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d43f6:	4a0d      	ldr	r2, [pc, #52]	; (d442c <setup+0x50>)
   d43f8:	490d      	ldr	r1, [pc, #52]	; (d4430 <setup+0x54>)
   d43fa:	480e      	ldr	r0, [pc, #56]	; (d4434 <setup+0x58>)
   d43fc:	f000 fb1d 	bl	d4a3a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("carrierMode",carrierModeStr);
  Particle.variable("Version",currentPointRelease);

  Particle.function("setCarrierMode",setCarrierMode);

  carrierMode = EEPROM.read(carrierModeAddr);       // Load Carrier Mode from EEPROM and implement it
   d4400:	f001 fa8a 	bl	d5918 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4404:	4b0c      	ldr	r3, [pc, #48]	; (d4438 <setup+0x5c>)
   d4406:	7818      	ldrb	r0, [r3, #0]
   d4408:	f000 f89e 	bl	d4548 <HAL_EEPROM_Read>
   d440c:	4b0b      	ldr	r3, [pc, #44]	; (d443c <setup+0x60>)
   d440e:	7018      	strb	r0, [r3, #0]

  carrierSelectionMode(carrierMode);
   d4410:	f7ff ff60 	bl	d42d4 <_Z20carrierSelectionModeh>

  connectToParticle();
}
   d4414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  carrierMode = EEPROM.read(carrierModeAddr);       // Load Carrier Mode from EEPROM and implement it

  carrierSelectionMode(carrierMode);

  connectToParticle();
   d4418:	f7ff be56 	b.w	d40c8 <_Z17connectToParticlev>
   d441c:	2003e330 	.word	0x2003e330
   d4420:	000d5eb4 	.word	0x000d5eb4
   d4424:	2003e340 	.word	0x2003e340
   d4428:	000d5ec0 	.word	0x000d5ec0
   d442c:	000d5ec8 	.word	0x000d5ec8
   d4430:	000d4159 	.word	0x000d4159
   d4434:	000d4a0f 	.word	0x000d4a0f
   d4438:	2003e346 	.word	0x2003e346
   d443c:	2003e3c4 	.word	0x2003e3c4

000d4440 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4440:	4b15      	ldr	r3, [pc, #84]	; (d4498 <_GLOBAL__sub_I___appProductID+0x58>)
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4442:	b570      	push	{r4, r5, r6, lr}
   d4444:	2601      	movs	r6, #1
   d4446:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4448:	f000 f896 	bl	d4578 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d444c:	f001 fa4c 	bl	d58e8 <spark_protocol_instance>
   d4450:	2300      	movs	r3, #0
   d4452:	461a      	mov	r2, r3
   d4454:	f642 11d5 	movw	r1, #10709	; 0x29d5
   d4458:	f001 fa4e 	bl	d58f8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d445c:	f001 fa44 	bl	d58e8 <spark_protocol_instance>
   d4460:	2300      	movs	r3, #0

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4462:	4c0e      	ldr	r4, [pc, #56]	; (d449c <_GLOBAL__sub_I___appProductID+0x5c>)
   d4464:	461a      	mov	r2, r3
   d4466:	2125      	movs	r1, #37	; 0x25
   d4468:	f001 fa4e 	bl	d5908 <spark_protocol_set_product_firmware_version>
   d446c:	2500      	movs	r5, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d446e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4472:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4474:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4476:	6025      	str	r5, [r4, #0]
   d4478:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d447a:	71a5      	strb	r5, [r4, #6]
   d447c:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d447e:	f000 f903 	bl	d4688 <set_system_mode>

byte carrierModeAddr = 0x55;
// ***********************************************************


SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d4482:	4907      	ldr	r1, [pc, #28]	; (d44a0 <_GLOBAL__sub_I___appProductID+0x60>)
   d4484:	4a07      	ldr	r2, [pc, #28]	; (d44a4 <_GLOBAL__sub_I___appProductID+0x64>)
   d4486:	4620      	mov	r0, r4
   d4488:	f001 fa5a 	bl	d5940 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d448c:	4629      	mov	r1, r5
   d448e:	4630      	mov	r0, r6
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
   d4490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
byte carrierModeAddr = 0x55;
// ***********************************************************


SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4494:	f000 b908 	b.w	d46a8 <system_thread_set_state>
   d4498:	2003e3b4 	.word	0x2003e3b4
   d449c:	2003e3b8 	.word	0x2003e3b8
   d44a0:	000d40b3 	.word	0x000d40b3
   d44a4:	2003e3b0 	.word	0x2003e3b0

000d44a8 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <cellular_command+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030274 	.word	0x00030274

000d44b8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <os_thread_is_current+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	689b      	ldr	r3, [r3, #8]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030248 	.word	0x00030248

000d44c8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <os_thread_join+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	691b      	ldr	r3, [r3, #16]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030248 	.word	0x00030248

000d44d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <os_thread_cleanup+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030248 	.word	0x00030248

000d44e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <os_mutex_recursive_create+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030248 	.word	0x00030248

000d44f8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <os_mutex_recursive_destroy+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030248 	.word	0x00030248

000d4508 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_Core_System_Reset_Ex+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030234 	.word	0x00030234

000d4518 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_RNG_GetRandomNumber+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030218 	.word	0x00030218

000d4528 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030218 	.word	0x00030218

000d4538 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_EEPROM_Init+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030218 	.word	0x00030218

000d4548 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_EEPROM_Read+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030218 	.word	0x00030218

000d4558 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_EEPROM_Write+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030218 	.word	0x00030218

000d4568 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <hal_timer_millis+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030218 	.word	0x00030218

000d4578 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_Pin_Map+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	681b      	ldr	r3, [r3, #0]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003022c 	.word	0x0003022c

000d4588 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <inet_inet_ntop+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	695b      	ldr	r3, [r3, #20]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030264 	.word	0x00030264

000d4598 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <netdb_freeaddrinfo+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	689b      	ldr	r3, [r3, #8]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030268 	.word	0x00030268

000d45a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <netdb_getaddrinfo+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	68db      	ldr	r3, [r3, #12]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030268 	.word	0x00030268

000d45b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_USART_Init+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	681b      	ldr	r3, [r3, #0]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003023c 	.word	0x0003023c

000d45c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_USART_Write_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	68db      	ldr	r3, [r3, #12]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003023c 	.word	0x0003023c

000d45d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_USART_Available_Data+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	691b      	ldr	r3, [r3, #16]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USART_Read_Data+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	695b      	ldr	r3, [r3, #20]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USART_Peek_Data+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	699b      	ldr	r3, [r3, #24]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003023c 	.word	0x0003023c

000d4608 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USART_Flush_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	69db      	ldr	r3, [r3, #28]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Available_Data_For_Write+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Init+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	681b      	ldr	r3, [r3, #0]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Available_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USB_USART_Receive_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	699b      	ldr	r3, [r3, #24]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003024c 	.word	0x0003024c

000d4668 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USB_USART_Send_Data+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003024c 	.word	0x0003024c

000d4678 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USB_USART_Flush_Data+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a1b      	ldr	r3, [r3, #32]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003024c 	.word	0x0003024c

000d4688 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <set_system_mode+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	685b      	ldr	r3, [r3, #4]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030220 	.word	0x00030220

000d4698 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <system_delay_ms+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	695b      	ldr	r3, [r3, #20]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030220 	.word	0x00030220

000d46a8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <system_thread_set_state+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030220 	.word	0x00030220

000d46b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <application_thread_current+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030220 	.word	0x00030220

000d46c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <application_thread_invoke+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030220 	.word	0x00030220

000d46d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b03      	ldr	r3, [pc, #12]	; (d46e8 <system_ctrl_set_app_request_handler+0x10>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46e2:	9301      	str	r3, [sp, #4]
   d46e4:	bd08      	pop	{r3, pc}
   d46e6:	0000      	.short	0x0000
   d46e8:	00030220 	.word	0x00030220

000d46ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b03      	ldr	r3, [pc, #12]	; (d46fc <system_ctrl_set_result+0x10>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46f6:	9301      	str	r3, [sp, #4]
   d46f8:	bd08      	pop	{r3, pc}
   d46fa:	0000      	.short	0x0000
   d46fc:	00030220 	.word	0x00030220

000d4700 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <spark_variable+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	681b      	ldr	r3, [r3, #0]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030244 	.word	0x00030244

000d4710 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <spark_function+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	685b      	ldr	r3, [r3, #4]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030244 	.word	0x00030244

000d4720 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <spark_process+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	689b      	ldr	r3, [r3, #8]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030244 	.word	0x00030244

000d4730 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <spark_cloud_flag_connect+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	68db      	ldr	r3, [r3, #12]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030244 	.word	0x00030244

000d4740 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <spark_cloud_flag_connected+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030244 	.word	0x00030244

000d4750 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <spark_send_event+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6a1b      	ldr	r3, [r3, #32]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030244 	.word	0x00030244

000d4760 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030244 	.word	0x00030244

000d4770 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_connect+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_connecting+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	689b      	ldr	r3, [r3, #8]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_disconnect+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	68db      	ldr	r3, [r3, #12]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_ready+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	691b      	ldr	r3, [r3, #16]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_on+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	695b      	ldr	r3, [r3, #20]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_off+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_listen+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_listening+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a1b      	ldr	r3, [r3, #32]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_set_listen_timeout+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_get_listen_timeout+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <malloc+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	681b      	ldr	r3, [r3, #0]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003021c 	.word	0x0003021c

000d4820 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <free+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	685b      	ldr	r3, [r3, #4]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <realloc+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	689b      	ldr	r3, [r3, #8]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003021c 	.word	0x0003021c

000d4840 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <abort+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003021c 	.word	0x0003021c

000d4850 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <_malloc_r+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003021c 	.word	0x0003021c

000d4860 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4860:	2100      	movs	r1, #0
   d4862:	f7ff bf19 	b.w	d4698 <system_delay_ms>

000d4866 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4866:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4868:	6883      	ldr	r3, [r0, #8]
   d486a:	4604      	mov	r4, r0
   d486c:	b90b      	cbnz	r3, d4872 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d486e:	f001 f86e 	bl	d594e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4872:	68c3      	ldr	r3, [r0, #12]
   d4874:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4876:	68a3      	ldr	r3, [r4, #8]
   d4878:	b11b      	cbz	r3, d4882 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d487a:	2203      	movs	r2, #3
   d487c:	4621      	mov	r1, r4
   d487e:	4620      	mov	r0, r4
   d4880:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4882:	4620      	mov	r0, r4
   d4884:	2110      	movs	r1, #16
}
   d4886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d488a:	f001 b85e 	b.w	d594a <_ZdlPvj>

000d488e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d488e:	b510      	push	{r4, lr}
   d4890:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4892:	6800      	ldr	r0, [r0, #0]
   d4894:	b108      	cbz	r0, d489a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4896:	f7ff fe2f 	bl	d44f8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d489a:	4620      	mov	r0, r4
   d489c:	bd10      	pop	{r4, pc}

000d489e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d489e:	680b      	ldr	r3, [r1, #0]
   d48a0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48a2:	b113      	cbz	r3, d48aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48a4:	685a      	ldr	r2, [r3, #4]
   d48a6:	3201      	adds	r2, #1
   d48a8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48aa:	4770      	bx	lr

000d48ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48ac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48ae:	4c06      	ldr	r4, [pc, #24]	; (d48c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48b0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d48b2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48b4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d48b6:	f7ff fe17 	bl	d44e8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48ba:	4620      	mov	r0, r4
   d48bc:	4a03      	ldr	r2, [pc, #12]	; (d48cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48be:	4904      	ldr	r1, [pc, #16]	; (d48d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48c4:	f001 b83c 	b.w	d5940 <__aeabi_atexit>
   d48c8:	2003e3c8 	.word	0x2003e3c8
   d48cc:	2003e3b0 	.word	0x2003e3b0
   d48d0:	000d488f 	.word	0x000d488f

000d48d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d48d4:	2200      	movs	r2, #0
   d48d6:	4611      	mov	r1, r2
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	f7ff bf61 	b.w	d47a0 <network_ready>

000d48de <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48de:	2200      	movs	r2, #0
   d48e0:	4611      	mov	r1, r2
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff bf7c 	b.w	d47e0 <network_listening>

000d48e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	4611      	mov	r1, r2
   d48ec:	6840      	ldr	r0, [r0, #4]
   d48ee:	f7ff bf87 	b.w	d4800 <network_get_listen_timeout>

000d48f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48f2:	2200      	movs	r2, #0
   d48f4:	6840      	ldr	r0, [r0, #4]
   d48f6:	f7ff bf7b 	b.w	d47f0 <network_set_listen_timeout>

000d48fa <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48fa:	2200      	movs	r2, #0
   d48fc:	f081 0101 	eor.w	r1, r1, #1
   d4900:	6840      	ldr	r0, [r0, #4]
   d4902:	f7ff bf65 	b.w	d47d0 <network_listen>

000d4906 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4906:	2300      	movs	r3, #0
   d4908:	461a      	mov	r2, r3
   d490a:	4619      	mov	r1, r3
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	f7ff bf57 	b.w	d47c0 <network_off>

000d4912 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4912:	2300      	movs	r3, #0
   d4914:	461a      	mov	r2, r3
   d4916:	4619      	mov	r1, r3
   d4918:	6840      	ldr	r0, [r0, #4]
   d491a:	f7ff bf49 	b.w	d47b0 <network_on>

000d491e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d491e:	2200      	movs	r2, #0
   d4920:	4611      	mov	r1, r2
   d4922:	6840      	ldr	r0, [r0, #4]
   d4924:	f7ff bf2c 	b.w	d4780 <network_connecting>

000d4928 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4928:	2200      	movs	r2, #0
   d492a:	2102      	movs	r1, #2
   d492c:	6840      	ldr	r0, [r0, #4]
   d492e:	f7ff bf2f 	b.w	d4790 <network_disconnect>

000d4932 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4932:	2300      	movs	r3, #0
   d4934:	461a      	mov	r2, r3
   d4936:	6840      	ldr	r0, [r0, #4]
   d4938:	f7ff bf1a 	b.w	d4770 <network_connect>

000d493c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d493c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d493e:	4c08      	ldr	r4, [pc, #32]	; (d4960 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4940:	2528      	movs	r5, #40	; 0x28
   d4942:	462a      	mov	r2, r5
   d4944:	2100      	movs	r1, #0
   d4946:	4620      	mov	r0, r4
   d4948:	f001 f965 	bl	d5c16 <memset>
        cid = -1;
   d494c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4950:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4952:	4b04      	ldr	r3, [pc, #16]	; (d4964 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4954:	8025      	strh	r5, [r4, #0]
   d4956:	2204      	movs	r2, #4
   d4958:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d495a:	4a03      	ldr	r2, [pc, #12]	; (d4968 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d495c:	601a      	str	r2, [r3, #0]
   d495e:	bd38      	pop	{r3, r4, r5, pc}
   d4960:	2003e3d4 	.word	0x2003e3d4
   d4964:	2003e3cc 	.word	0x2003e3cc
   d4968:	000d5ee0 	.word	0x000d5ee0

000d496c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d496c:	4770      	bx	lr

000d496e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d496e:	2000      	movs	r0, #0
   d4970:	4770      	bx	lr

000d4972 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4972:	b510      	push	{r4, lr}
   d4974:	2110      	movs	r1, #16
   d4976:	4604      	mov	r4, r0
   d4978:	f000 ffe7 	bl	d594a <_ZdlPvj>
   d497c:	4620      	mov	r0, r4
   d497e:	bd10      	pop	{r4, pc}

000d4980 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4980:	b508      	push	{r3, lr}
      { delete this; }
   d4982:	b108      	cbz	r0, d4988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4984:	f7ff fff5 	bl	d4972 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4988:	bd08      	pop	{r3, pc}

000d498a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d498a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d498c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d498e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4990:	b113      	cbz	r3, d4998 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4992:	2203      	movs	r2, #3
   d4994:	4601      	mov	r1, r0
   d4996:	4798      	blx	r3
    }
   d4998:	4620      	mov	r0, r4
   d499a:	bd10      	pop	{r4, pc}

000d499c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d499c:	2200      	movs	r2, #0
   d499e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d49a0:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d49a2:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d49a6:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49a8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d49ac:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d49ae:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49b0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d49b2:	680c      	ldr	r4, [r1, #0]
   d49b4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d49b6:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d49b8:	bd10      	pop	{r4, pc}

000d49ba <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d49ba:	b510      	push	{r4, lr}
   d49bc:	4604      	mov	r4, r0
    free((void*)msg_);
   d49be:	6800      	ldr	r0, [r0, #0]
   d49c0:	f7ff ff2e 	bl	d4820 <free>
}
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd10      	pop	{r4, pc}

000d49c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d49c8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d49ca:	68c4      	ldr	r4, [r0, #12]
   d49cc:	b1f4      	cbz	r4, d4a0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d49ce:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d49d0:	2b02      	cmp	r3, #2
   d49d2:	d103      	bne.n	d49dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d49d4:	f104 000c 	add.w	r0, r4, #12
   d49d8:	f7ff ffef 	bl	d49ba <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d49dc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d49de:	b135      	cbz	r5, d49ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49e0:	4628      	mov	r0, r5
   d49e2:	f7ff ffd2 	bl	d498a <_ZNSt14_Function_baseD1Ev>
   d49e6:	2110      	movs	r1, #16
   d49e8:	4628      	mov	r0, r5
   d49ea:	f000 ffae 	bl	d594a <_ZdlPvj>
   d49ee:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d49f0:	b135      	cbz	r5, d4a00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d49f2:	4628      	mov	r0, r5
   d49f4:	f7ff ffc9 	bl	d498a <_ZNSt14_Function_baseD1Ev>
   d49f8:	2110      	movs	r1, #16
   d49fa:	4628      	mov	r0, r5
   d49fc:	f000 ffa5 	bl	d594a <_ZdlPvj>
   d4a00:	4620      	mov	r0, r4
   d4a02:	2114      	movs	r1, #20
   d4a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a08:	f000 bf9f 	b.w	d594a <_ZdlPvj>
   d4a0c:	bd38      	pop	{r3, r4, r5, pc}

000d4a0e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4a0e:	b510      	push	{r4, lr}
   d4a10:	b088      	sub	sp, #32
   d4a12:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a14:	4668      	mov	r0, sp
   d4a16:	f000 fd72 	bl	d54fe <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4a1a:	4669      	mov	r1, sp
   d4a1c:	a804      	add	r0, sp, #16
   d4a1e:	f000 fd90 	bl	d5542 <_ZN6StringC1ERKS_>
   d4a22:	a804      	add	r0, sp, #16
   d4a24:	47a0      	blx	r4
   d4a26:	4604      	mov	r4, r0
   d4a28:	a804      	add	r0, sp, #16
   d4a2a:	f000 fd21 	bl	d5470 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a2e:	4668      	mov	r0, sp
   d4a30:	f000 fd1e 	bl	d5470 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4a34:	4620      	mov	r0, r4
   d4a36:	b008      	add	sp, #32
   d4a38:	bd10      	pop	{r4, pc}

000d4a3a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4a3c:	2410      	movs	r4, #16
   d4a3e:	b085      	sub	sp, #20
   d4a40:	4607      	mov	r7, r0
   d4a42:	460e      	mov	r6, r1
   d4a44:	4615      	mov	r5, r2
   d4a46:	2100      	movs	r1, #0
   d4a48:	4622      	mov	r2, r4
   d4a4a:	4668      	mov	r0, sp
   d4a4c:	f001 f8e3 	bl	d5c16 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a50:	2200      	movs	r2, #0
   d4a52:	4669      	mov	r1, sp
   d4a54:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4a56:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4a5a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4a5c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4a5e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a60:	f7ff fe56 	bl	d4710 <spark_function>
}
   d4a64:	b005      	add	sp, #20
   d4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a68:	b513      	push	{r0, r1, r4, lr}
   d4a6a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a6c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a70:	2300      	movs	r3, #0
   d4a72:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a74:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4a76:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4a78:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a7a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4a7c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a7e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a80:	f7ff fb54 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a84:	4620      	mov	r0, r4
   d4a86:	b002      	add	sp, #8
   d4a88:	bd10      	pop	{r4, pc}

000d4a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a8c:	460c      	mov	r4, r1
   d4a8e:	ad02      	add	r5, sp, #8
   d4a90:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a94:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a98:	4606      	mov	r6, r0
   d4a9a:	460f      	mov	r7, r1
   d4a9c:	a801      	add	r0, sp, #4
   d4a9e:	4621      	mov	r1, r4
   d4aa0:	f7ff fefd 	bl	d489e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4aa4:	4629      	mov	r1, r5
   d4aa6:	4630      	mov	r0, r6
   d4aa8:	f7ff ffde 	bl	d4a68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aac:	a801      	add	r0, sp, #4
   d4aae:	f7ff fb3d 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff fb3a 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4ab8:	4638      	mov	r0, r7
   d4aba:	2108      	movs	r1, #8
   d4abc:	f000 ff45 	bl	d594a <_ZdlPvj>
        return p;
    }
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	b003      	add	sp, #12
   d4ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ac6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ac6:	b513      	push	{r0, r1, r4, lr}
   d4ac8:	460b      	mov	r3, r1
   d4aca:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4acc:	c803      	ldmia	r0, {r0, r1}
   d4ace:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ad6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ada:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ade:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ae2:	b002      	add	sp, #8
   d4ae4:	bd10      	pop	{r4, pc}
	...

000d4ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ae8:	b538      	push	{r3, r4, r5, lr}
   d4aea:	2300      	movs	r3, #0
   d4aec:	4604      	mov	r4, r0
   d4aee:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4af0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4af2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4af4:	f7ff facf 	bl	d4096 <_Znwj>
   d4af8:	b128      	cbz	r0, d4b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4afa:	2301      	movs	r3, #1
   d4afc:	6043      	str	r3, [r0, #4]
   d4afe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b00:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4b02:	6003      	str	r3, [r0, #0]
   d4b04:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b06:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4b08:	4620      	mov	r0, r4
   d4b0a:	bd38      	pop	{r3, r4, r5, pc}
   d4b0c:	000d5f14 	.word	0x000d5f14

000d4b10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b14:	b90a      	cbnz	r2, d4b1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4b16:	f000 ff1a 	bl	d594e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b1a:	68c3      	ldr	r3, [r0, #12]
    }
   d4b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b20:	4718      	bx	r3

000d4b22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b26:	f100 0110 	add.w	r1, r0, #16
   d4b2a:	f7ff fff1 	bl	d4b10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b2e:	bd08      	pop	{r3, pc}

000d4b30 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b30:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b32:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b34:	b90a      	cbnz	r2, d4b3a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4b36:	f000 ff0a 	bl	d594e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b3a:	68c3      	ldr	r3, [r0, #12]
    }
   d4b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b40:	4718      	bx	r3

000d4b42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b42:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b44:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b46:	f100 0110 	add.w	r1, r0, #16
   d4b4a:	f7ff fff1 	bl	d4b30 <_ZNKSt8functionIFvRKbEEclES1_>
   d4b4e:	bd08      	pop	{r3, pc}

000d4b50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b50:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b52:	2300      	movs	r3, #0
   d4b54:	6083      	str	r3, [r0, #8]
   d4b56:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b58:	4604      	mov	r4, r0
   d4b5a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b5c:	b12b      	cbz	r3, d4b6a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b5e:	2202      	movs	r2, #2
   d4b60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b62:	68eb      	ldr	r3, [r5, #12]
   d4b64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b66:	68ab      	ldr	r3, [r5, #8]
   d4b68:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b72:	b089      	sub	sp, #36	; 0x24
   d4b74:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4b76:	4668      	mov	r0, sp
   d4b78:	f7ff ff10 	bl	d499c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b7c:	2300      	movs	r3, #0
   d4b7e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b82:	f04f 0202 	mov.w	r2, #2
   d4b86:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b8a:	2b00      	cmp	r3, #0
   d4b8c:	d103      	bne.n	d4b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b8e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b92:	2900      	cmp	r1, #0
   d4b94:	d1f7      	bne.n	d4b86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4b96:	d002      	beq.n	d4b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4b98:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b9c:	e063      	b.n	d4c66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4b9e:	f114 050c 	adds.w	r5, r4, #12
   d4ba2:	d003      	beq.n	d4bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4ba4:	4669      	mov	r1, sp
   d4ba6:	4628      	mov	r0, r5
   d4ba8:	f7ff fef8 	bl	d499c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4bac:	f3bf 8f5f 	dmb	sy
   d4bb0:	2301      	movs	r3, #1
   d4bb2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4bb4:	2000      	movs	r0, #0
   d4bb6:	f104 0308 	add.w	r3, r4, #8
   d4bba:	f3bf 8f5f 	dmb	sy
   d4bbe:	e853 6f00 	ldrex	r6, [r3]
   d4bc2:	e843 0200 	strex	r2, r0, [r3]
   d4bc6:	2a00      	cmp	r2, #0
   d4bc8:	d1f9      	bne.n	d4bbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4bca:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4bce:	2e00      	cmp	r6, #0
   d4bd0:	d049      	beq.n	d4c66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4bd2:	f7ff fd71 	bl	d46b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4bd6:	b120      	cbz	r0, d4be2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4bd8:	4629      	mov	r1, r5
   d4bda:	4630      	mov	r0, r6
   d4bdc:	f7ff ff98 	bl	d4b10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4be0:	e03a      	b.n	d4c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4be2:	4631      	mov	r1, r6
   d4be4:	a802      	add	r0, sp, #8
   d4be6:	f7ff ffb3 	bl	d4b50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bea:	68e0      	ldr	r0, [r4, #12]
   d4bec:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bf0:	b108      	cbz	r0, d4bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4bf2:	f001 f853 	bl	d5c9c <strdup>
   d4bf6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4bf8:	2010      	movs	r0, #16
   d4bfa:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4bfe:	f7ff fa4a 	bl	d4096 <_Znwj>
   d4c02:	4605      	mov	r5, r0
   d4c04:	b1e8      	cbz	r0, d4c42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c06:	2700      	movs	r7, #0
   d4c08:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c0a:	2018      	movs	r0, #24
   d4c0c:	f7ff fa43 	bl	d4096 <_Znwj>
   d4c10:	4604      	mov	r4, r0
   d4c12:	b188      	cbz	r0, d4c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c14:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c16:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c18:	a802      	add	r0, sp, #8
   d4c1a:	f7ff ff54 	bl	d4ac6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c1e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c22:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c24:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c26:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c28:	a906      	add	r1, sp, #24
   d4c2a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c2c:	60e3      	str	r3, [r4, #12]
   d4c2e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c32:	9205      	str	r2, [sp, #20]
   d4c34:	f7ff feb2 	bl	d499c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c38:	4b0d      	ldr	r3, [pc, #52]	; (d4c70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4c3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c3c:	4b0d      	ldr	r3, [pc, #52]	; (d4c74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c40:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4c42:	a806      	add	r0, sp, #24
   d4c44:	f7ff feb9 	bl	d49ba <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c48:	a802      	add	r0, sp, #8
   d4c4a:	f7ff fe9e 	bl	d498a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c4e:	2200      	movs	r2, #0
   d4c50:	4629      	mov	r1, r5
   d4c52:	4809      	ldr	r0, [pc, #36]	; (d4c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4c54:	f7ff fd38 	bl	d46c8 <application_thread_invoke>
   d4c58:	4630      	mov	r0, r6
   d4c5a:	f7ff fe96 	bl	d498a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c5e:	2110      	movs	r1, #16
   d4c60:	4630      	mov	r0, r6
   d4c62:	f000 fe72 	bl	d594a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4c66:	4668      	mov	r0, sp
   d4c68:	f7ff fea7 	bl	d49ba <_ZN8particle5ErrorD1Ev>
    }
   d4c6c:	b009      	add	sp, #36	; 0x24
   d4c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c70:	000d4b23 	.word	0x000d4b23
   d4c74:	000d4d99 	.word	0x000d4d99
   d4c78:	000d4867 	.word	0x000d4867

000d4c7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c80:	b08b      	sub	sp, #44	; 0x2c
   d4c82:	4606      	mov	r6, r0
   d4c84:	460f      	mov	r7, r1
   d4c86:	4690      	mov	r8, r2
   d4c88:	4699      	mov	r9, r3
   d4c8a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c8e:	f7ff fd57 	bl	d4740 <spark_cloud_flag_connected>
   d4c92:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4c94:	4683      	mov	fp, r0
   d4c96:	bb30      	cbnz	r0, d4ce6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c98:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4c9c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c9e:	a905      	add	r1, sp, #20
   d4ca0:	4628      	mov	r0, r5
   d4ca2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ca6:	f7ff fe79 	bl	d499c <_ZN8particle5ErrorC1EOS0_>
   d4caa:	2014      	movs	r0, #20
   d4cac:	f7ff f9f3 	bl	d4096 <_Znwj>
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	b158      	cbz	r0, d4ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4cb4:	2302      	movs	r3, #2
   d4cb6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cb8:	2301      	movs	r3, #1
   d4cba:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cbc:	f8c0 b004 	str.w	fp, [r0, #4]
   d4cc0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4cc4:	4629      	mov	r1, r5
   d4cc6:	300c      	adds	r0, #12
   d4cc8:	f7ff fe68 	bl	d499c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4ccc:	4630      	mov	r0, r6
   d4cce:	4621      	mov	r1, r4
   d4cd0:	f840 4b04 	str.w	r4, [r0], #4
   d4cd4:	f7ff ff08 	bl	d4ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f7ff fe6e 	bl	d49ba <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4cde:	a805      	add	r0, sp, #20
   d4ce0:	f7ff fe6b 	bl	d49ba <_ZN8particle5ErrorD1Ev>
   d4ce4:	e052      	b.n	d4d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ce6:	2400      	movs	r4, #0
   d4ce8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4cea:	2014      	movs	r0, #20
   d4cec:	606c      	str	r4, [r5, #4]
   d4cee:	60ac      	str	r4, [r5, #8]
   d4cf0:	9307      	str	r3, [sp, #28]
   d4cf2:	f7ff f9d0 	bl	d4096 <_Znwj>
   d4cf6:	4601      	mov	r1, r0
   d4cf8:	b118      	cbz	r0, d4d02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4cfa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cfc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cfe:	6044      	str	r4, [r0, #4]
   d4d00:	6084      	str	r4, [r0, #8]
   d4d02:	a804      	add	r0, sp, #16
   d4d04:	9103      	str	r1, [sp, #12]
   d4d06:	f7ff feef 	bl	d4ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4d0a:	4b22      	ldr	r3, [pc, #136]	; (d4d94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4d0c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4d0e:	2008      	movs	r0, #8
   d4d10:	f7ff f9c1 	bl	d4096 <_Znwj>
   d4d14:	4604      	mov	r4, r0
   d4d16:	b128      	cbz	r0, d4d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d18:	9b03      	ldr	r3, [sp, #12]
   d4d1a:	f840 3b04 	str.w	r3, [r0], #4
   d4d1e:	a904      	add	r1, sp, #16
   d4d20:	f7ff fdbd 	bl	d489e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d24:	9500      	str	r5, [sp, #0]
   d4d26:	fa5f f38a 	uxtb.w	r3, sl
   d4d2a:	464a      	mov	r2, r9
   d4d2c:	4641      	mov	r1, r8
   d4d2e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4d30:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d32:	f7ff fd0d 	bl	d4750 <spark_send_event>
   d4d36:	b920      	cbnz	r0, d4d42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4d38:	9b03      	ldr	r3, [sp, #12]
   d4d3a:	785b      	ldrb	r3, [r3, #1]
   d4d3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d40:	b183      	cbz	r3, d4d64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4d42:	9b03      	ldr	r3, [sp, #12]
   d4d44:	9305      	str	r3, [sp, #20]
   d4d46:	a904      	add	r1, sp, #16
   d4d48:	a806      	add	r0, sp, #24
   d4d4a:	f7ff fda8 	bl	d489e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d4e:	a905      	add	r1, sp, #20
   d4d50:	4630      	mov	r0, r6
   d4d52:	f7ff fe89 	bl	d4a68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d56:	a806      	add	r0, sp, #24
   d4d58:	f7ff f9e8 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d5c:	a804      	add	r0, sp, #16
   d4d5e:	f7ff f9e5 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d62:	e013      	b.n	d4d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4d64:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4d68:	a905      	add	r1, sp, #20
   d4d6a:	a803      	add	r0, sp, #12
   d4d6c:	9205      	str	r2, [sp, #20]
   d4d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d72:	f7ff fefd 	bl	d4b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4d76:	a805      	add	r0, sp, #20
   d4d78:	f7ff fe1f 	bl	d49ba <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d7c:	a805      	add	r0, sp, #20
   d4d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d80:	f7ff fe83 	bl	d4a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d84:	a806      	add	r0, sp, #24
   d4d86:	f7ff f9d1 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d8a:	e7da      	b.n	d4d42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4d8c:	4630      	mov	r0, r6
   d4d8e:	b00b      	add	sp, #44	; 0x2c
   d4d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d94:	000d4f09 	.word	0x000d4f09

000d4d98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d98:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d9c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d9e:	d006      	beq.n	d4dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4da0:	2a03      	cmp	r2, #3
   d4da2:	d017      	beq.n	d4dd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4da4:	2a01      	cmp	r2, #1
   d4da6:	d122      	bne.n	d4dee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4da8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4daa:	6003      	str	r3, [r0, #0]
	      break;
   d4dac:	e01f      	b.n	d4dee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dae:	2018      	movs	r0, #24
   d4db0:	680e      	ldr	r6, [r1, #0]
   d4db2:	f7ff f970 	bl	d4096 <_Znwj>
   d4db6:	4605      	mov	r5, r0
   d4db8:	b150      	cbz	r0, d4dd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4dba:	4631      	mov	r1, r6
   d4dbc:	f7ff fec8 	bl	d4b50 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4dc0:	6930      	ldr	r0, [r6, #16]
   d4dc2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dc6:	b108      	cbz	r0, d4dcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4dc8:	f000 ff68 	bl	d5c9c <strdup>
   d4dcc:	6128      	str	r0, [r5, #16]
   d4dce:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dd0:	6025      	str	r5, [r4, #0]
   d4dd2:	e00c      	b.n	d4dee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4dd4:	6804      	ldr	r4, [r0, #0]
   d4dd6:	b154      	cbz	r4, d4dee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4dd8:	f104 0010 	add.w	r0, r4, #16
   d4ddc:	f7ff fded 	bl	d49ba <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4de0:	4620      	mov	r0, r4
   d4de2:	f7ff fdd2 	bl	d498a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4de6:	2118      	movs	r1, #24
   d4de8:	4620      	mov	r0, r4
   d4dea:	f000 fdae 	bl	d594a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4dee:	2000      	movs	r0, #0
   d4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4df2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4df2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4df4:	2300      	movs	r3, #0
   d4df6:	6083      	str	r3, [r0, #8]
   d4df8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dfa:	4604      	mov	r4, r0
   d4dfc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4dfe:	b12b      	cbz	r3, d4e0c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e00:	2202      	movs	r2, #2
   d4e02:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e04:	68eb      	ldr	r3, [r5, #12]
   d4e06:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e08:	68ab      	ldr	r3, [r5, #8]
   d4e0a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	bd38      	pop	{r3, r4, r5, pc}

000d4e10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e10:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e12:	b570      	push	{r4, r5, r6, lr}
   d4e14:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e16:	d006      	beq.n	d4e26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4e18:	2a03      	cmp	r2, #3
   d4e1a:	d011      	beq.n	d4e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4e1c:	2a01      	cmp	r2, #1
   d4e1e:	d118      	bne.n	d4e52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e20:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e22:	6003      	str	r3, [r0, #0]
	      break;
   d4e24:	e015      	b.n	d4e52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e26:	2014      	movs	r0, #20
   d4e28:	680e      	ldr	r6, [r1, #0]
   d4e2a:	f7ff f934 	bl	d4096 <_Znwj>
   d4e2e:	4605      	mov	r5, r0
   d4e30:	b120      	cbz	r0, d4e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e32:	4631      	mov	r1, r6
   d4e34:	f7ff ffdd 	bl	d4df2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4e38:	7c33      	ldrb	r3, [r6, #16]
   d4e3a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e3c:	6025      	str	r5, [r4, #0]
   d4e3e:	e008      	b.n	d4e52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e40:	6804      	ldr	r4, [r0, #0]
   d4e42:	b134      	cbz	r4, d4e52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e44:	4620      	mov	r0, r4
   d4e46:	f7ff fda0 	bl	d498a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e4a:	2114      	movs	r1, #20
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f000 fd7c 	bl	d594a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e52:	2000      	movs	r0, #0
   d4e54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4e58:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e5a:	2300      	movs	r3, #0
   d4e5c:	b087      	sub	sp, #28
   d4e5e:	460c      	mov	r4, r1
   d4e60:	f3bf 8f5f 	dmb	sy
   d4e64:	e850 6f00 	ldrex	r6, [r0]
   d4e68:	e840 3200 	strex	r2, r3, [r0]
   d4e6c:	2a00      	cmp	r2, #0
   d4e6e:	d1f9      	bne.n	d4e64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e70:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e74:	2e00      	cmp	r6, #0
   d4e76:	d03f      	beq.n	d4ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e78:	4618      	mov	r0, r3
   d4e7a:	f7ff fc1d 	bl	d46b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e7e:	4607      	mov	r7, r0
   d4e80:	b120      	cbz	r0, d4e8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e82:	4621      	mov	r1, r4
   d4e84:	4630      	mov	r0, r6
   d4e86:	f7ff fe53 	bl	d4b30 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e8a:	e02e      	b.n	d4eea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e8c:	4631      	mov	r1, r6
   d4e8e:	a801      	add	r0, sp, #4
   d4e90:	f7ff ffaf 	bl	d4df2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e94:	7823      	ldrb	r3, [r4, #0]
   d4e96:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e9a:	2010      	movs	r0, #16
   d4e9c:	f7ff f8fb 	bl	d4096 <_Znwj>
   d4ea0:	4605      	mov	r5, r0
   d4ea2:	b1d0      	cbz	r0, d4eda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ea4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ea6:	2014      	movs	r0, #20
   d4ea8:	f7ff f8f5 	bl	d4096 <_Znwj>
   d4eac:	4604      	mov	r4, r0
   d4eae:	b178      	cbz	r0, d4ed0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eb0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4eb2:	4601      	mov	r1, r0
   d4eb4:	a801      	add	r0, sp, #4
   d4eb6:	f7ff fe06 	bl	d4ac6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ebc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ebe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ec2:	9203      	str	r2, [sp, #12]
   d4ec4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ec6:	60e3      	str	r3, [r4, #12]
   d4ec8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ecc:	9204      	str	r2, [sp, #16]
   d4ece:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ed0:	4b0a      	ldr	r3, [pc, #40]	; (d4efc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4ed2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ed4:	4b0a      	ldr	r3, [pc, #40]	; (d4f00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ed6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ed8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4eda:	a801      	add	r0, sp, #4
   d4edc:	f7ff fd55 	bl	d498a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	4629      	mov	r1, r5
   d4ee4:	4807      	ldr	r0, [pc, #28]	; (d4f04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4ee6:	f7ff fbef 	bl	d46c8 <application_thread_invoke>
   d4eea:	4630      	mov	r0, r6
   d4eec:	f7ff fd4d 	bl	d498a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ef0:	2110      	movs	r1, #16
   d4ef2:	4630      	mov	r0, r6
   d4ef4:	f000 fd29 	bl	d594a <_ZdlPvj>
        }
    }
   d4ef8:	b007      	add	sp, #28
   d4efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4efc:	000d4b43 	.word	0x000d4b43
   d4f00:	000d4e11 	.word	0x000d4e11
   d4f04:	000d4867 	.word	0x000d4867

000d4f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4f08:	b530      	push	{r4, r5, lr}
   d4f0a:	b085      	sub	sp, #20
   d4f0c:	4604      	mov	r4, r0
   d4f0e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f10:	4668      	mov	r0, sp
   d4f12:	4611      	mov	r1, r2
   d4f14:	f7ff fdb9 	bl	d4a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f18:	b17c      	cbz	r4, d4f3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f1a:	b224      	sxth	r4, r4
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	b10d      	cbz	r5, d4f24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4f20:	f000 febc 	bl	d5c9c <strdup>
   d4f24:	9002      	str	r0, [sp, #8]
   d4f26:	a902      	add	r1, sp, #8
   d4f28:	4668      	mov	r0, sp
   d4f2a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4f2e:	f7ff fe1f 	bl	d4b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f32:	a802      	add	r0, sp, #8
   d4f34:	f7ff fd41 	bl	d49ba <_ZN8particle5ErrorD1Ev>
   d4f38:	e01d      	b.n	d4f76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4f3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f3c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f40:	f04f 0201 	mov.w	r2, #1
   d4f44:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4f48:	42a3      	cmp	r3, r4
   d4f4a:	d103      	bne.n	d4f54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4f4c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4f50:	2900      	cmp	r1, #0
   d4f52:	d1f7      	bne.n	d4f44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4f54:	d002      	beq.n	d4f5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4f56:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f5a:	e00c      	b.n	d4f76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f5c:	f110 010c 	adds.w	r1, r0, #12
   d4f60:	f04f 0301 	mov.w	r3, #1
   d4f64:	bf18      	it	ne
   d4f66:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f68:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f6c:	3004      	adds	r0, #4
   d4f6e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f72:	f7ff ff71 	bl	d4e58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f76:	a801      	add	r0, sp, #4
   d4f78:	f7ff f8d8 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f7c:	b005      	add	sp, #20
   d4f7e:	bd30      	pop	{r4, r5, pc}

000d4f80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f80:	2200      	movs	r2, #0
   d4f82:	4611      	mov	r1, r2
   d4f84:	6840      	ldr	r0, [r0, #4]
   d4f86:	f7ff bc2b 	b.w	d47e0 <network_listening>

000d4f8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f8a:	2200      	movs	r2, #0
   d4f8c:	4611      	mov	r1, r2
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	f7ff bc36 	b.w	d4800 <network_get_listen_timeout>

000d4f94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f94:	2200      	movs	r2, #0
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff bc2a 	b.w	d47f0 <network_set_listen_timeout>

000d4f9c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f9c:	2200      	movs	r2, #0
   d4f9e:	f081 0101 	eor.w	r1, r1, #1
   d4fa2:	6840      	ldr	r0, [r0, #4]
   d4fa4:	f7ff bc14 	b.w	d47d0 <network_listen>

000d4fa8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4fa8:	2300      	movs	r3, #0
   d4faa:	461a      	mov	r2, r3
   d4fac:	4619      	mov	r1, r3
   d4fae:	6840      	ldr	r0, [r0, #4]
   d4fb0:	f7ff bc06 	b.w	d47c0 <network_off>

000d4fb4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4fb4:	2300      	movs	r3, #0
   d4fb6:	461a      	mov	r2, r3
   d4fb8:	4619      	mov	r1, r3
   d4fba:	6840      	ldr	r0, [r0, #4]
   d4fbc:	f7ff bbf8 	b.w	d47b0 <network_on>

000d4fc0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4fc0:	2200      	movs	r2, #0
   d4fc2:	4611      	mov	r1, r2
   d4fc4:	6840      	ldr	r0, [r0, #4]
   d4fc6:	f7ff bbeb 	b.w	d47a0 <network_ready>

000d4fca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4fca:	2200      	movs	r2, #0
   d4fcc:	4611      	mov	r1, r2
   d4fce:	6840      	ldr	r0, [r0, #4]
   d4fd0:	f7ff bbd6 	b.w	d4780 <network_connecting>

000d4fd4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	2102      	movs	r1, #2
   d4fd8:	6840      	ldr	r0, [r0, #4]
   d4fda:	f7ff bbd9 	b.w	d4790 <network_disconnect>

000d4fde <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fde:	2300      	movs	r3, #0
   d4fe0:	461a      	mov	r2, r3
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff bbc4 	b.w	d4770 <network_connect>

000d4fe8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4fe8:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4fea:	2203      	movs	r2, #3
   d4fec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4fee:	4a02      	ldr	r2, [pc, #8]	; (d4ff8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ff0:	601a      	str	r2, [r3, #0]
   d4ff2:	4770      	bx	lr
   d4ff4:	2003e3fc 	.word	0x2003e3fc
   d4ff8:	000d5f30 	.word	0x000d5f30

000d4ffc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4ffc:	4770      	bx	lr

000d4ffe <_ZN9IPAddressD0Ev>:
   d4ffe:	b510      	push	{r4, lr}
   d5000:	2118      	movs	r1, #24
   d5002:	4604      	mov	r4, r0
   d5004:	f000 fca1 	bl	d594a <_ZdlPvj>
   d5008:	4620      	mov	r0, r4
   d500a:	bd10      	pop	{r4, pc}

000d500c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d500c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d500e:	7d03      	ldrb	r3, [r0, #20]
   d5010:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5012:	b08d      	sub	sp, #52	; 0x34
   d5014:	460e      	mov	r6, r1
   d5016:	f100 0704 	add.w	r7, r0, #4
   d501a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d501e:	d002      	beq.n	d5026 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5020:	f100 0508 	add.w	r5, r0, #8
   d5024:	e018      	b.n	d5058 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5026:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5028:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d502a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d502e:	232f      	movs	r3, #47	; 0x2f
   d5030:	462a      	mov	r2, r5
   d5032:	200a      	movs	r0, #10
   d5034:	f7ff faa8 	bl	d4588 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5038:	4628      	mov	r0, r5
   d503a:	f000 fe4a 	bl	d5cd2 <strlen>
   d503e:	6833      	ldr	r3, [r6, #0]
   d5040:	4602      	mov	r2, r0
   d5042:	68db      	ldr	r3, [r3, #12]
   d5044:	4629      	mov	r1, r5
   d5046:	4630      	mov	r0, r6
   d5048:	4798      	blx	r3
   d504a:	e00f      	b.n	d506c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d504c:	b124      	cbz	r4, d5058 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d504e:	212e      	movs	r1, #46	; 0x2e
   d5050:	4630      	mov	r0, r6
   d5052:	f000 f9d5 	bl	d5400 <_ZN5Print5printEc>
   d5056:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5058:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d505c:	220a      	movs	r2, #10
   d505e:	4630      	mov	r0, r6
   d5060:	f000 f9d1 	bl	d5406 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5064:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5066:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5068:	d1f0      	bne.n	d504c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d506a:	4620      	mov	r0, r4
    }
    return n;
}
   d506c:	b00d      	add	sp, #52	; 0x34
   d506e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5070 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5070:	b510      	push	{r4, lr}
   d5072:	4b05      	ldr	r3, [pc, #20]	; (d5088 <_ZN9IPAddressC1Ev+0x18>)
   d5074:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5076:	2211      	movs	r2, #17
   d5078:	f840 3b04 	str.w	r3, [r0], #4
   d507c:	2100      	movs	r1, #0
   d507e:	f000 fdca 	bl	d5c16 <memset>
{
    clear();
}
   d5082:	4620      	mov	r0, r4
   d5084:	bd10      	pop	{r4, pc}
   d5086:	bf00      	nop
   d5088:	000d5f64 	.word	0x000d5f64

000d508c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d508c:	4603      	mov	r3, r0
   d508e:	4a07      	ldr	r2, [pc, #28]	; (d50ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5090:	b510      	push	{r4, lr}
   d5092:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5096:	f101 0210 	add.w	r2, r1, #16
   d509a:	f851 4b04 	ldr.w	r4, [r1], #4
   d509e:	f843 4b04 	str.w	r4, [r3], #4
   d50a2:	4291      	cmp	r1, r2
   d50a4:	d1f9      	bne.n	d509a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50a6:	780a      	ldrb	r2, [r1, #0]
   d50a8:	701a      	strb	r2, [r3, #0]
}
   d50aa:	bd10      	pop	{r4, pc}
   d50ac:	000d5f64 	.word	0x000d5f64

000d50b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d50c2:	2304      	movs	r3, #4
   d50c4:	6041      	str	r1, [r0, #4]
   d50c6:	7503      	strb	r3, [r0, #20]
   d50c8:	bd10      	pop	{r4, pc}

000d50ca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d50ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d50cc:	780d      	ldrb	r5, [r1, #0]
   d50ce:	788b      	ldrb	r3, [r1, #2]
   d50d0:	784a      	ldrb	r2, [r1, #1]
   d50d2:	78c9      	ldrb	r1, [r1, #3]
   d50d4:	9100      	str	r1, [sp, #0]
   d50d6:	4629      	mov	r1, r5
   d50d8:	f7ff ffea 	bl	d50b0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d50dc:	b003      	add	sp, #12
   d50de:	bd30      	pop	{r4, r5, pc}

000d50e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50e0:	4b01      	ldr	r3, [pc, #4]	; (d50e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50e2:	4a02      	ldr	r2, [pc, #8]	; (d50ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50e4:	601a      	str	r2, [r3, #0]
   d50e6:	4770      	bx	lr
   d50e8:	2003e404 	.word	0x2003e404
   d50ec:	000d5fe3 	.word	0x000d5fe3

000d50f0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50f0:	2200      	movs	r2, #0
   d50f2:	4611      	mov	r1, r2
   d50f4:	6840      	ldr	r0, [r0, #4]
   d50f6:	f7ff bb73 	b.w	d47e0 <network_listening>

000d50fa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50fa:	2200      	movs	r2, #0
   d50fc:	4611      	mov	r1, r2
   d50fe:	6840      	ldr	r0, [r0, #4]
   d5100:	f7ff bb7e 	b.w	d4800 <network_get_listen_timeout>

000d5104 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5104:	2200      	movs	r2, #0
   d5106:	6840      	ldr	r0, [r0, #4]
   d5108:	f7ff bb72 	b.w	d47f0 <network_set_listen_timeout>

000d510c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d510c:	2200      	movs	r2, #0
   d510e:	f081 0101 	eor.w	r1, r1, #1
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff bb5c 	b.w	d47d0 <network_listen>

000d5118 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5118:	2300      	movs	r3, #0
   d511a:	461a      	mov	r2, r3
   d511c:	2101      	movs	r1, #1
   d511e:	6840      	ldr	r0, [r0, #4]
   d5120:	f7ff bb4e 	b.w	d47c0 <network_off>

000d5124 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5124:	2300      	movs	r3, #0
   d5126:	461a      	mov	r2, r3
   d5128:	4619      	mov	r1, r3
   d512a:	6840      	ldr	r0, [r0, #4]
   d512c:	f7ff bb40 	b.w	d47b0 <network_on>

000d5130 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5130:	2200      	movs	r2, #0
   d5132:	4611      	mov	r1, r2
   d5134:	6840      	ldr	r0, [r0, #4]
   d5136:	f7ff bb33 	b.w	d47a0 <network_ready>

000d513a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d513a:	2200      	movs	r2, #0
   d513c:	4611      	mov	r1, r2
   d513e:	6840      	ldr	r0, [r0, #4]
   d5140:	f7ff bb1e 	b.w	d4780 <network_connecting>

000d5144 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5144:	2200      	movs	r2, #0
   d5146:	2102      	movs	r1, #2
   d5148:	6840      	ldr	r0, [r0, #4]
   d514a:	f7ff bb21 	b.w	d4790 <network_disconnect>

000d514e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d514e:	2300      	movs	r3, #0
   d5150:	461a      	mov	r2, r3
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	f7ff bb0c 	b.w	d4770 <network_connect>

000d5158 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5158:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d515a:	4605      	mov	r5, r0
   d515c:	b188      	cbz	r0, d5182 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d515e:	6804      	ldr	r4, [r0, #0]
   d5160:	b14c      	cbz	r4, d5176 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5162:	68a3      	ldr	r3, [r4, #8]
   d5164:	b11b      	cbz	r3, d516e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5166:	2203      	movs	r2, #3
   d5168:	4621      	mov	r1, r4
   d516a:	4620      	mov	r0, r4
   d516c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d516e:	2110      	movs	r1, #16
   d5170:	4620      	mov	r0, r4
   d5172:	f000 fbea 	bl	d594a <_ZdlPvj>
   d5176:	4628      	mov	r0, r5
   d5178:	2114      	movs	r1, #20
      }
   d517a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d517e:	f000 bbe4 	b.w	d594a <_ZdlPvj>
   d5182:	bd38      	pop	{r3, r4, r5, pc}

000d5184 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5184:	b110      	cbz	r0, d518c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5186:	6803      	ldr	r3, [r0, #0]
   d5188:	685b      	ldr	r3, [r3, #4]
   d518a:	4718      	bx	r3
   d518c:	4770      	bx	lr

000d518e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d518e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5190:	6803      	ldr	r3, [r0, #0]
   d5192:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5194:	b1bb      	cbz	r3, d51c6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5196:	6858      	ldr	r0, [r3, #4]
   d5198:	f7ff f98e 	bl	d44b8 <os_thread_is_current>
   d519c:	b978      	cbnz	r0, d51be <_ZN6ThreadD1Ev+0x30>
   d519e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d51a0:	7c5a      	ldrb	r2, [r3, #17]
   d51a2:	b912      	cbnz	r2, d51aa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d51a4:	6858      	ldr	r0, [r3, #4]
   d51a6:	f7ff f98f 	bl	d44c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d51aa:	6823      	ldr	r3, [r4, #0]
   d51ac:	6858      	ldr	r0, [r3, #4]
   d51ae:	f7ff f993 	bl	d44d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51b2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d51b4:	2300      	movs	r3, #0
   d51b6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d51b8:	b128      	cbz	r0, d51c6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d51ba:	f7ff ffcd 	bl	d5158 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51be:	6820      	ldr	r0, [r4, #0]
   d51c0:	b108      	cbz	r0, d51c6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d51c2:	f7ff ffc9 	bl	d5158 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d51c6:	4620      	mov	r0, r4
   d51c8:	bd10      	pop	{r4, pc}

000d51ca <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d51ca:	b538      	push	{r3, r4, r5, lr}
   d51cc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51ce:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d51d2:	b108      	cbz	r0, d51d8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d51d4:	f7fe ff63 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d51d8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d51dc:	b108      	cbz	r0, d51e2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d51de:	f7ff f98b 	bl	d44f8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51e2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d51e6:	b135      	cbz	r5, d51f6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51e8:	4628      	mov	r0, r5
   d51ea:	f7ff ffd0 	bl	d518e <_ZN6ThreadD1Ev>
   d51ee:	2104      	movs	r1, #4
   d51f0:	4628      	mov	r0, r5
   d51f2:	f000 fbaa 	bl	d594a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51f6:	6820      	ldr	r0, [r4, #0]
   d51f8:	b108      	cbz	r0, d51fe <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d51fa:	f7ff ffc3 	bl	d5184 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d51fe:	4620      	mov	r0, r4
   d5200:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5204 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5204:	b510      	push	{r4, lr}
   d5206:	4b04      	ldr	r3, [pc, #16]	; (d5218 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5208:	4604      	mov	r4, r0
   d520a:	f840 3b08 	str.w	r3, [r0], #8
   d520e:	f7ff ffdc 	bl	d51ca <_ZN5spark11MeshPublishD1Ev>
   d5212:	4620      	mov	r0, r4
   d5214:	bd10      	pop	{r4, pc}
   d5216:	bf00      	nop
   d5218:	000d6058 	.word	0x000d6058

000d521c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d521c:	b538      	push	{r3, r4, r5, lr}
   d521e:	4c0e      	ldr	r4, [pc, #56]	; (d5258 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5220:	4b0e      	ldr	r3, [pc, #56]	; (d525c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5222:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5224:	2500      	movs	r5, #0
   d5226:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5228:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d522c:	6063      	str	r3, [r4, #4]
   d522e:	60a5      	str	r5, [r4, #8]
   d5230:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5234:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5238:	f7ff f956 	bl	d44e8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d523c:	4b08      	ldr	r3, [pc, #32]	; (d5260 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d523e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5242:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5246:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5248:	4620      	mov	r0, r4
   d524a:	4a06      	ldr	r2, [pc, #24]	; (d5264 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d524c:	4906      	ldr	r1, [pc, #24]	; (d5268 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d524e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5252:	f000 bb75 	b.w	d5940 <__aeabi_atexit>
   d5256:	bf00      	nop
   d5258:	2003e408 	.word	0x2003e408
   d525c:	000d608c 	.word	0x000d608c
   d5260:	000d6058 	.word	0x000d6058
   d5264:	2003e3b0 	.word	0x2003e3b0
   d5268:	000d5205 	.word	0x000d5205

000d526c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d526c:	2300      	movs	r3, #0
   d526e:	461a      	mov	r2, r3
   d5270:	6840      	ldr	r0, [r0, #4]
   d5272:	f7ff ba7d 	b.w	d4770 <network_connect>

000d5276 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5276:	2200      	movs	r2, #0
   d5278:	2102      	movs	r1, #2
   d527a:	6840      	ldr	r0, [r0, #4]
   d527c:	f7ff ba88 	b.w	d4790 <network_disconnect>

000d5280 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5280:	2200      	movs	r2, #0
   d5282:	4611      	mov	r1, r2
   d5284:	6840      	ldr	r0, [r0, #4]
   d5286:	f7ff ba7b 	b.w	d4780 <network_connecting>

000d528a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d528a:	2200      	movs	r2, #0
   d528c:	4611      	mov	r1, r2
   d528e:	6840      	ldr	r0, [r0, #4]
   d5290:	f7ff ba86 	b.w	d47a0 <network_ready>

000d5294 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5294:	2300      	movs	r3, #0
   d5296:	461a      	mov	r2, r3
   d5298:	4619      	mov	r1, r3
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff ba88 	b.w	d47b0 <network_on>

000d52a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d52a0:	2300      	movs	r3, #0
   d52a2:	461a      	mov	r2, r3
   d52a4:	4619      	mov	r1, r3
   d52a6:	6840      	ldr	r0, [r0, #4]
   d52a8:	f7ff ba8a 	b.w	d47c0 <network_off>

000d52ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52ac:	2200      	movs	r2, #0
   d52ae:	f081 0101 	eor.w	r1, r1, #1
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	f7ff ba8c 	b.w	d47d0 <network_listen>

000d52b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d52b8:	2200      	movs	r2, #0
   d52ba:	6840      	ldr	r0, [r0, #4]
   d52bc:	f7ff ba98 	b.w	d47f0 <network_set_listen_timeout>

000d52c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d52c0:	2200      	movs	r2, #0
   d52c2:	4611      	mov	r1, r2
   d52c4:	6840      	ldr	r0, [r0, #4]
   d52c6:	f7ff ba9b 	b.w	d4800 <network_get_listen_timeout>

000d52ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52ca:	2200      	movs	r2, #0
   d52cc:	4611      	mov	r1, r2
   d52ce:	6840      	ldr	r0, [r0, #4]
   d52d0:	f7ff ba86 	b.w	d47e0 <network_listening>

000d52d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52d8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d52da:	b095      	sub	sp, #84	; 0x54
   d52dc:	4616      	mov	r6, r2
   d52de:	460d      	mov	r5, r1
   d52e0:	4607      	mov	r7, r0
    IPAddress addr;
   d52e2:	f7ff fec5 	bl	d5070 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52e6:	4621      	mov	r1, r4
   d52e8:	2220      	movs	r2, #32
   d52ea:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52ee:	f000 fc92 	bl	d5c16 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52f2:	2340      	movs	r3, #64	; 0x40
   d52f4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52f6:	4621      	mov	r1, r4
   d52f8:	466b      	mov	r3, sp
   d52fa:	aa0c      	add	r2, sp, #48	; 0x30
   d52fc:	4630      	mov	r0, r6
   d52fe:	f7ff f953 	bl	d45a8 <netdb_getaddrinfo>
    if (!r) {
   d5302:	4604      	mov	r4, r0
   d5304:	2800      	cmp	r0, #0
   d5306:	d144      	bne.n	d5392 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5308:	4602      	mov	r2, r0
   d530a:	2101      	movs	r1, #1
   d530c:	6868      	ldr	r0, [r5, #4]
   d530e:	f7ff fa47 	bl	d47a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5312:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5314:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5316:	4622      	mov	r2, r4
   d5318:	6868      	ldr	r0, [r5, #4]
   d531a:	f7ff fa41 	bl	d47a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d531e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5320:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5322:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5324:	2e00      	cmp	r6, #0
   d5326:	d034      	beq.n	d5392 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5328:	2900      	cmp	r1, #0
   d532a:	d132      	bne.n	d5392 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d532c:	6873      	ldr	r3, [r6, #4]
   d532e:	2b02      	cmp	r3, #2
   d5330:	d002      	beq.n	d5338 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5332:	2b0a      	cmp	r3, #10
   d5334:	d009      	beq.n	d534a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5336:	e02a      	b.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5338:	f1b8 0f00 	cmp.w	r8, #0
   d533c:	d027      	beq.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d533e:	6971      	ldr	r1, [r6, #20]
   d5340:	4638      	mov	r0, r7
   d5342:	3104      	adds	r1, #4
   d5344:	f7ff fec1 	bl	d50ca <_ZN9IPAddressaSEPKh>
   d5348:	e020      	b.n	d538c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d534a:	f1b9 0f00 	cmp.w	r9, #0
   d534e:	d01e      	beq.n	d538e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5350:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5352:	2211      	movs	r2, #17
   d5354:	a801      	add	r0, sp, #4
   d5356:	f000 fc5e 	bl	d5c16 <memset>
                    a.v = 6;
   d535a:	2306      	movs	r3, #6
   d535c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5360:	ad01      	add	r5, sp, #4
   d5362:	f104 0308 	add.w	r3, r4, #8
   d5366:	3418      	adds	r4, #24
   d5368:	6818      	ldr	r0, [r3, #0]
   d536a:	6859      	ldr	r1, [r3, #4]
   d536c:	462a      	mov	r2, r5
   d536e:	c203      	stmia	r2!, {r0, r1}
   d5370:	3308      	adds	r3, #8
   d5372:	42a3      	cmp	r3, r4
   d5374:	4615      	mov	r5, r2
   d5376:	d1f7      	bne.n	d5368 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5378:	a901      	add	r1, sp, #4
   d537a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d537c:	ad07      	add	r5, sp, #28
   d537e:	f7ff fe85 	bl	d508c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5384:	1d3c      	adds	r4, r7, #4
   d5386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5388:	682b      	ldr	r3, [r5, #0]
   d538a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d538c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d538e:	69f6      	ldr	r6, [r6, #28]
   d5390:	e7c8      	b.n	d5324 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5392:	9800      	ldr	r0, [sp, #0]
   d5394:	f7ff f900 	bl	d4598 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5398:	4638      	mov	r0, r7
   d539a:	b015      	add	sp, #84	; 0x54
   d539c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d53a0:	4b02      	ldr	r3, [pc, #8]	; (d53ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d53a2:	4a03      	ldr	r2, [pc, #12]	; (d53b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53a4:	601a      	str	r2, [r3, #0]
   d53a6:	2200      	movs	r2, #0
   d53a8:	605a      	str	r2, [r3, #4]
   d53aa:	4770      	bx	lr
   d53ac:	2003e5dc 	.word	0x2003e5dc
   d53b0:	000d608c 	.word	0x000d608c

000d53b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b6:	4606      	mov	r6, r0
   d53b8:	460d      	mov	r5, r1
   d53ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53bc:	2400      	movs	r4, #0
  while (size--) {
   d53be:	42bd      	cmp	r5, r7
   d53c0:	d00c      	beq.n	d53dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53c2:	6833      	ldr	r3, [r6, #0]
   d53c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53c8:	689b      	ldr	r3, [r3, #8]
   d53ca:	4630      	mov	r0, r6
   d53cc:	4798      	blx	r3
     if (chunk>=0)
   d53ce:	2800      	cmp	r0, #0
   d53d0:	db01      	blt.n	d53d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53d4:	e7f3      	b.n	d53be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53d6:	2c00      	cmp	r4, #0
   d53d8:	bf08      	it	eq
   d53da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53e0:	b570      	push	{r4, r5, r6, lr}
   d53e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53e8:	b149      	cbz	r1, d53fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53ea:	f000 fc72 	bl	d5cd2 <strlen>
   d53ee:	682b      	ldr	r3, [r5, #0]
   d53f0:	4602      	mov	r2, r0
   d53f2:	4621      	mov	r1, r4
   d53f4:	4628      	mov	r0, r5
   d53f6:	68db      	ldr	r3, [r3, #12]
    }
   d53f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53fc:	4718      	bx	r3
    }
   d53fe:	bd70      	pop	{r4, r5, r6, pc}

000d5400 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5400:	6803      	ldr	r3, [r0, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	4718      	bx	r3

000d5406 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5406:	b530      	push	{r4, r5, lr}
   d5408:	b08b      	sub	sp, #44	; 0x2c
   d540a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d540c:	2100      	movs	r1, #0
   d540e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5412:	2a01      	cmp	r2, #1
   d5414:	bf98      	it	ls
   d5416:	220a      	movls	r2, #10
   d5418:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d541c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5420:	fb05 3312 	mls	r3, r5, r2, r3
   d5424:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5428:	2b09      	cmp	r3, #9
   d542a:	bf94      	ite	ls
   d542c:	3330      	addls	r3, #48	; 0x30
   d542e:	3337      	addhi	r3, #55	; 0x37
   d5430:	b2db      	uxtb	r3, r3
   d5432:	4621      	mov	r1, r4
   d5434:	f804 3901 	strb.w	r3, [r4], #-1
   d5438:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d543a:	2d00      	cmp	r5, #0
   d543c:	d1ee      	bne.n	d541c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d543e:	f7ff ffcf 	bl	d53e0 <_ZN5Print5writeEPKc>
}
   d5442:	b00b      	add	sp, #44	; 0x2c
   d5444:	bd30      	pop	{r4, r5, pc}

000d5446 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5446:	b510      	push	{r4, lr}
   d5448:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d544a:	f7ff fa9e 	bl	d498a <_ZNSt14_Function_baseD1Ev>
   d544e:	4620      	mov	r0, r4
   d5450:	bd10      	pop	{r4, pc}
	...

000d5454 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5454:	4803      	ldr	r0, [pc, #12]	; (d5464 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5456:	4a04      	ldr	r2, [pc, #16]	; (d5468 <_GLOBAL__sub_I_RGB+0x14>)
   d5458:	4904      	ldr	r1, [pc, #16]	; (d546c <_GLOBAL__sub_I_RGB+0x18>)
   d545a:	2300      	movs	r3, #0
   d545c:	6083      	str	r3, [r0, #8]
   d545e:	f000 ba6f 	b.w	d5940 <__aeabi_atexit>
   d5462:	bf00      	nop
   d5464:	2003e5e4 	.word	0x2003e5e4
   d5468:	2003e3b0 	.word	0x2003e3b0
   d546c:	000d5447 	.word	0x000d5447

000d5470 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5470:	b510      	push	{r4, lr}
   d5472:	4604      	mov	r4, r0
{
	free(buffer);
   d5474:	6800      	ldr	r0, [r0, #0]
   d5476:	f7ff f9d3 	bl	d4820 <free>
}
   d547a:	4620      	mov	r0, r4
   d547c:	bd10      	pop	{r4, pc}

000d547e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d547e:	b510      	push	{r4, lr}
   d5480:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5482:	6800      	ldr	r0, [r0, #0]
   d5484:	b108      	cbz	r0, d548a <_ZN6String10invalidateEv+0xc>
   d5486:	f7ff f9cb 	bl	d4820 <free>
	buffer = NULL;
   d548a:	2300      	movs	r3, #0
   d548c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d548e:	60a3      	str	r3, [r4, #8]
   d5490:	6063      	str	r3, [r4, #4]
   d5492:	bd10      	pop	{r4, pc}

000d5494 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5494:	b538      	push	{r3, r4, r5, lr}
   d5496:	4604      	mov	r4, r0
   d5498:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d549a:	6800      	ldr	r0, [r0, #0]
   d549c:	3101      	adds	r1, #1
   d549e:	f7ff f9c7 	bl	d4830 <realloc>
	if (newbuffer) {
   d54a2:	b110      	cbz	r0, d54aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d54a4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d54a8:	2001      	movs	r0, #1
	}
	return 0;
}
   d54aa:	bd38      	pop	{r3, r4, r5, pc}

000d54ac <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d54ae:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d54b2:	b113      	cbz	r3, d54ba <_ZN6String7reserveEj+0xe>
   d54b4:	6843      	ldr	r3, [r0, #4]
   d54b6:	428b      	cmp	r3, r1
   d54b8:	d207      	bcs.n	d54ca <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff ffea 	bl	d5494 <_ZN6String12changeBufferEj>
   d54c0:	b120      	cbz	r0, d54cc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d54c2:	68a3      	ldr	r3, [r4, #8]
   d54c4:	b90b      	cbnz	r3, d54ca <_ZN6String7reserveEj+0x1e>
   d54c6:	6822      	ldr	r2, [r4, #0]
   d54c8:	7013      	strb	r3, [r2, #0]
   d54ca:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d54cc:	bd10      	pop	{r4, pc}

000d54ce <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54ce:	b570      	push	{r4, r5, r6, lr}
   d54d0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d54d2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54d4:	4604      	mov	r4, r0
   d54d6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d54d8:	f7ff ffe8 	bl	d54ac <_ZN6String7reserveEj>
   d54dc:	b918      	cbnz	r0, d54e6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d54de:	4620      	mov	r0, r4
   d54e0:	f7ff ffcd 	bl	d547e <_ZN6String10invalidateEv>
		return *this;
   d54e4:	e009      	b.n	d54fa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54e6:	462a      	mov	r2, r5
   d54e8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54ea:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54ec:	6820      	ldr	r0, [r4, #0]
   d54ee:	f000 fb87 	bl	d5c00 <memcpy>
	buffer[len] = 0;
   d54f2:	6822      	ldr	r2, [r4, #0]
   d54f4:	68a3      	ldr	r3, [r4, #8]
   d54f6:	2100      	movs	r1, #0
   d54f8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d54fa:	4620      	mov	r0, r4
   d54fc:	bd70      	pop	{r4, r5, r6, pc}

000d54fe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54fe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5500:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5502:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5504:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5506:	6043      	str	r3, [r0, #4]
	len = 0;
   d5508:	6083      	str	r3, [r0, #8]
	flags = 0;
   d550a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d550c:	460d      	mov	r5, r1
   d550e:	b139      	cbz	r1, d5520 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5510:	4608      	mov	r0, r1
   d5512:	f000 fbde 	bl	d5cd2 <strlen>
   d5516:	4629      	mov	r1, r5
   d5518:	4602      	mov	r2, r0
   d551a:	4620      	mov	r0, r4
   d551c:	f7ff ffd7 	bl	d54ce <_ZN6String4copyEPKcj>
}
   d5520:	4620      	mov	r0, r4
   d5522:	bd38      	pop	{r3, r4, r5, pc}

000d5524 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5524:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5526:	b510      	push	{r4, lr}
   d5528:	460b      	mov	r3, r1
   d552a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d552c:	d007      	beq.n	d553e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d552e:	6809      	ldr	r1, [r1, #0]
   d5530:	b119      	cbz	r1, d553a <_ZN6StringaSERKS_+0x16>
   d5532:	689a      	ldr	r2, [r3, #8]
   d5534:	f7ff ffcb 	bl	d54ce <_ZN6String4copyEPKcj>
   d5538:	e001      	b.n	d553e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d553a:	f7ff ffa0 	bl	d547e <_ZN6String10invalidateEv>

	return *this;
}
   d553e:	4620      	mov	r0, r4
   d5540:	bd10      	pop	{r4, pc}

000d5542 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5542:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5544:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5546:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5548:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d554a:	6043      	str	r3, [r0, #4]
	len = 0;
   d554c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d554e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5550:	f7ff ffe8 	bl	d5524 <_ZN6StringaSERKS_>
}
   d5554:	4620      	mov	r0, r4
   d5556:	bd10      	pop	{r4, pc}

000d5558 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5558:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d555a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d555c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d555e:	b912      	cbnz	r2, d5566 <_ZNK6String6equalsEPKc+0xe>
   d5560:	b919      	cbnz	r1, d556a <_ZNK6String6equalsEPKc+0x12>
   d5562:	2001      	movs	r0, #1
   d5564:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5566:	b911      	cbnz	r1, d556e <_ZNK6String6equalsEPKc+0x16>
   d5568:	6803      	ldr	r3, [r0, #0]
   d556a:	7818      	ldrb	r0, [r3, #0]
   d556c:	e002      	b.n	d5574 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d556e:	6800      	ldr	r0, [r0, #0]
   d5570:	f000 fb82 	bl	d5c78 <strcmp>
   d5574:	fab0 f080 	clz	r0, r0
   d5578:	0940      	lsrs	r0, r0, #5
}
   d557a:	bd08      	pop	{r3, pc}

000d557c <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d557c:	4601      	mov	r1, r0
   d557e:	2200      	movs	r2, #0
   d5580:	208c      	movs	r0, #140	; 0x8c
   d5582:	f7fe bfc1 	b.w	d4508 <HAL_Core_System_Reset_Ex>

000d5586 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d5586:	2000      	movs	r0, #0
   d5588:	f7ff bff8 	b.w	d557c <_ZN11SystemClass5resetEm>

000d558c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d558c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d558e:	4c09      	ldr	r4, [pc, #36]	; (d55b4 <_GLOBAL__sub_I_System+0x28>)
   d5590:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5592:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5596:	6020      	str	r0, [r4, #0]
   d5598:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d559a:	71a0      	strb	r0, [r4, #6]
   d559c:	8120      	strh	r0, [r4, #8]
   d559e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d55a0:	f7ff f872 	bl	d4688 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d55a4:	4620      	mov	r0, r4
   d55a6:	4a04      	ldr	r2, [pc, #16]	; (d55b8 <_GLOBAL__sub_I_System+0x2c>)
   d55a8:	4904      	ldr	r1, [pc, #16]	; (d55bc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d55aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d55ae:	f000 b9c7 	b.w	d5940 <__aeabi_atexit>
   d55b2:	bf00      	nop
   d55b4:	2003e5f4 	.word	0x2003e5f4
   d55b8:	2003e3b0 	.word	0x2003e3b0
   d55bc:	000d40b3 	.word	0x000d40b3

000d55c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55c0:	4b02      	ldr	r3, [pc, #8]	; (d55cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55c6:	601a      	str	r2, [r3, #0]
   d55c8:	4770      	bx	lr
   d55ca:	bf00      	nop
   d55cc:	2003e348 	.word	0x2003e348
   d55d0:	2003e600 	.word	0x2003e600

000d55d4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d55d4:	4770      	bx	lr

000d55d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55d6:	7441      	strb	r1, [r0, #17]
   d55d8:	4770      	bx	lr

000d55da <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d55da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d55dc:	7c00      	ldrb	r0, [r0, #16]
   d55de:	f7ff f81b 	bl	d4618 <HAL_USART_Available_Data_For_Write>
}
   d55e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55e6:	bd08      	pop	{r3, pc}

000d55e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d55e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d55ea:	7c00      	ldrb	r0, [r0, #16]
   d55ec:	f7fe fff4 	bl	d45d8 <HAL_USART_Available_Data>
}
   d55f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55f4:	bd08      	pop	{r3, pc}

000d55f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55f8:	7c00      	ldrb	r0, [r0, #16]
   d55fa:	f7fe fffd 	bl	d45f8 <HAL_USART_Peek_Data>
}
   d55fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5602:	bf28      	it	cs
   d5604:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5608:	bd08      	pop	{r3, pc}

000d560a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d560a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d560c:	7c00      	ldrb	r0, [r0, #16]
   d560e:	f7fe ffeb 	bl	d45e8 <HAL_USART_Read_Data>
}
   d5612:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5616:	bf28      	it	cs
   d5618:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d561c:	bd08      	pop	{r3, pc}

000d561e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d561e:	7c00      	ldrb	r0, [r0, #16]
   d5620:	f7fe bff2 	b.w	d4608 <HAL_USART_Flush_Data>

000d5624 <_ZN11USARTSerialD0Ev>:
   d5624:	b510      	push	{r4, lr}
   d5626:	2114      	movs	r1, #20
   d5628:	4604      	mov	r4, r0
   d562a:	f000 f98e 	bl	d594a <_ZdlPvj>
   d562e:	4620      	mov	r0, r4
   d5630:	bd10      	pop	{r4, pc}

000d5632 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5632:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5634:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5636:	4604      	mov	r4, r0
   d5638:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d563a:	b925      	cbnz	r5, d5646 <_ZN11USARTSerial5writeEh+0x14>
   d563c:	7c00      	ldrb	r0, [r0, #16]
   d563e:	f7fe ffeb 	bl	d4618 <HAL_USART_Available_Data_For_Write>
   d5642:	2800      	cmp	r0, #0
   d5644:	dd05      	ble.n	d5652 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5646:	4631      	mov	r1, r6
   d5648:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d564e:	f7fe bfbb 	b.w	d45c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5652:	4628      	mov	r0, r5
   d5654:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5658 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5658:	b510      	push	{r4, lr}
   d565a:	4604      	mov	r4, r0
   d565c:	4608      	mov	r0, r1
   d565e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5660:	2200      	movs	r2, #0
   d5662:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5668:	60a2      	str	r2, [r4, #8]
   d566a:	4a05      	ldr	r2, [pc, #20]	; (d5680 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d566c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d566e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5670:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5672:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5674:	461a      	mov	r2, r3
   d5676:	f7fe ff9f 	bl	d45b8 <HAL_USART_Init>
}
   d567a:	4620      	mov	r0, r4
   d567c:	bd10      	pop	{r4, pc}
   d567e:	bf00      	nop
   d5680:	000d60ec 	.word	0x000d60ec

000d5684 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5684:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5686:	4d0c      	ldr	r5, [pc, #48]	; (d56b8 <_Z22__fetch_global_Serial1v+0x34>)
   d5688:	6829      	ldr	r1, [r5, #0]
   d568a:	f011 0401 	ands.w	r4, r1, #1
   d568e:	d111      	bne.n	d56b4 <_Z22__fetch_global_Serial1v+0x30>
   d5690:	4628      	mov	r0, r5
   d5692:	f7fe fd06 	bl	d40a2 <__cxa_guard_acquire>
   d5696:	b168      	cbz	r0, d56b4 <_Z22__fetch_global_Serial1v+0x30>
   d5698:	4a08      	ldr	r2, [pc, #32]	; (d56bc <_Z22__fetch_global_Serial1v+0x38>)
   d569a:	4b09      	ldr	r3, [pc, #36]	; (d56c0 <_Z22__fetch_global_Serial1v+0x3c>)
   d569c:	4809      	ldr	r0, [pc, #36]	; (d56c4 <_Z22__fetch_global_Serial1v+0x40>)
   d569e:	4621      	mov	r1, r4
   d56a0:	f7ff ffda 	bl	d5658 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d56a4:	4628      	mov	r0, r5
   d56a6:	f7fe fd01 	bl	d40ac <__cxa_guard_release>
   d56aa:	4a07      	ldr	r2, [pc, #28]	; (d56c8 <_Z22__fetch_global_Serial1v+0x44>)
   d56ac:	4907      	ldr	r1, [pc, #28]	; (d56cc <_Z22__fetch_global_Serial1v+0x48>)
   d56ae:	4805      	ldr	r0, [pc, #20]	; (d56c4 <_Z22__fetch_global_Serial1v+0x40>)
   d56b0:	f000 f946 	bl	d5940 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d56b4:	4803      	ldr	r0, [pc, #12]	; (d56c4 <_Z22__fetch_global_Serial1v+0x40>)
   d56b6:	bd38      	pop	{r3, r4, r5, pc}
   d56b8:	2003e69c 	.word	0x2003e69c
   d56bc:	2003e6a0 	.word	0x2003e6a0
   d56c0:	2003e618 	.word	0x2003e618
   d56c4:	2003e604 	.word	0x2003e604
   d56c8:	2003e3b0 	.word	0x2003e3b0
   d56cc:	000d55d5 	.word	0x000d55d5

000d56d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56d0:	7441      	strb	r1, [r0, #17]
   d56d2:	4770      	bx	lr

000d56d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56d4:	4770      	bx	lr

000d56d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d56d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56d8:	2100      	movs	r1, #0
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	f7fe ffbc 	bl	d4658 <HAL_USB_USART_Receive_Data>
}
   d56e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56e4:	bf28      	it	cs
   d56e6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56ea:	bd08      	pop	{r3, pc}

000d56ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d56ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56ee:	2101      	movs	r1, #1
   d56f0:	7c00      	ldrb	r0, [r0, #16]
   d56f2:	f7fe ffb1 	bl	d4658 <HAL_USB_USART_Receive_Data>
}
   d56f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56fa:	bf28      	it	cs
   d56fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5700:	bd08      	pop	{r3, pc}

000d5702 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5702:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5704:	7c00      	ldrb	r0, [r0, #16]
   d5706:	f7fe ff9f 	bl	d4648 <HAL_USB_USART_Available_Data_For_Write>
}
   d570a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d570e:	bd08      	pop	{r3, pc}

000d5710 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5710:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5712:	7c00      	ldrb	r0, [r0, #16]
   d5714:	f7fe ff90 	bl	d4638 <HAL_USB_USART_Available_Data>
}
   d5718:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d571c:	bd08      	pop	{r3, pc}

000d571e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d571e:	7c00      	ldrb	r0, [r0, #16]
   d5720:	f7fe bfaa 	b.w	d4678 <HAL_USB_USART_Flush_Data>

000d5724 <_ZN9USBSerialD0Ev>:
   d5724:	b510      	push	{r4, lr}
   d5726:	2114      	movs	r1, #20
   d5728:	4604      	mov	r4, r0
   d572a:	f000 f90e 	bl	d594a <_ZdlPvj>
   d572e:	4620      	mov	r0, r4
   d5730:	bd10      	pop	{r4, pc}

000d5732 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5732:	b538      	push	{r3, r4, r5, lr}
   d5734:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5736:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5738:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d573a:	f7fe ff85 	bl	d4648 <HAL_USB_USART_Available_Data_For_Write>
   d573e:	2800      	cmp	r0, #0
   d5740:	dc01      	bgt.n	d5746 <_ZN9USBSerial5writeEh+0x14>
   d5742:	7c60      	ldrb	r0, [r4, #17]
   d5744:	b128      	cbz	r0, d5752 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5746:	4629      	mov	r1, r5
   d5748:	7c20      	ldrb	r0, [r4, #16]
   d574a:	f7fe ff8d 	bl	d4668 <HAL_USB_USART_Send_Data>
   d574e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5752:	bd38      	pop	{r3, r4, r5, pc}

000d5754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5754:	b510      	push	{r4, lr}
   d5756:	4604      	mov	r4, r0
   d5758:	2300      	movs	r3, #0
   d575a:	6063      	str	r3, [r4, #4]
   d575c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5760:	60a3      	str	r3, [r4, #8]
   d5762:	4b05      	ldr	r3, [pc, #20]	; (d5778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5764:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5766:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5768:	4608      	mov	r0, r1
{
  _serial = serial;
   d576a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d576c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d576e:	4611      	mov	r1, r2
   d5770:	f7fe ff5a 	bl	d4628 <HAL_USB_USART_Init>
}
   d5774:	4620      	mov	r0, r4
   d5776:	bd10      	pop	{r4, pc}
   d5778:	000d611c 	.word	0x000d611c

000d577c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d577c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d577e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5780:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5782:	2100      	movs	r1, #0
   d5784:	f000 fa47 	bl	d5c16 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5788:	4620      	mov	r0, r4
   d578a:	bd10      	pop	{r4, pc}

000d578c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d578c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d578e:	4d0e      	ldr	r5, [pc, #56]	; (d57c8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5790:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5792:	a801      	add	r0, sp, #4
   d5794:	f7ff fff2 	bl	d577c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5798:	6829      	ldr	r1, [r5, #0]
   d579a:	f011 0401 	ands.w	r4, r1, #1
   d579e:	d110      	bne.n	d57c2 <_Z16_fetch_usbserialv+0x36>
   d57a0:	4628      	mov	r0, r5
   d57a2:	f7fe fc7e 	bl	d40a2 <__cxa_guard_acquire>
   d57a6:	b160      	cbz	r0, d57c2 <_Z16_fetch_usbserialv+0x36>
   d57a8:	aa01      	add	r2, sp, #4
   d57aa:	4621      	mov	r1, r4
   d57ac:	4807      	ldr	r0, [pc, #28]	; (d57cc <_Z16_fetch_usbserialv+0x40>)
   d57ae:	f7ff ffd1 	bl	d5754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57b2:	4628      	mov	r0, r5
   d57b4:	f7fe fc7a 	bl	d40ac <__cxa_guard_release>
   d57b8:	4a05      	ldr	r2, [pc, #20]	; (d57d0 <_Z16_fetch_usbserialv+0x44>)
   d57ba:	4906      	ldr	r1, [pc, #24]	; (d57d4 <_Z16_fetch_usbserialv+0x48>)
   d57bc:	4803      	ldr	r0, [pc, #12]	; (d57cc <_Z16_fetch_usbserialv+0x40>)
   d57be:	f000 f8bf 	bl	d5940 <__aeabi_atexit>
	return _usbserial;
}
   d57c2:	4802      	ldr	r0, [pc, #8]	; (d57cc <_Z16_fetch_usbserialv+0x40>)
   d57c4:	b007      	add	sp, #28
   d57c6:	bd30      	pop	{r4, r5, pc}
   d57c8:	2003e724 	.word	0x2003e724
   d57cc:	2003e728 	.word	0x2003e728
   d57d0:	2003e3b0 	.word	0x2003e3b0
   d57d4:	000d56d5 	.word	0x000d56d5

000d57d8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d57d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d57da:	4b0c      	ldr	r3, [pc, #48]	; (d580c <serialEventRun+0x34>)
   d57dc:	b133      	cbz	r3, d57ec <serialEventRun+0x14>
   d57de:	f7ff ffd5 	bl	d578c <_Z16_fetch_usbserialv>
   d57e2:	6803      	ldr	r3, [r0, #0]
   d57e4:	691b      	ldr	r3, [r3, #16]
   d57e6:	4798      	blx	r3
   d57e8:	2800      	cmp	r0, #0
   d57ea:	dc09      	bgt.n	d5800 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d57ec:	4b08      	ldr	r3, [pc, #32]	; (d5810 <serialEventRun+0x38>)
   d57ee:	b163      	cbz	r3, d580a <serialEventRun+0x32>
   d57f0:	f7ff ff48 	bl	d5684 <_Z22__fetch_global_Serial1v>
   d57f4:	6803      	ldr	r3, [r0, #0]
   d57f6:	691b      	ldr	r3, [r3, #16]
   d57f8:	4798      	blx	r3
   d57fa:	2800      	cmp	r0, #0
   d57fc:	dc03      	bgt.n	d5806 <serialEventRun+0x2e>
   d57fe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5800:	f3af 8000 	nop.w
   d5804:	e7f2      	b.n	d57ec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5806:	f3af 8000 	nop.w
   d580a:	bd08      	pop	{r3, pc}
	...

000d5814 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5814:	b508      	push	{r3, lr}
	serialEventRun();
   d5816:	f7ff ffdf 	bl	d57d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d581a:	f7fe fe85 	bl	d4528 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d581e:	4b01      	ldr	r3, [pc, #4]	; (d5824 <_post_loop+0x10>)
   d5820:	6018      	str	r0, [r3, #0]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	2003e744 	.word	0x2003e744

000d5828 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5828:	4802      	ldr	r0, [pc, #8]	; (d5834 <_Z33system_initialize_user_backup_ramv+0xc>)
   d582a:	4a03      	ldr	r2, [pc, #12]	; (d5838 <_Z33system_initialize_user_backup_ramv+0x10>)
   d582c:	4903      	ldr	r1, [pc, #12]	; (d583c <_Z33system_initialize_user_backup_ramv+0x14>)
   d582e:	1a12      	subs	r2, r2, r0
   d5830:	f000 b9e6 	b.w	d5c00 <memcpy>
   d5834:	2003f400 	.word	0x2003f400
   d5838:	2003f404 	.word	0x2003f404
   d583c:	000d61e0 	.word	0x000d61e0

000d5840 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5840:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5842:	2300      	movs	r3, #0
   d5844:	9300      	str	r3, [sp, #0]
   d5846:	461a      	mov	r2, r3
   d5848:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d584c:	f7fe ff4e 	bl	d46ec <system_ctrl_set_result>
}
   d5850:	b003      	add	sp, #12
   d5852:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5858 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5858:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d585a:	8843      	ldrh	r3, [r0, #2]
   d585c:	2b0a      	cmp	r3, #10
   d585e:	d008      	beq.n	d5872 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5860:	2b50      	cmp	r3, #80	; 0x50
   d5862:	d109      	bne.n	d5878 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5864:	4b09      	ldr	r3, [pc, #36]	; (d588c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5866:	681b      	ldr	r3, [r3, #0]
   d5868:	b13b      	cbz	r3, d587a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d586a:	b003      	add	sp, #12
   d586c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5870:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5872:	f7ff ffe5 	bl	d5840 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5876:	e006      	b.n	d5886 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5878:	2300      	movs	r3, #0
   d587a:	9300      	str	r3, [sp, #0]
   d587c:	461a      	mov	r2, r3
   d587e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5882:	f7fe ff33 	bl	d46ec <system_ctrl_set_result>
        break;
    }
}
   d5886:	b003      	add	sp, #12
   d5888:	f85d fb04 	ldr.w	pc, [sp], #4
   d588c:	2003e73c 	.word	0x2003e73c

000d5890 <module_user_init_hook>:

void module_user_init_hook()
{
   d5890:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5892:	4c10      	ldr	r4, [pc, #64]	; (d58d4 <module_user_init_hook+0x44>)
   d5894:	4d10      	ldr	r5, [pc, #64]	; (d58d8 <module_user_init_hook+0x48>)
   d5896:	6823      	ldr	r3, [r4, #0]
   d5898:	42ab      	cmp	r3, r5
   d589a:	4b10      	ldr	r3, [pc, #64]	; (d58dc <module_user_init_hook+0x4c>)
   d589c:	bf0c      	ite	eq
   d589e:	2201      	moveq	r2, #1
   d58a0:	2200      	movne	r2, #0
   d58a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d58a4:	d002      	beq.n	d58ac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d58a6:	f7ff ffbf 	bl	d5828 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d58aa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d58ac:	f7fe fe34 	bl	d4518 <HAL_RNG_GetRandomNumber>
   d58b0:	4604      	mov	r4, r0
    srand(seed);
   d58b2:	f000 f9b9 	bl	d5c28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d58b6:	4b0a      	ldr	r3, [pc, #40]	; (d58e0 <module_user_init_hook+0x50>)
   d58b8:	b113      	cbz	r3, d58c0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d58ba:	4620      	mov	r0, r4
   d58bc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d58c0:	2100      	movs	r1, #0
   d58c2:	4807      	ldr	r0, [pc, #28]	; (d58e0 <module_user_init_hook+0x50>)
   d58c4:	f7fe ff4c 	bl	d4760 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58c8:	2100      	movs	r1, #0
   d58ca:	4806      	ldr	r0, [pc, #24]	; (d58e4 <module_user_init_hook+0x54>)
}
   d58cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58d0:	f7fe bf02 	b.w	d46d8 <system_ctrl_set_app_request_handler>
   d58d4:	2003f400 	.word	0x2003f400
   d58d8:	9a271c1e 	.word	0x9a271c1e
   d58dc:	2003e740 	.word	0x2003e740
   d58e0:	00000000 	.word	0x00000000
   d58e4:	000d5859 	.word	0x000d5859

000d58e8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <spark_protocol_instance+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	681b      	ldr	r3, [r3, #0]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	0003025c 	.word	0x0003025c

000d58f8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <spark_protocol_set_product_id+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	685b      	ldr	r3, [r3, #4]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	0003025c 	.word	0x0003025c

000d5908 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <spark_protocol_set_product_firmware_version+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	689b      	ldr	r3, [r3, #8]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	0003025c 	.word	0x0003025c

000d5918 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d5918:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d591a:	4c07      	ldr	r4, [pc, #28]	; (d5938 <_Z21__fetch_global_EEPROMv+0x20>)
   d591c:	6823      	ldr	r3, [r4, #0]
   d591e:	07db      	lsls	r3, r3, #31
   d5920:	d408      	bmi.n	d5934 <_Z21__fetch_global_EEPROMv+0x1c>
   d5922:	4620      	mov	r0, r4
   d5924:	f7fe fbbd 	bl	d40a2 <__cxa_guard_acquire>
   d5928:	b120      	cbz	r0, d5934 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d592a:	f7fe fe05 	bl	d4538 <HAL_EEPROM_Init>
   d592e:	4620      	mov	r0, r4
   d5930:	f7fe fbbc 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d5934:	4801      	ldr	r0, [pc, #4]	; (d593c <_Z21__fetch_global_EEPROMv+0x24>)
   d5936:	bd10      	pop	{r4, pc}
   d5938:	2003e748 	.word	0x2003e748
   d593c:	2003e74c 	.word	0x2003e74c

000d5940 <__aeabi_atexit>:
   d5940:	460b      	mov	r3, r1
   d5942:	4601      	mov	r1, r0
   d5944:	4618      	mov	r0, r3
   d5946:	f000 b94d 	b.w	d5be4 <__cxa_atexit>

000d594a <_ZdlPvj>:
   d594a:	f7fe bba6 	b.w	d409a <_ZdlPv>

000d594e <_ZSt25__throw_bad_function_callv>:
   d594e:	b508      	push	{r3, lr}
   d5950:	f7fe ff76 	bl	d4840 <abort>

000d5954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5954:	4b24      	ldr	r3, [pc, #144]	; (d59e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d0      	lsls	r0, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4b22      	ldr	r3, [pc, #136]	; (d59ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	07d1      	lsls	r1, r2, #31
   d5966:	bf5c      	itt	pl
   d5968:	2201      	movpl	r2, #1
   d596a:	601a      	strpl	r2, [r3, #0]
   d596c:	4b20      	ldr	r3, [pc, #128]	; (d59f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d596e:	681a      	ldr	r2, [r3, #0]
   d5970:	07d2      	lsls	r2, r2, #31
   d5972:	bf5c      	itt	pl
   d5974:	2201      	movpl	r2, #1
   d5976:	601a      	strpl	r2, [r3, #0]
   d5978:	4b1e      	ldr	r3, [pc, #120]	; (d59f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d597a:	681a      	ldr	r2, [r3, #0]
   d597c:	07d0      	lsls	r0, r2, #31
   d597e:	bf5c      	itt	pl
   d5980:	2201      	movpl	r2, #1
   d5982:	601a      	strpl	r2, [r3, #0]
   d5984:	4b1c      	ldr	r3, [pc, #112]	; (d59f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d1      	lsls	r1, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b1a      	ldr	r3, [pc, #104]	; (d59fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d2      	lsls	r2, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4b18      	ldr	r3, [pc, #96]	; (d5a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d599e:	681a      	ldr	r2, [r3, #0]
   d59a0:	07d0      	lsls	r0, r2, #31
   d59a2:	bf5c      	itt	pl
   d59a4:	2201      	movpl	r2, #1
   d59a6:	601a      	strpl	r2, [r3, #0]
   d59a8:	4b16      	ldr	r3, [pc, #88]	; (d5a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d1      	lsls	r1, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b14      	ldr	r3, [pc, #80]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d2      	lsls	r2, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b12      	ldr	r3, [pc, #72]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b10      	ldr	r3, [pc, #64]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b0e      	ldr	r3, [pc, #56]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4770      	bx	lr
   d59e6:	bf00      	nop
   d59e8:	2003e77c 	.word	0x2003e77c
   d59ec:	2003e778 	.word	0x2003e778
   d59f0:	2003e774 	.word	0x2003e774
   d59f4:	2003e770 	.word	0x2003e770
   d59f8:	2003e76c 	.word	0x2003e76c
   d59fc:	2003e768 	.word	0x2003e768
   d5a00:	2003e764 	.word	0x2003e764
   d5a04:	2003e760 	.word	0x2003e760
   d5a08:	2003e75c 	.word	0x2003e75c
   d5a0c:	2003e758 	.word	0x2003e758
   d5a10:	2003e754 	.word	0x2003e754
   d5a14:	2003e750 	.word	0x2003e750

000d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a18:	4b18      	ldr	r3, [pc, #96]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a1a:	681a      	ldr	r2, [r3, #0]
   d5a1c:	07d1      	lsls	r1, r2, #31
   d5a1e:	bf5c      	itt	pl
   d5a20:	2201      	movpl	r2, #1
   d5a22:	601a      	strpl	r2, [r3, #0]
   d5a24:	4b16      	ldr	r3, [pc, #88]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a26:	681a      	ldr	r2, [r3, #0]
   d5a28:	07d2      	lsls	r2, r2, #31
   d5a2a:	bf5c      	itt	pl
   d5a2c:	2201      	movpl	r2, #1
   d5a2e:	601a      	strpl	r2, [r3, #0]
   d5a30:	4b14      	ldr	r3, [pc, #80]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d0      	lsls	r0, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b12      	ldr	r3, [pc, #72]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d1      	lsls	r1, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b10      	ldr	r3, [pc, #64]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d2      	lsls	r2, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b0e      	ldr	r3, [pc, #56]	; (d5a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d0      	lsls	r0, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b0c      	ldr	r3, [pc, #48]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d1      	lsls	r1, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b0a      	ldr	r3, [pc, #40]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d2      	lsls	r2, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4770      	bx	lr
   d5a7a:	bf00      	nop
   d5a7c:	2003e79c 	.word	0x2003e79c
   d5a80:	2003e798 	.word	0x2003e798
   d5a84:	2003e794 	.word	0x2003e794
   d5a88:	2003e790 	.word	0x2003e790
   d5a8c:	2003e78c 	.word	0x2003e78c
   d5a90:	2003e788 	.word	0x2003e788
   d5a94:	2003e784 	.word	0x2003e784
   d5a98:	2003e780 	.word	0x2003e780

000d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a9c:	4b18      	ldr	r3, [pc, #96]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a9e:	681a      	ldr	r2, [r3, #0]
   d5aa0:	07d1      	lsls	r1, r2, #31
   d5aa2:	bf5c      	itt	pl
   d5aa4:	2201      	movpl	r2, #1
   d5aa6:	601a      	strpl	r2, [r3, #0]
   d5aa8:	4b16      	ldr	r3, [pc, #88]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5aaa:	681a      	ldr	r2, [r3, #0]
   d5aac:	07d2      	lsls	r2, r2, #31
   d5aae:	bf5c      	itt	pl
   d5ab0:	2201      	movpl	r2, #1
   d5ab2:	601a      	strpl	r2, [r3, #0]
   d5ab4:	4b14      	ldr	r3, [pc, #80]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d0      	lsls	r0, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b12      	ldr	r3, [pc, #72]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d1      	lsls	r1, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b10      	ldr	r3, [pc, #64]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d2      	lsls	r2, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b0e      	ldr	r3, [pc, #56]	; (d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d0      	lsls	r0, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b0c      	ldr	r3, [pc, #48]	; (d5b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d1      	lsls	r1, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b0a      	ldr	r3, [pc, #40]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d2      	lsls	r2, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4770      	bx	lr
   d5afe:	bf00      	nop
   d5b00:	2003e7bc 	.word	0x2003e7bc
   d5b04:	2003e7b8 	.word	0x2003e7b8
   d5b08:	2003e7b4 	.word	0x2003e7b4
   d5b0c:	2003e7b0 	.word	0x2003e7b0
   d5b10:	2003e7ac 	.word	0x2003e7ac
   d5b14:	2003e7a8 	.word	0x2003e7a8
   d5b18:	2003e7a4 	.word	0x2003e7a4
   d5b1c:	2003e7a0 	.word	0x2003e7a0

000d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b20:	4b24      	ldr	r3, [pc, #144]	; (d5bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d0      	lsls	r0, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b22      	ldr	r3, [pc, #136]	; (d5bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d1      	lsls	r1, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b20      	ldr	r3, [pc, #128]	; (d5bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d2      	lsls	r2, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b1e      	ldr	r3, [pc, #120]	; (d5bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d0      	lsls	r0, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b1c      	ldr	r3, [pc, #112]	; (d5bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d1      	lsls	r1, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b1a      	ldr	r3, [pc, #104]	; (d5bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d2      	lsls	r2, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b18      	ldr	r3, [pc, #96]	; (d5bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d0      	lsls	r0, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b16      	ldr	r3, [pc, #88]	; (d5bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d1      	lsls	r1, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4b14      	ldr	r3, [pc, #80]	; (d5bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d2      	lsls	r2, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4b12      	ldr	r3, [pc, #72]	; (d5bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5b8e:	681a      	ldr	r2, [r3, #0]
   d5b90:	07d0      	lsls	r0, r2, #31
   d5b92:	bf5c      	itt	pl
   d5b94:	2201      	movpl	r2, #1
   d5b96:	601a      	strpl	r2, [r3, #0]
   d5b98:	4b10      	ldr	r3, [pc, #64]	; (d5bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d1      	lsls	r1, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b0e      	ldr	r3, [pc, #56]	; (d5be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d2      	lsls	r2, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4770      	bx	lr
   d5bb2:	bf00      	nop
   d5bb4:	2003e7ec 	.word	0x2003e7ec
   d5bb8:	2003e7e8 	.word	0x2003e7e8
   d5bbc:	2003e7e4 	.word	0x2003e7e4
   d5bc0:	2003e7e0 	.word	0x2003e7e0
   d5bc4:	2003e7dc 	.word	0x2003e7dc
   d5bc8:	2003e7d8 	.word	0x2003e7d8
   d5bcc:	2003e7d4 	.word	0x2003e7d4
   d5bd0:	2003e7d0 	.word	0x2003e7d0
   d5bd4:	2003e7cc 	.word	0x2003e7cc
   d5bd8:	2003e7c8 	.word	0x2003e7c8
   d5bdc:	2003e7c4 	.word	0x2003e7c4
   d5be0:	2003e7c0 	.word	0x2003e7c0

000d5be4 <__cxa_atexit>:
   d5be4:	b510      	push	{r4, lr}
   d5be6:	4c05      	ldr	r4, [pc, #20]	; (d5bfc <__cxa_atexit+0x18>)
   d5be8:	4613      	mov	r3, r2
   d5bea:	b12c      	cbz	r4, d5bf8 <__cxa_atexit+0x14>
   d5bec:	460a      	mov	r2, r1
   d5bee:	4601      	mov	r1, r0
   d5bf0:	2002      	movs	r0, #2
   d5bf2:	f3af 8000 	nop.w
   d5bf6:	bd10      	pop	{r4, pc}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	00000000 	.word	0x00000000

000d5c00 <memcpy>:
   d5c00:	b510      	push	{r4, lr}
   d5c02:	1e43      	subs	r3, r0, #1
   d5c04:	440a      	add	r2, r1
   d5c06:	4291      	cmp	r1, r2
   d5c08:	d004      	beq.n	d5c14 <memcpy+0x14>
   d5c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5c12:	e7f8      	b.n	d5c06 <memcpy+0x6>
   d5c14:	bd10      	pop	{r4, pc}

000d5c16 <memset>:
   d5c16:	4402      	add	r2, r0
   d5c18:	4603      	mov	r3, r0
   d5c1a:	4293      	cmp	r3, r2
   d5c1c:	d002      	beq.n	d5c24 <memset+0xe>
   d5c1e:	f803 1b01 	strb.w	r1, [r3], #1
   d5c22:	e7fa      	b.n	d5c1a <memset+0x4>
   d5c24:	4770      	bx	lr
	...

000d5c28 <srand>:
   d5c28:	b538      	push	{r3, r4, r5, lr}
   d5c2a:	4b12      	ldr	r3, [pc, #72]	; (d5c74 <srand+0x4c>)
   d5c2c:	681c      	ldr	r4, [r3, #0]
   d5c2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c30:	4605      	mov	r5, r0
   d5c32:	b9d3      	cbnz	r3, d5c6a <srand+0x42>
   d5c34:	2018      	movs	r0, #24
   d5c36:	f7fe fdeb 	bl	d4810 <malloc>
   d5c3a:	f243 330e 	movw	r3, #13070	; 0x330e
   d5c3e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5c40:	8003      	strh	r3, [r0, #0]
   d5c42:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5c46:	8043      	strh	r3, [r0, #2]
   d5c48:	f241 2334 	movw	r3, #4660	; 0x1234
   d5c4c:	8083      	strh	r3, [r0, #4]
   d5c4e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5c52:	80c3      	strh	r3, [r0, #6]
   d5c54:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5c58:	8103      	strh	r3, [r0, #8]
   d5c5a:	2305      	movs	r3, #5
   d5c5c:	8143      	strh	r3, [r0, #10]
   d5c5e:	230b      	movs	r3, #11
   d5c60:	8183      	strh	r3, [r0, #12]
   d5c62:	2201      	movs	r2, #1
   d5c64:	2300      	movs	r3, #0
   d5c66:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	611d      	str	r5, [r3, #16]
   d5c70:	615a      	str	r2, [r3, #20]
   d5c72:	bd38      	pop	{r3, r4, r5, pc}
   d5c74:	2003e3ac 	.word	0x2003e3ac

000d5c78 <strcmp>:
   d5c78:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5c80:	2a01      	cmp	r2, #1
   d5c82:	bf28      	it	cs
   d5c84:	429a      	cmpcs	r2, r3
   d5c86:	d0f7      	beq.n	d5c78 <strcmp>
   d5c88:	1ad0      	subs	r0, r2, r3
   d5c8a:	4770      	bx	lr

000d5c8c <strcpy>:
   d5c8c:	4603      	mov	r3, r0
   d5c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5c92:	f803 2b01 	strb.w	r2, [r3], #1
   d5c96:	2a00      	cmp	r2, #0
   d5c98:	d1f9      	bne.n	d5c8e <strcpy+0x2>
   d5c9a:	4770      	bx	lr

000d5c9c <strdup>:
   d5c9c:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <strdup+0xc>)
   d5c9e:	4601      	mov	r1, r0
   d5ca0:	6818      	ldr	r0, [r3, #0]
   d5ca2:	f000 b803 	b.w	d5cac <_strdup_r>
   d5ca6:	bf00      	nop
   d5ca8:	2003e3ac 	.word	0x2003e3ac

000d5cac <_strdup_r>:
   d5cac:	b570      	push	{r4, r5, r6, lr}
   d5cae:	4606      	mov	r6, r0
   d5cb0:	4608      	mov	r0, r1
   d5cb2:	460c      	mov	r4, r1
   d5cb4:	f000 f80d 	bl	d5cd2 <strlen>
   d5cb8:	1c45      	adds	r5, r0, #1
   d5cba:	4629      	mov	r1, r5
   d5cbc:	4630      	mov	r0, r6
   d5cbe:	f7fe fdc7 	bl	d4850 <_malloc_r>
   d5cc2:	4606      	mov	r6, r0
   d5cc4:	b118      	cbz	r0, d5cce <_strdup_r+0x22>
   d5cc6:	462a      	mov	r2, r5
   d5cc8:	4621      	mov	r1, r4
   d5cca:	f7ff ff99 	bl	d5c00 <memcpy>
   d5cce:	4630      	mov	r0, r6
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}

000d5cd2 <strlen>:
   d5cd2:	4603      	mov	r3, r0
   d5cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5cd8:	2a00      	cmp	r2, #0
   d5cda:	d1fb      	bne.n	d5cd4 <strlen+0x2>
   d5cdc:	1a18      	subs	r0, r3, r0
   d5cde:	3801      	subs	r0, #1
   d5ce0:	4770      	bx	lr

000d5ce2 <link_code_end>:
	...

000d5ce4 <dynalib_user>:
   d5ce4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5cf4:	0000 0000 0030 6143 7272 6569 2072 6553     ....0.Carrier Se
   d5d04:	656c 7463 6f69 206e 6f4d 6564 7420 206f     lection Mode to 
   d5d14:	7541 6f74 616d 6974 2063 202d 6552 6573     Automatic - Rese
   d5d24:	7474 6e69 0067 6143 7272 6569 2072 6f46     tting.Carrier Fo
   d5d34:	6372 6465 7420 206f 5441 5426 2d20 5220     rced to AT&T - R
   d5d44:	7365 7465 6974 676e 3200 4300 7261 6972     esetting.2.Carri
   d5d54:	7265 4620 726f 6563 2064 6f74 5420 4d2d     er Forced to T-M
   d5d64:	626f 6c69 2065 202d 6552 6573 7474 6e69     obile - Resettin
   d5d74:	0067 0033 6143 7272 6569 2072 6f46 6372     g.3.Carrier Forc
   d5d84:	6465 7420 206f 6941 7472 6c65 2d20 5220     ed to Airtel - R
   d5d94:	7365 7465 6974 676e 3400 4300 7261 6972     esetting.4.Carri
   d5da4:	7265 4620 726f 6563 2064 6f74 4d20 4e54     er Forced to MTN
   d5db4:	522f 6177 646e 4361 6c65 206c 202d 6552     /RwandaCell - Re
   d5dc4:	6573 7474 6e69 0067 0035 6143 7272 6569     setting.5.Carrie
   d5dd4:	2072 6f46 6372 6465 7420 206f 4954 4f47     r Forced to TIGO
   d5de4:	2d20 5220 7365 7465 6974 676e 4100 7475      - Resetting.Aut
   d5df4:	6d6f 7461 6369 4100 2b54 4f43 5350 323d     omatic.AT+COPS=2
   d5e04:	0a0d 4100 2b54 4f43 5350 303d 0a0d 4100     ...AT+COPS=0...A
   d5e14:	2654 0054 5441 432b 504f 3d53 2c34 2c32     T&T.AT+COPS=4,2,
   d5e24:	3322 3031 3134 2230 0a0d 5400 4d2d 626f     "310410"...T-Mob
   d5e34:	6c69 0065 5441 432b 504f 3d53 2c34 2c32     ile.AT+COPS=4,2,
   d5e44:	3322 3031 3632 2230 0a0d 4100 7269 6574     "310260"...Airte
   d5e54:	006c 5441 432b 504f 3d53 2c34 2c32 3622     l.AT+COPS=4,2,"6
   d5e64:	3533 3431 0d22 000a 544d 2f4e 7752 6e61     3514"...MTN/Rwan
   d5e74:	6164 6563 6c6c 4100 2b54 4f43 5350 343d     dacell.AT+COPS=4
   d5e84:	322c 222c 3336 3135 2230 0a0d 5400 4749     ,2,"63510"...TIG
   d5e94:	004f 5441 432b 504f 3d53 2c34 2c32 3622     O.AT+COPS=4,2,"6
   d5ea4:	3533 3331 0d22 000a 6544 6166 6c75 0074     3513"...Default.
   d5eb4:	6163 7272 6569 4d72 646f 0065 6556 7372     carrierMode.Vers
   d5ec4:	6f69 006e 6573 4374 7261 6972 7265 6f4d     ion.setCarrierMo
   d5ed4:	6564 0000                                   de..

000d5ed8 <_ZTVN5spark13CellularClassE>:
	...
   d5ee0:	4933 000d 4929 000d 491f 000d 48d5 000d     3I..)I...I...H..
   d5ef0:	4913 000d 4907 000d 48fb 000d 48f3 000d     .I...I...H...H..
   d5f00:	48e9 000d 48df 000d 52d5 000d               .H...H...R..

000d5f0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5f14:	496d 000d 4973 000d 49c9 000d 4981 000d     mI..sI...I...I..
   d5f24:	496f 000d                                   oI..

000d5f28 <_ZTVN5spark13EthernetClassE>:
	...
   d5f30:	4fdf 000d 4fd5 000d 4fcb 000d 4fc1 000d     .O...O...O...O..
   d5f40:	4fb5 000d 4fa9 000d 4f9d 000d 4f95 000d     .O...O...O...O..
   d5f50:	4f8b 000d 4f81 000d 52d5 000d               .O...O...R..

000d5f5c <_ZTV9IPAddress>:
	...
   d5f64:	500d 000d 4ffd 000d 4fff 000d 6162 6475     .P...O...O..baud
   d5f74:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5f84:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5f94:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5fa4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5fb4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5fc4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5fd4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5fe4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5ff4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6004:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6014:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d6024:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d6034:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6044:	6170 696e 0063 6c61 006c 0000               panic.all...

000d6050 <_ZTVN5spark9MeshClassE>:
	...
   d6058:	514f 000d 5145 000d 513b 000d 5131 000d     OQ..EQ..;Q..1Q..
   d6068:	5125 000d 5119 000d 510d 000d 5105 000d     %Q...Q...Q...Q..
   d6078:	50fb 000d 50f1 000d 52d5 000d               .P...P...R..

000d6084 <_ZTVN5spark12NetworkClassE>:
	...
   d608c:	526d 000d 5277 000d 5281 000d 528b 000d     mR..wR...R...R..
   d609c:	5295 000d 52a1 000d 52ad 000d 52b9 000d     .R...R...R...R..
   d60ac:	52c1 000d 52cb 000d 52d5 000d 005a 2b25     .R...R...R..Z.%+
   d60bc:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d60cc:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d60dc:	6974 656d 0000 0000                         time....

000d60e4 <_ZTV11USARTSerial>:
	...
   d60ec:	55d5 000d 5625 000d 5633 000d 53b5 000d     .U..%V..3V...S..
   d60fc:	55e9 000d 560b 000d 55f7 000d 561f 000d     .U...V...U...V..
   d610c:	55d7 000d 55db 000d                         .U...U..

000d6114 <_ZTV9USBSerial>:
	...
   d611c:	56d5 000d 5725 000d 5733 000d 53b5 000d     .V..%W..3W...S..
   d612c:	5711 000d 56d7 000d 56ed 000d 571f 000d     .W...V...V...W..
   d613c:	5703 000d 56d1 000d                         .W...V..

000d6144 <__sf_fake_stdin>:
	...

000d6164 <__sf_fake_stdout>:
	...

000d6184 <__sf_fake_stderr>:
	...
   d61a4:	0043                                        C.

000d61a6 <link_const_variable_data_end>:
	...

000d61a8 <link_constructors_location>:
   d61a8:	000d4441 	.word	0x000d4441
   d61ac:	000d48ad 	.word	0x000d48ad
   d61b0:	000d493d 	.word	0x000d493d
   d61b4:	000d4fe9 	.word	0x000d4fe9
   d61b8:	000d50e1 	.word	0x000d50e1
   d61bc:	000d521d 	.word	0x000d521d
   d61c0:	000d53a1 	.word	0x000d53a1
   d61c4:	000d5455 	.word	0x000d5455
   d61c8:	000d558d 	.word	0x000d558d
   d61cc:	000d55c1 	.word	0x000d55c1
   d61d0:	000d5955 	.word	0x000d5955
   d61d4:	000d5a19 	.word	0x000d5a19
   d61d8:	000d5a9d 	.word	0x000d5a9d
   d61dc:	000d5b21 	.word	0x000d5b21
