
/Users/chipmc/Documents/Maker/Particle/Utilities/Force-Carrier-Test/target/1.5.2/electron/Force-Carrier-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001de4  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08081e00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  08081e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000584  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08081e7c  08081e7c  00021e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08081ea4  08081ea4  00021ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008a9ec  00000000  00000000  00021ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ba01  00000000  00000000  000ac894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010c18  00000000  00000000  000b8295  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001840  00000000  00000000  000c8ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002bc0  00000000  00000000  000ca6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ef0d  00000000  00000000  000cd2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019a45  00000000  00000000  000ec1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6aa5  00000000  00000000  00105bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a964  00000000  00000000  001ac6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 fc69 	bl	8081904 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 fc6e 	bl	808191a <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08081e04 	.word	0x08081e04
 808004c:	20000078 	.word	0x20000078
 8080050:	20000078 	.word	0x20000078
 8080054:	200005fc 	.word	0x200005fc
 8080058:	200005fc 	.word	0x200005fc

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 faad 	bl	80815bc <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08081dc8 	.word	0x08081dc8
 8080084:	08081df8 	.word	0x08081df8

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b822 	b.w	80800d0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f839 	bl	8080104 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 ba53 	b.w	8081540 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bb51 	b.w	8080740 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bb57 	b.w	8080750 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800b2:	b510      	push	{r4, lr}
 80800b4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80800b6:	6800      	ldr	r0, [r0, #0]
 80800b8:	b108      	cbz	r0, 80800be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80800ba:	f000 fb49 	bl	8080750 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800be:	4620      	mov	r0, r4
 80800c0:	bd10      	pop	{r4, pc}

080800c2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80800c2:	2300      	movs	r3, #0
 80800c4:	461a      	mov	r2, r3
 80800c6:	4619      	mov	r1, r3
 80800c8:	6840      	ldr	r0, [r0, #4]
 80800ca:	f000 bb09 	b.w	80806e0 <network_on>
	...

080800d0 <setup>:
char carrierModeStr[16] = "Automatic";                      // Default mode is Automatic
int carrierMode = 0;                                        // Default settings - automatic carrier selection



void setup() {
 80800d0:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80800d2:	f000 fabd 	bl	8080650 <spark_cloud_flag_connect>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80800d6:	2300      	movs	r3, #0
 80800d8:	2202      	movs	r2, #2
 80800da:	4905      	ldr	r1, [pc, #20]	; (80800f0 <setup+0x20>)
 80800dc:	4805      	ldr	r0, [pc, #20]	; (80800f4 <setup+0x24>)
 80800de:	f000 fa9f 	bl	8080620 <spark_variable>

  Particle.variable("carrierMode",carrierMode);

  Particle.function("setCarrierMode",setCarrierMode);

}
 80800e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80800e6:	4a04      	ldr	r2, [pc, #16]	; (80800f8 <setup+0x28>)
 80800e8:	4904      	ldr	r1, [pc, #16]	; (80800fc <setup+0x2c>)
 80800ea:	4805      	ldr	r0, [pc, #20]	; (8080100 <setup+0x30>)
 80800ec:	f000 bc33 	b.w	8080956 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80800f0:	2000008c 	.word	0x2000008c
 80800f4:	080819fc 	.word	0x080819fc
 80800f8:	08081a08 	.word	0x08081a08
 80800fc:	080802b5 	.word	0x080802b5
 8080100:	0808092b 	.word	0x0808092b

08080104 <loop>:


void loop() {
 8080104:	4770      	bx	lr
	...

08080108 <_Z17connectToParticlev>:
  connectToParticle();

  return 1;
}

bool connectToParticle() {
 8080108:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  Cellular.on();
 808010c:	4818      	ldr	r0, [pc, #96]	; (8080170 <_Z17connectToParticlev+0x68>)
 808010e:	f7ff ffd8 	bl	80800c2 <_ZN5spark13CellularClass2onEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080112:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080116:	f000 fa9b 	bl	8080650 <spark_cloud_flag_connect>
 808011a:	f44f 7496 	mov.w	r4, #300	; 0x12c
 808011e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080120:	2000      	movs	r0, #0
 8080122:	f000 f9d1 	bl	80804c8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080126:	4680      	mov	r8, r0
 8080128:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808012c:	2000      	movs	r0, #0
 808012e:	f000 f9cb 	bl	80804c8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080132:	ebb0 0008 	subs.w	r0, r0, r8
 8080136:	eb61 0109 	sbc.w	r1, r1, r9
 808013a:	428f      	cmp	r7, r1
 808013c:	bf08      	it	eq
 808013e:	4286      	cmpeq	r6, r0
 8080140:	d305      	bcc.n	808014e <_Z17connectToParticlev+0x46>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080142:	f000 fa95 	bl	8080670 <spark_cloud_flag_connected>
 8080146:	b910      	cbnz	r0, 808014e <_Z17connectToParticlev+0x46>
            spark_process();
 8080148:	f000 fa7a 	bl	8080640 <spark_process>
 808014c:	e7ee      	b.n	808012c <_Z17connectToParticlev+0x24>
 808014e:	f000 fa8f 	bl	8080670 <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080152:	b118      	cbz	r0, 808015c <_Z17connectToParticlev+0x54>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 8080154:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 8080158:	f000 ba8a 	b.w	8080670 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808015c:	f000 f9ac 	bl	80804b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080160:	4b04      	ldr	r3, [pc, #16]	; (8080174 <_Z17connectToParticlev+0x6c>)
 8080162:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080164:	f000 fa6c 	bl	8080640 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080168:	3c01      	subs	r4, #1
 808016a:	d0f3      	beq.n	8080154 <_Z17connectToParticlev+0x4c>
 808016c:	e7d8      	b.n	8080120 <_Z17connectToParticlev+0x18>
 808016e:	bf00      	nop
 8080170:	20000090 	.word	0x20000090
 8080174:	20000550 	.word	0x20000550

08080178 <_Z12notConnectedv>:
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 8080178:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808017a:	f000 fa79 	bl	8080670 <spark_cloud_flag_connected>
  return !Particle.connected();
 808017e:	f080 0001 	eor.w	r0, r0, #1
 8080182:	b2c0      	uxtb	r0, r0
 8080184:	bd08      	pop	{r3, pc}
	...

08080188 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 8080188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 808018a:	f000 fa69 	bl	8080660 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808018e:	2000      	movs	r0, #0
 8080190:	f000 f99a 	bl	80804c8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080194:	f643 2697 	movw	r6, #14999	; 0x3a97
 8080198:	4604      	mov	r4, r0
 808019a:	2500      	movs	r5, #0
 808019c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808019e:	2000      	movs	r0, #0
 80801a0:	f000 f992 	bl	80804c8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801a4:	1b00      	subs	r0, r0, r4
 80801a6:	eb61 0105 	sbc.w	r1, r1, r5
 80801aa:	428f      	cmp	r7, r1
 80801ac:	bf08      	it	eq
 80801ae:	4286      	cmpeq	r6, r0
 80801b0:	d305      	bcc.n	80801be <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
 80801b2:	f7ff ffe1 	bl	8080178 <_Z12notConnectedv>
 80801b6:	b910      	cbnz	r0, 80801be <_Z22disconnectFromParticlev+0x36>
            spark_process();
 80801b8:	f000 fa42 	bl	8080640 <spark_process>
 80801bc:	e7ef      	b.n	808019e <_Z22disconnectFromParticlev+0x16>
 80801be:	f7ff ffdb 	bl	8080178 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80801c2:	4804      	ldr	r0, [pc, #16]	; (80801d4 <_Z22disconnectFromParticlev+0x4c>)
 80801c4:	2300      	movs	r3, #0
 80801c6:	461a      	mov	r2, r3
 80801c8:	4619      	mov	r1, r3
 80801ca:	6840      	ldr	r0, [r0, #4]
 80801cc:	f000 fa90 	bl	80806f0 <network_off>
  Cellular.off();
  return true;
}
 80801d0:	2001      	movs	r0, #1
 80801d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80801d4:	20000090 	.word	0x20000090

080801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80801da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80801de:	b17c      	cbz	r4, 8080200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80801e0:	6863      	ldr	r3, [r4, #4]
 80801e2:	3b01      	subs	r3, #1
 80801e4:	6063      	str	r3, [r4, #4]
 80801e6:	b95b      	cbnz	r3, 8080200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80801e8:	6823      	ldr	r3, [r4, #0]
 80801ea:	4620      	mov	r0, r4
 80801ec:	689b      	ldr	r3, [r3, #8]
 80801ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80801f0:	68a3      	ldr	r3, [r4, #8]
 80801f2:	3b01      	subs	r3, #1
 80801f4:	60a3      	str	r3, [r4, #8]
 80801f6:	b91b      	cbnz	r3, 8080200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80801f8:	6823      	ldr	r3, [r4, #0]
 80801fa:	4620      	mov	r0, r4
 80801fc:	68db      	ldr	r3, [r3, #12]
 80801fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080200:	4628      	mov	r0, r5
 8080202:	bd38      	pop	{r3, r4, r5, pc}

08080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>:
    bool getBandAvailable(CellularBand &data_get);

    template<typename... Targs>
    inline int command(const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, 10000, format, Fargs...);
 8080204:	460b      	mov	r3, r1
 8080206:	2100      	movs	r1, #0
 8080208:	f242 7210 	movw	r2, #10000	; 0x2710
 808020c:	4608      	mov	r0, r1
 808020e:	f000 b943 	b.w	8080498 <cellular_command>
	...

08080214 <_Z20carrierSelectionModev>:
void loop() {


}

void carrierSelectionMode() {
 8080214:	b510      	push	{r4, lr}
  Cellular.on();
 8080216:	4c1e      	ldr	r4, [pc, #120]	; (8080290 <_Z20carrierSelectionModev+0x7c>)
 8080218:	4620      	mov	r0, r4
 808021a:	f7ff ff52 	bl	80800c2 <_ZN5spark13CellularClass2onEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808021e:	2200      	movs	r2, #0
 8080220:	2102      	movs	r1, #2
 8080222:	6860      	ldr	r0, [r4, #4]
 8080224:	f000 fa4c 	bl	80806c0 <network_disconnect>
  Cellular.disconnect();

  if (carrierMode == 0) {
 8080228:	4b1a      	ldr	r3, [pc, #104]	; (8080294 <_Z20carrierSelectionModev+0x80>)
 808022a:	681b      	ldr	r3, [r3, #0]
 808022c:	b92b      	cbnz	r3, 808023a <_Z20carrierSelectionModev+0x26>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808022e:	491a      	ldr	r1, [pc, #104]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080230:	4620      	mov	r0, r4
 8080232:	f7ff ffe7 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=0\r\n");                      // Automatic mode
 8080236:	4919      	ldr	r1, [pc, #100]	; (808029c <_Z20carrierSelectionModev+0x88>)
 8080238:	e026      	b.n	8080288 <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 1) {
 808023a:	2b01      	cmp	r3, #1
 808023c:	d105      	bne.n	808024a <_Z20carrierSelectionModev+0x36>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808023e:	4916      	ldr	r1, [pc, #88]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080240:	4620      	mov	r0, r4
 8080242:	f7ff ffdf 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"310410\"\r\n");         // Manually connect to AT&T, and fallback to automatic mode if failed
 8080246:	4916      	ldr	r1, [pc, #88]	; (80802a0 <_Z20carrierSelectionModev+0x8c>)
 8080248:	e01e      	b.n	8080288 <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 2) {
 808024a:	2b02      	cmp	r3, #2
 808024c:	d105      	bne.n	808025a <_Z20carrierSelectionModev+0x46>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808024e:	4912      	ldr	r1, [pc, #72]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080250:	4620      	mov	r0, r4
 8080252:	f7ff ffd7 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"310260\"\r\n");         // Manually connect to T-mobile, and fallback to automatic mode if failed
 8080256:	4913      	ldr	r1, [pc, #76]	; (80802a4 <_Z20carrierSelectionModev+0x90>)
 8080258:	e016      	b.n	8080288 <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 3) {
 808025a:	2b03      	cmp	r3, #3
 808025c:	d105      	bne.n	808026a <_Z20carrierSelectionModev+0x56>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808025e:	490e      	ldr	r1, [pc, #56]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080260:	4620      	mov	r0, r4
 8080262:	f7ff ffcf 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63514\"\r\n");         // Manually connect to Airtel, and fallback to automatic mode if failed
 8080266:	4910      	ldr	r1, [pc, #64]	; (80802a8 <_Z20carrierSelectionModev+0x94>)
 8080268:	e00e      	b.n	8080288 <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 4) {
 808026a:	2b04      	cmp	r3, #4
 808026c:	d105      	bne.n	808027a <_Z20carrierSelectionModev+0x66>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808026e:	490a      	ldr	r1, [pc, #40]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080270:	4620      	mov	r0, r4
 8080272:	f7ff ffc7 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63510\"\r\n");         // Manually connect to MTN/RwandaCell, and fallback to automatic mode if failed
 8080276:	490d      	ldr	r1, [pc, #52]	; (80802ac <_Z20carrierSelectionModev+0x98>)
 8080278:	e006      	b.n	8080288 <_Z20carrierSelectionModev+0x74>
  }
  else if (carrierMode == 5) {
 808027a:	2b05      	cmp	r3, #5
 808027c:	d107      	bne.n	808028e <_Z20carrierSelectionModev+0x7a>
    Cellular.command("AT+COPS=2\r\n");                      // First de-register from the network
 808027e:	4906      	ldr	r1, [pc, #24]	; (8080298 <_Z20carrierSelectionModev+0x84>)
 8080280:	4620      	mov	r0, r4
 8080282:	f7ff ffbf 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
    Cellular.command("AT+COPS=4,2,\"63513\"\r\n");         // Manually connect to TIGO, and fallback to automatic mode if failed
 8080286:	490a      	ldr	r1, [pc, #40]	; (80802b0 <_Z20carrierSelectionModev+0x9c>)
 8080288:	4620      	mov	r0, r4
 808028a:	f7ff ffbb 	bl	8080204 <_ZN5spark13CellularClass7commandIIEEEiPKcDpT_>
 808028e:	bd10      	pop	{r4, pc}
 8080290:	20000090 	.word	0x20000090
 8080294:	2000008c 	.word	0x2000008c
 8080298:	08081a17 	.word	0x08081a17
 808029c:	08081a23 	.word	0x08081a23
 80802a0:	08081a2f 	.word	0x08081a2f
 80802a4:	08081a46 	.word	0x08081a46
 80802a8:	08081a5d 	.word	0x08081a5d
 80802ac:	08081a73 	.word	0x08081a73
 80802b0:	08081a89 	.word	0x08081a89

080802b4 <_Z14setCarrierMode6String>:
  }
}

int setCarrierMode(String command)                          // Function to force sending data in current hour
{
 80802b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80802b6:	494b      	ldr	r1, [pc, #300]	; (80803e4 <_Z14setCarrierMode6String+0x130>)
 80802b8:	4604      	mov	r4, r0
 80802ba:	f000 ff81 	bl	80811c0 <_ZNK6String6equalsEPKc>
  if (command == "0")
 80802be:	b188      	cbz	r0, 80802e4 <_Z14setCarrierMode6String+0x30>
  {
    carrierMode = 0;
 80802c0:	4b49      	ldr	r3, [pc, #292]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 80802c2:	2200      	movs	r2, #0
    strcpy(carrierModeStr,"Automatic");
 80802c4:	4949      	ldr	r1, [pc, #292]	; (80803ec <_Z14setCarrierMode6String+0x138>)
 80802c6:	484a      	ldr	r0, [pc, #296]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)

int setCarrierMode(String command)                          // Function to force sending data in current hour
{
  if (command == "0")
  {
    carrierMode = 0;
 80802c8:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"Automatic");
 80802ca:	f001 fb61 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802ce:	f000 f9cf 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Carrier Selection Mode", PRIVATE);
 80802d2:	2800      	cmp	r0, #0
 80802d4:	d07d      	beq.n	80803d2 <_Z14setCarrierMode6String+0x11e>
 80802d6:	4b47      	ldr	r3, [pc, #284]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80802d8:	4a47      	ldr	r2, [pc, #284]	; (80803f8 <_Z14setCarrierMode6String+0x144>)
 80802da:	781b      	ldrb	r3, [r3, #0]
 80802dc:	f88d 3000 	strb.w	r3, [sp]
 80802e0:	233c      	movs	r3, #60	; 0x3c
 80802e2:	e06f      	b.n	80803c4 <_Z14setCarrierMode6String+0x110>
 80802e4:	4945      	ldr	r1, [pc, #276]	; (80803fc <_Z14setCarrierMode6String+0x148>)
 80802e6:	4620      	mov	r0, r4
 80802e8:	f000 ff6a 	bl	80811c0 <_ZNK6String6equalsEPKc>
  }
  else if (command == "1")
 80802ec:	b188      	cbz	r0, 8080312 <_Z14setCarrierMode6String+0x5e>
  {
    carrierMode = 1;
 80802ee:	4b3e      	ldr	r3, [pc, #248]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 80802f0:	2201      	movs	r2, #1
    strcpy(carrierModeStr,"AT&T");
 80802f2:	4943      	ldr	r1, [pc, #268]	; (8080400 <_Z14setCarrierMode6String+0x14c>)
 80802f4:	483e      	ldr	r0, [pc, #248]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"Automatic");
    if (Particle.connected()) Particle.publish("Mode","Cleared Carrier Selection Mode", PRIVATE);
  }
  else if (command == "1")
  {
    carrierMode = 1;
 80802f6:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"AT&T");
 80802f8:	f001 fb4a 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802fc:	f000 f9b8 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to AT&T", PRIVATE);
 8080300:	2800      	cmp	r0, #0
 8080302:	d066      	beq.n	80803d2 <_Z14setCarrierMode6String+0x11e>
 8080304:	4b3b      	ldr	r3, [pc, #236]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080306:	4a3f      	ldr	r2, [pc, #252]	; (8080404 <_Z14setCarrierMode6String+0x150>)
 8080308:	781b      	ldrb	r3, [r3, #0]
 808030a:	f88d 3000 	strb.w	r3, [sp]
 808030e:	233c      	movs	r3, #60	; 0x3c
 8080310:	e058      	b.n	80803c4 <_Z14setCarrierMode6String+0x110>
 8080312:	493d      	ldr	r1, [pc, #244]	; (8080408 <_Z14setCarrierMode6String+0x154>)
 8080314:	4620      	mov	r0, r4
 8080316:	f000 ff53 	bl	80811c0 <_ZNK6String6equalsEPKc>
  }
  else if (command == "2")
 808031a:	b188      	cbz	r0, 8080340 <_Z14setCarrierMode6String+0x8c>
  {
    carrierMode = 2;
 808031c:	4b32      	ldr	r3, [pc, #200]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 808031e:	2202      	movs	r2, #2
    strcpy(carrierModeStr,"T-Mobile");
 8080320:	493a      	ldr	r1, [pc, #232]	; (808040c <_Z14setCarrierMode6String+0x158>)
 8080322:	4833      	ldr	r0, [pc, #204]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"AT&T");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to AT&T", PRIVATE);
  }
  else if (command == "2")
  {
    carrierMode = 2;
 8080324:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"T-Mobile");
 8080326:	f001 fb33 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808032a:	f000 f9a1 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to T-Mobile", PRIVATE);
 808032e:	2800      	cmp	r0, #0
 8080330:	d04f      	beq.n	80803d2 <_Z14setCarrierMode6String+0x11e>
 8080332:	4b30      	ldr	r3, [pc, #192]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080334:	4a36      	ldr	r2, [pc, #216]	; (8080410 <_Z14setCarrierMode6String+0x15c>)
 8080336:	781b      	ldrb	r3, [r3, #0]
 8080338:	f88d 3000 	strb.w	r3, [sp]
 808033c:	233c      	movs	r3, #60	; 0x3c
 808033e:	e041      	b.n	80803c4 <_Z14setCarrierMode6String+0x110>
 8080340:	4934      	ldr	r1, [pc, #208]	; (8080414 <_Z14setCarrierMode6String+0x160>)
 8080342:	4620      	mov	r0, r4
 8080344:	f000 ff3c 	bl	80811c0 <_ZNK6String6equalsEPKc>
  }
  else if (command == "3")
 8080348:	b188      	cbz	r0, 808036e <_Z14setCarrierMode6String+0xba>
  {
    carrierMode = 3;
 808034a:	4b27      	ldr	r3, [pc, #156]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 808034c:	2203      	movs	r2, #3
    strcpy(carrierModeStr,"Airtel");
 808034e:	4932      	ldr	r1, [pc, #200]	; (8080418 <_Z14setCarrierMode6String+0x164>)
 8080350:	4827      	ldr	r0, [pc, #156]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"T-Mobile");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to T-Mobile", PRIVATE);
  }
  else if (command == "3")
  {
    carrierMode = 3;
 8080352:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"Airtel");
 8080354:	f001 fb1c 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080358:	f000 f98a 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to Airtel", PRIVATE);
 808035c:	2800      	cmp	r0, #0
 808035e:	d038      	beq.n	80803d2 <_Z14setCarrierMode6String+0x11e>
 8080360:	4b24      	ldr	r3, [pc, #144]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080362:	4a2e      	ldr	r2, [pc, #184]	; (808041c <_Z14setCarrierMode6String+0x168>)
 8080364:	781b      	ldrb	r3, [r3, #0]
 8080366:	f88d 3000 	strb.w	r3, [sp]
 808036a:	233c      	movs	r3, #60	; 0x3c
 808036c:	e02a      	b.n	80803c4 <_Z14setCarrierMode6String+0x110>
 808036e:	492c      	ldr	r1, [pc, #176]	; (8080420 <_Z14setCarrierMode6String+0x16c>)
 8080370:	4620      	mov	r0, r4
 8080372:	f000 ff25 	bl	80811c0 <_ZNK6String6equalsEPKc>
  }
  else if (command == "4")
 8080376:	b180      	cbz	r0, 808039a <_Z14setCarrierMode6String+0xe6>
  {
    carrierMode = 4;
 8080378:	4b1b      	ldr	r3, [pc, #108]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 808037a:	2204      	movs	r2, #4
    strcpy(carrierModeStr,"MTN");
 808037c:	4929      	ldr	r1, [pc, #164]	; (8080424 <_Z14setCarrierMode6String+0x170>)
 808037e:	481c      	ldr	r0, [pc, #112]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"Airtel");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to Airtel", PRIVATE);
  }
  else if (command == "4")
  {
    carrierMode = 4;
 8080380:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"MTN");
 8080382:	f001 fb05 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080386:	f000 f973 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to MTN/RwandaCell", PRIVATE);
 808038a:	b310      	cbz	r0, 80803d2 <_Z14setCarrierMode6String+0x11e>
 808038c:	4b19      	ldr	r3, [pc, #100]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808038e:	4a26      	ldr	r2, [pc, #152]	; (8080428 <_Z14setCarrierMode6String+0x174>)
 8080390:	781b      	ldrb	r3, [r3, #0]
 8080392:	f88d 3000 	strb.w	r3, [sp]
 8080396:	233c      	movs	r3, #60	; 0x3c
 8080398:	e014      	b.n	80803c4 <_Z14setCarrierMode6String+0x110>
 808039a:	4924      	ldr	r1, [pc, #144]	; (808042c <_Z14setCarrierMode6String+0x178>)
 808039c:	4620      	mov	r0, r4
 808039e:	f000 ff0f 	bl	80811c0 <_ZNK6String6equalsEPKc>
  }
  else if (command == "5")
 80803a2:	b1e8      	cbz	r0, 80803e0 <_Z14setCarrierMode6String+0x12c>
  {
    carrierMode = 5;
 80803a4:	4b10      	ldr	r3, [pc, #64]	; (80803e8 <_Z14setCarrierMode6String+0x134>)
 80803a6:	2205      	movs	r2, #5
    strcpy(carrierModeStr,"TIGO");
 80803a8:	4921      	ldr	r1, [pc, #132]	; (8080430 <_Z14setCarrierMode6String+0x17c>)
 80803aa:	4811      	ldr	r0, [pc, #68]	; (80803f0 <_Z14setCarrierMode6String+0x13c>)
    strcpy(carrierModeStr,"MTN");
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to MTN/RwandaCell", PRIVATE);
  }
  else if (command == "5")
  {
    carrierMode = 5;
 80803ac:	601a      	str	r2, [r3, #0]
    strcpy(carrierModeStr,"TIGO");
 80803ae:	f001 faef 	bl	8081990 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80803b2:	f000 f95d 	bl	8080670 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Carrier Forced to TIGO", PRIVATE);
 80803b6:	b160      	cbz	r0, 80803d2 <_Z14setCarrierMode6String+0x11e>
 80803b8:	4b0e      	ldr	r3, [pc, #56]	; (80803f4 <_Z14setCarrierMode6String+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80803ba:	4a1e      	ldr	r2, [pc, #120]	; (8080434 <_Z14setCarrierMode6String+0x180>)
 80803bc:	781b      	ldrb	r3, [r3, #0]
 80803be:	f88d 3000 	strb.w	r3, [sp]
 80803c2:	233c      	movs	r3, #60	; 0x3c
 80803c4:	a802      	add	r0, sp, #8
 80803c6:	491c      	ldr	r1, [pc, #112]	; (8080438 <_Z14setCarrierMode6String+0x184>)
 80803c8:	f000 fbec 	bl	8080ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80803cc:	a803      	add	r0, sp, #12
 80803ce:	f7ff ff03 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  else return 0;
      
  disconnectFromParticle();
 80803d2:	f7ff fed9 	bl	8080188 <_Z22disconnectFromParticlev>
  carrierSelectionMode();
 80803d6:	f7ff ff1d 	bl	8080214 <_Z20carrierSelectionModev>
  connectToParticle();
 80803da:	f7ff fe95 	bl	8080108 <_Z17connectToParticlev>

  return 1;
 80803de:	2001      	movs	r0, #1
}
 80803e0:	b004      	add	sp, #16
 80803e2:	bd10      	pop	{r4, pc}
 80803e4:	08081a9f 	.word	0x08081a9f
 80803e8:	2000008c 	.word	0x2000008c
 80803ec:	08081aa1 	.word	0x08081aa1
 80803f0:	20000000 	.word	0x20000000
 80803f4:	2000007c 	.word	0x2000007c
 80803f8:	08081aab 	.word	0x08081aab
 80803fc:	08081bd5 	.word	0x08081bd5
 8080400:	08081adc 	.word	0x08081adc
 8080404:	08081aca 	.word	0x08081aca
 8080408:	08081ae1 	.word	0x08081ae1
 808040c:	08081af5 	.word	0x08081af5
 8080410:	08081ae3 	.word	0x08081ae3
 8080414:	08081afe 	.word	0x08081afe
 8080418:	08081b12 	.word	0x08081b12
 808041c:	08081b00 	.word	0x08081b00
 8080420:	08081b19 	.word	0x08081b19
 8080424:	08081b1b 	.word	0x08081b1b
 8080428:	08081b1f 	.word	0x08081b1f
 808042c:	08081b40 	.word	0x08081b40
 8080430:	08081b54 	.word	0x08081b54
 8080434:	08081b42 	.word	0x08081b42
 8080438:	08081ac5 	.word	0x08081ac5

0808043c <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808043c:	4b0e      	ldr	r3, [pc, #56]	; (8080478 <_GLOBAL__sub_I_SystemMode+0x3c>)
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
 808043e:	b570      	push	{r4, r5, r6, lr}
 8080440:	2601      	movs	r6, #1
 8080442:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080444:	f000 f848 	bl	80804d8 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8080448:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808044c:	4c0b      	ldr	r4, [pc, #44]	; (808047c <_GLOBAL__sub_I_SystemMode+0x40>)
 808044e:	2500      	movs	r5, #0

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080450:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8080452:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8080454:	6025      	str	r5, [r4, #0]
 8080456:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8080458:	71a5      	strb	r5, [r4, #6]
 808045a:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808045c:	f000 f8ac 	bl	80805b8 <set_system_mode>
310	410	us	United States	1	            AT&T Wireless Inc
310	260	us	United States	1	            T-Mobile
*/


SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
 8080460:	4907      	ldr	r1, [pc, #28]	; (8080480 <_GLOBAL__sub_I_SystemMode+0x44>)
 8080462:	4620      	mov	r0, r4
 8080464:	4a07      	ldr	r2, [pc, #28]	; (8080484 <_GLOBAL__sub_I_SystemMode+0x48>)
 8080466:	f001 f8ed 	bl	8081644 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 808046a:	4629      	mov	r1, r5
 808046c:	4630      	mov	r0, r6
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
 808046e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
310	260	us	United States	1	            T-Mobile
*/


SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 8080472:	f000 b8a9 	b.w	80805c8 <system_thread_set_state>
 8080476:	bf00      	nop
 8080478:	2000007c 	.word	0x2000007c
 808047c:	20000080 	.word	0x20000080
 8080480:	080800b3 	.word	0x080800b3
 8080484:	20000078 	.word	0x20000078

08080488 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080488:	b508      	push	{r3, lr}
 808048a:	4b02      	ldr	r3, [pc, #8]	; (8080494 <inet_gethostbyname+0xc>)
 808048c:	681b      	ldr	r3, [r3, #0]
 808048e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080490:	9301      	str	r3, [sp, #4]
 8080492:	bd08      	pop	{r3, pc}
 8080494:	08060020 	.word	0x08060020

08080498 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8080498:	b508      	push	{r3, lr}
 808049a:	4b02      	ldr	r3, [pc, #8]	; (80804a4 <cellular_command+0xc>)
 808049c:	681b      	ldr	r3, [r3, #0]
 808049e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80804a0:	9301      	str	r3, [sp, #4]
 80804a2:	bd08      	pop	{r3, pc}
 80804a4:	08060020 	.word	0x08060020

080804a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80804a8:	b508      	push	{r3, lr}
 80804aa:	4b02      	ldr	r3, [pc, #8]	; (80804b4 <HAL_RNG_GetRandomNumber+0xc>)
 80804ac:	681b      	ldr	r3, [r3, #0]
 80804ae:	685b      	ldr	r3, [r3, #4]
 80804b0:	9301      	str	r3, [sp, #4]
 80804b2:	bd08      	pop	{r3, pc}
 80804b4:	0804019c 	.word	0x0804019c

080804b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80804b8:	b508      	push	{r3, lr}
 80804ba:	4b02      	ldr	r3, [pc, #8]	; (80804c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80804bc:	681b      	ldr	r3, [r3, #0]
 80804be:	695b      	ldr	r3, [r3, #20]
 80804c0:	9301      	str	r3, [sp, #4]
 80804c2:	bd08      	pop	{r3, pc}
 80804c4:	0804019c 	.word	0x0804019c

080804c8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80804c8:	b508      	push	{r3, lr}
 80804ca:	4b02      	ldr	r3, [pc, #8]	; (80804d4 <hal_timer_millis+0xc>)
 80804cc:	681b      	ldr	r3, [r3, #0]
 80804ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80804d0:	9301      	str	r3, [sp, #4]
 80804d2:	bd08      	pop	{r3, pc}
 80804d4:	0804019c 	.word	0x0804019c

080804d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80804d8:	b508      	push	{r3, lr}
 80804da:	4b02      	ldr	r3, [pc, #8]	; (80804e4 <HAL_Pin_Map+0xc>)
 80804dc:	681b      	ldr	r3, [r3, #0]
 80804de:	681b      	ldr	r3, [r3, #0]
 80804e0:	9301      	str	r3, [sp, #4]
 80804e2:	bd08      	pop	{r3, pc}
 80804e4:	080401b0 	.word	0x080401b0

080804e8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80804e8:	b508      	push	{r3, lr}
 80804ea:	4b02      	ldr	r3, [pc, #8]	; (80804f4 <HAL_USART_Init+0xc>)
 80804ec:	681b      	ldr	r3, [r3, #0]
 80804ee:	699b      	ldr	r3, [r3, #24]
 80804f0:	9301      	str	r3, [sp, #4]
 80804f2:	bd08      	pop	{r3, pc}
 80804f4:	080401c4 	.word	0x080401c4

080804f8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80804f8:	b508      	push	{r3, lr}
 80804fa:	4b02      	ldr	r3, [pc, #8]	; (8080504 <HAL_USART_Write_Data+0xc>)
 80804fc:	681b      	ldr	r3, [r3, #0]
 80804fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080500:	9301      	str	r3, [sp, #4]
 8080502:	bd08      	pop	{r3, pc}
 8080504:	080401c4 	.word	0x080401c4

08080508 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080508:	b508      	push	{r3, lr}
 808050a:	4b02      	ldr	r3, [pc, #8]	; (8080514 <HAL_USART_Available_Data+0xc>)
 808050c:	681b      	ldr	r3, [r3, #0]
 808050e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080510:	9301      	str	r3, [sp, #4]
 8080512:	bd08      	pop	{r3, pc}
 8080514:	080401c4 	.word	0x080401c4

08080518 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <HAL_USART_Read_Data+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401c4 	.word	0x080401c4

08080528 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <HAL_USART_Peek_Data+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401c4 	.word	0x080401c4

08080538 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <HAL_USART_Flush_Data+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401c4 	.word	0x080401c4

08080548 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b02      	ldr	r3, [pc, #8]	; (8080554 <HAL_USART_Available_Data_For_Write+0xc>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080550:	9301      	str	r3, [sp, #4]
 8080552:	bd08      	pop	{r3, pc}
 8080554:	080401c4 	.word	0x080401c4

08080558 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <HAL_USB_USART_Init+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	681b      	ldr	r3, [r3, #0]
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	0806001c 	.word	0x0806001c

08080568 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <HAL_USB_USART_Available_Data+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	691b      	ldr	r3, [r3, #16]
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	0806001c 	.word	0x0806001c

08080578 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	695b      	ldr	r3, [r3, #20]
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	0806001c 	.word	0x0806001c

08080588 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <HAL_USB_USART_Receive_Data+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	699b      	ldr	r3, [r3, #24]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	0806001c 	.word	0x0806001c

08080598 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <HAL_USB_USART_Send_Data+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	69db      	ldr	r3, [r3, #28]
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	0806001c 	.word	0x0806001c

080805a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <HAL_USB_USART_Flush_Data+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	6a1b      	ldr	r3, [r3, #32]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	0806001c 	.word	0x0806001c

080805b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <set_system_mode+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	685b      	ldr	r3, [r3, #4]
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401a4 	.word	0x080401a4

080805c8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <system_thread_set_state+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401a4 	.word	0x080401a4

080805d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <application_thread_current+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401a4 	.word	0x080401a4

080805e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <application_thread_invoke+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401a4 	.word	0x080401a4

080805f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b03      	ldr	r3, [pc, #12]	; (8080608 <system_ctrl_set_app_request_handler+0x10>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080602:	9301      	str	r3, [sp, #4]
 8080604:	bd08      	pop	{r3, pc}
 8080606:	0000      	.short	0x0000
 8080608:	080401a4 	.word	0x080401a4

0808060c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808060c:	b508      	push	{r3, lr}
 808060e:	4b03      	ldr	r3, [pc, #12]	; (808061c <system_ctrl_set_result+0x10>)
 8080610:	681b      	ldr	r3, [r3, #0]
 8080612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080616:	9301      	str	r3, [sp, #4]
 8080618:	bd08      	pop	{r3, pc}
 808061a:	0000      	.short	0x0000
 808061c:	080401a4 	.word	0x080401a4

08080620 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8080620:	b508      	push	{r3, lr}
 8080622:	4b02      	ldr	r3, [pc, #8]	; (808062c <spark_variable+0xc>)
 8080624:	681b      	ldr	r3, [r3, #0]
 8080626:	681b      	ldr	r3, [r3, #0]
 8080628:	9301      	str	r3, [sp, #4]
 808062a:	bd08      	pop	{r3, pc}
 808062c:	080401cc 	.word	0x080401cc

08080630 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8080630:	b508      	push	{r3, lr}
 8080632:	4b02      	ldr	r3, [pc, #8]	; (808063c <spark_function+0xc>)
 8080634:	681b      	ldr	r3, [r3, #0]
 8080636:	685b      	ldr	r3, [r3, #4]
 8080638:	9301      	str	r3, [sp, #4]
 808063a:	bd08      	pop	{r3, pc}
 808063c:	080401cc 	.word	0x080401cc

08080640 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080640:	b508      	push	{r3, lr}
 8080642:	4b02      	ldr	r3, [pc, #8]	; (808064c <spark_process+0xc>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	689b      	ldr	r3, [r3, #8]
 8080648:	9301      	str	r3, [sp, #4]
 808064a:	bd08      	pop	{r3, pc}
 808064c:	080401cc 	.word	0x080401cc

08080650 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080650:	b508      	push	{r3, lr}
 8080652:	4b02      	ldr	r3, [pc, #8]	; (808065c <spark_cloud_flag_connect+0xc>)
 8080654:	681b      	ldr	r3, [r3, #0]
 8080656:	68db      	ldr	r3, [r3, #12]
 8080658:	9301      	str	r3, [sp, #4]
 808065a:	bd08      	pop	{r3, pc}
 808065c:	080401cc 	.word	0x080401cc

08080660 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8080660:	b508      	push	{r3, lr}
 8080662:	4b02      	ldr	r3, [pc, #8]	; (808066c <spark_cloud_flag_disconnect+0xc>)
 8080664:	681b      	ldr	r3, [r3, #0]
 8080666:	691b      	ldr	r3, [r3, #16]
 8080668:	9301      	str	r3, [sp, #4]
 808066a:	bd08      	pop	{r3, pc}
 808066c:	080401cc 	.word	0x080401cc

08080670 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080670:	b508      	push	{r3, lr}
 8080672:	4b02      	ldr	r3, [pc, #8]	; (808067c <spark_cloud_flag_connected+0xc>)
 8080674:	681b      	ldr	r3, [r3, #0]
 8080676:	695b      	ldr	r3, [r3, #20]
 8080678:	9301      	str	r3, [sp, #4]
 808067a:	bd08      	pop	{r3, pc}
 808067c:	080401cc 	.word	0x080401cc

08080680 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080680:	b508      	push	{r3, lr}
 8080682:	4b02      	ldr	r3, [pc, #8]	; (808068c <spark_send_event+0xc>)
 8080684:	681b      	ldr	r3, [r3, #0]
 8080686:	6a1b      	ldr	r3, [r3, #32]
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	bd08      	pop	{r3, pc}
 808068c:	080401cc 	.word	0x080401cc

08080690 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080690:	b508      	push	{r3, lr}
 8080692:	4b02      	ldr	r3, [pc, #8]	; (808069c <spark_set_random_seed_from_cloud_handler+0xc>)
 8080694:	681b      	ldr	r3, [r3, #0]
 8080696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080698:	9301      	str	r3, [sp, #4]
 808069a:	bd08      	pop	{r3, pc}
 808069c:	080401cc 	.word	0x080401cc

080806a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80806a0:	b508      	push	{r3, lr}
 80806a2:	4b02      	ldr	r3, [pc, #8]	; (80806ac <network_connect+0xc>)
 80806a4:	681b      	ldr	r3, [r3, #0]
 80806a6:	685b      	ldr	r3, [r3, #4]
 80806a8:	9301      	str	r3, [sp, #4]
 80806aa:	bd08      	pop	{r3, pc}
 80806ac:	080401c8 	.word	0x080401c8

080806b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80806b0:	b508      	push	{r3, lr}
 80806b2:	4b02      	ldr	r3, [pc, #8]	; (80806bc <network_connecting+0xc>)
 80806b4:	681b      	ldr	r3, [r3, #0]
 80806b6:	689b      	ldr	r3, [r3, #8]
 80806b8:	9301      	str	r3, [sp, #4]
 80806ba:	bd08      	pop	{r3, pc}
 80806bc:	080401c8 	.word	0x080401c8

080806c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80806c0:	b508      	push	{r3, lr}
 80806c2:	4b02      	ldr	r3, [pc, #8]	; (80806cc <network_disconnect+0xc>)
 80806c4:	681b      	ldr	r3, [r3, #0]
 80806c6:	68db      	ldr	r3, [r3, #12]
 80806c8:	9301      	str	r3, [sp, #4]
 80806ca:	bd08      	pop	{r3, pc}
 80806cc:	080401c8 	.word	0x080401c8

080806d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80806d0:	b508      	push	{r3, lr}
 80806d2:	4b02      	ldr	r3, [pc, #8]	; (80806dc <network_ready+0xc>)
 80806d4:	681b      	ldr	r3, [r3, #0]
 80806d6:	691b      	ldr	r3, [r3, #16]
 80806d8:	9301      	str	r3, [sp, #4]
 80806da:	bd08      	pop	{r3, pc}
 80806dc:	080401c8 	.word	0x080401c8

080806e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80806e0:	b508      	push	{r3, lr}
 80806e2:	4b02      	ldr	r3, [pc, #8]	; (80806ec <network_on+0xc>)
 80806e4:	681b      	ldr	r3, [r3, #0]
 80806e6:	695b      	ldr	r3, [r3, #20]
 80806e8:	9301      	str	r3, [sp, #4]
 80806ea:	bd08      	pop	{r3, pc}
 80806ec:	080401c8 	.word	0x080401c8

080806f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80806f0:	b508      	push	{r3, lr}
 80806f2:	4b02      	ldr	r3, [pc, #8]	; (80806fc <network_off+0xc>)
 80806f4:	681b      	ldr	r3, [r3, #0]
 80806f6:	699b      	ldr	r3, [r3, #24]
 80806f8:	9301      	str	r3, [sp, #4]
 80806fa:	bd08      	pop	{r3, pc}
 80806fc:	080401c8 	.word	0x080401c8

08080700 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080700:	b508      	push	{r3, lr}
 8080702:	4b02      	ldr	r3, [pc, #8]	; (808070c <network_listen+0xc>)
 8080704:	681b      	ldr	r3, [r3, #0]
 8080706:	69db      	ldr	r3, [r3, #28]
 8080708:	9301      	str	r3, [sp, #4]
 808070a:	bd08      	pop	{r3, pc}
 808070c:	080401c8 	.word	0x080401c8

08080710 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080710:	b508      	push	{r3, lr}
 8080712:	4b02      	ldr	r3, [pc, #8]	; (808071c <network_listening+0xc>)
 8080714:	681b      	ldr	r3, [r3, #0]
 8080716:	6a1b      	ldr	r3, [r3, #32]
 8080718:	9301      	str	r3, [sp, #4]
 808071a:	bd08      	pop	{r3, pc}
 808071c:	080401c8 	.word	0x080401c8

08080720 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080720:	b508      	push	{r3, lr}
 8080722:	4b02      	ldr	r3, [pc, #8]	; (808072c <network_set_listen_timeout+0xc>)
 8080724:	681b      	ldr	r3, [r3, #0]
 8080726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080728:	9301      	str	r3, [sp, #4]
 808072a:	bd08      	pop	{r3, pc}
 808072c:	080401c8 	.word	0x080401c8

08080730 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080730:	b508      	push	{r3, lr}
 8080732:	4b02      	ldr	r3, [pc, #8]	; (808073c <network_get_listen_timeout+0xc>)
 8080734:	681b      	ldr	r3, [r3, #0]
 8080736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080738:	9301      	str	r3, [sp, #4]
 808073a:	bd08      	pop	{r3, pc}
 808073c:	080401c8 	.word	0x080401c8

08080740 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080740:	b508      	push	{r3, lr}
 8080742:	4b02      	ldr	r3, [pc, #8]	; (808074c <malloc+0xc>)
 8080744:	681b      	ldr	r3, [r3, #0]
 8080746:	681b      	ldr	r3, [r3, #0]
 8080748:	9301      	str	r3, [sp, #4]
 808074a:	bd08      	pop	{r3, pc}
 808074c:	080401a0 	.word	0x080401a0

08080750 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080750:	b508      	push	{r3, lr}
 8080752:	4b02      	ldr	r3, [pc, #8]	; (808075c <free+0xc>)
 8080754:	681b      	ldr	r3, [r3, #0]
 8080756:	685b      	ldr	r3, [r3, #4]
 8080758:	9301      	str	r3, [sp, #4]
 808075a:	bd08      	pop	{r3, pc}
 808075c:	080401a0 	.word	0x080401a0

08080760 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080760:	b508      	push	{r3, lr}
 8080762:	4b02      	ldr	r3, [pc, #8]	; (808076c <realloc+0xc>)
 8080764:	681b      	ldr	r3, [r3, #0]
 8080766:	689b      	ldr	r3, [r3, #8]
 8080768:	9301      	str	r3, [sp, #4]
 808076a:	bd08      	pop	{r3, pc}
 808076c:	080401a0 	.word	0x080401a0

08080770 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080770:	b508      	push	{r3, lr}
 8080772:	4b02      	ldr	r3, [pc, #8]	; (808077c <abort+0xc>)
 8080774:	681b      	ldr	r3, [r3, #0]
 8080776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080778:	9301      	str	r3, [sp, #4]
 808077a:	bd08      	pop	{r3, pc}
 808077c:	080401a0 	.word	0x080401a0

08080780 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080780:	b508      	push	{r3, lr}
 8080782:	4b02      	ldr	r3, [pc, #8]	; (808078c <_malloc_r+0xc>)
 8080784:	681b      	ldr	r3, [r3, #0]
 8080786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080788:	9301      	str	r3, [sp, #4]
 808078a:	bd08      	pop	{r3, pc}
 808078c:	080401a0 	.word	0x080401a0

08080790 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080790:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080792:	6883      	ldr	r3, [r0, #8]
 8080794:	4604      	mov	r4, r0
 8080796:	b90b      	cbnz	r3, 808079c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080798:	f000 ff5b 	bl	8081652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808079c:	68c3      	ldr	r3, [r0, #12]
 808079e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80807a0:	68a3      	ldr	r3, [r4, #8]
 80807a2:	b11b      	cbz	r3, 80807ac <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80807a4:	2203      	movs	r2, #3
 80807a6:	4621      	mov	r1, r4
 80807a8:	4620      	mov	r0, r4
 80807aa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80807ac:	4620      	mov	r0, r4
}
 80807ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80807b2:	2110      	movs	r1, #16
 80807b4:	f000 bf4b 	b.w	808164e <_ZdlPvj>

080807b8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80807b8:	2200      	movs	r2, #0
 80807ba:	4611      	mov	r1, r2
 80807bc:	6840      	ldr	r0, [r0, #4]
 80807be:	f7ff bf87 	b.w	80806d0 <network_ready>

080807c2 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80807c2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80807c6:	2600      	movs	r6, #0
 80807c8:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80807ca:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80807cc:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80807ce:	4688      	mov	r8, r1
 80807d0:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80807d2:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80807d6:	f001 f8fe 	bl	80819d6 <strlen>
 80807da:	9600      	str	r6, [sp, #0]
 80807dc:	b281      	uxth	r1, r0
 80807de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80807e2:	4622      	mov	r2, r4
 80807e4:	4638      	mov	r0, r7
 80807e6:	f7ff fe4f 	bl	8080488 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80807ea:	b120      	cbz	r0, 80807f6 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80807ec:	4631      	mov	r1, r6
 80807ee:	4628      	mov	r0, r5
 80807f0:	f000 fb8c 	bl	8080f0c <_ZN9IPAddressC1Em>
 80807f4:	e003      	b.n	80807fe <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80807f6:	4621      	mov	r1, r4
 80807f8:	4628      	mov	r0, r5
 80807fa:	f000 fb7f 	bl	8080efc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80807fe:	4628      	mov	r0, r5
 8080800:	b004      	add	sp, #16
 8080802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080806 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8080806:	2200      	movs	r2, #0
 8080808:	4611      	mov	r1, r2
 808080a:	6840      	ldr	r0, [r0, #4]
 808080c:	f7ff bf80 	b.w	8080710 <network_listening>

08080810 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8080810:	2200      	movs	r2, #0
 8080812:	4611      	mov	r1, r2
 8080814:	6840      	ldr	r0, [r0, #4]
 8080816:	f7ff bf8b 	b.w	8080730 <network_get_listen_timeout>

0808081a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808081a:	2200      	movs	r2, #0
 808081c:	6840      	ldr	r0, [r0, #4]
 808081e:	f7ff bf7f 	b.w	8080720 <network_set_listen_timeout>

08080822 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8080822:	2200      	movs	r2, #0
 8080824:	f081 0101 	eor.w	r1, r1, #1
 8080828:	6840      	ldr	r0, [r0, #4]
 808082a:	f7ff bf69 	b.w	8080700 <network_listen>

0808082e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808082e:	2300      	movs	r3, #0
 8080830:	461a      	mov	r2, r3
 8080832:	4619      	mov	r1, r3
 8080834:	6840      	ldr	r0, [r0, #4]
 8080836:	f7ff bf5b 	b.w	80806f0 <network_off>

0808083a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808083a:	2200      	movs	r2, #0
 808083c:	4611      	mov	r1, r2
 808083e:	6840      	ldr	r0, [r0, #4]
 8080840:	f7ff bf36 	b.w	80806b0 <network_connecting>

08080844 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080844:	2200      	movs	r2, #0
 8080846:	2102      	movs	r1, #2
 8080848:	6840      	ldr	r0, [r0, #4]
 808084a:	f7ff bf39 	b.w	80806c0 <network_disconnect>

0808084e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808084e:	2300      	movs	r3, #0
 8080850:	461a      	mov	r2, r3
 8080852:	6840      	ldr	r0, [r0, #4]
 8080854:	f7ff bf24 	b.w	80806a0 <network_connect>

08080858 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080858:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808085a:	4c08      	ldr	r4, [pc, #32]	; (808087c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808085c:	2528      	movs	r5, #40	; 0x28
 808085e:	462a      	mov	r2, r5
 8080860:	2100      	movs	r1, #0
 8080862:	4620      	mov	r0, r4
 8080864:	f001 f859 	bl	808191a <memset>
        cid = -1;
 8080868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808086c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808086e:	4b04      	ldr	r3, [pc, #16]	; (8080880 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8080870:	2204      	movs	r2, #4
 8080872:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080874:	4a03      	ldr	r2, [pc, #12]	; (8080884 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8080876:	8025      	strh	r5, [r4, #0]
 8080878:	601a      	str	r2, [r3, #0]
 808087a:	bd38      	pop	{r3, r4, r5, pc}
 808087c:	20000098 	.word	0x20000098
 8080880:	20000090 	.word	0x20000090
 8080884:	08081b64 	.word	0x08081b64

08080888 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080888:	4770      	bx	lr

0808088a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808088a:	2000      	movs	r0, #0
 808088c:	4770      	bx	lr

0808088e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808088e:	b510      	push	{r4, lr}
 8080890:	4604      	mov	r4, r0
 8080892:	2110      	movs	r1, #16
 8080894:	f000 fedb 	bl	808164e <_ZdlPvj>
 8080898:	4620      	mov	r0, r4
 808089a:	bd10      	pop	{r4, pc}

0808089c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808089c:	b508      	push	{r3, lr}
      { delete this; }
 808089e:	b108      	cbz	r0, 80808a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80808a0:	f7ff fff5 	bl	808088e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80808a4:	bd08      	pop	{r3, pc}

080808a6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80808a6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80808a8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80808aa:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80808ac:	b113      	cbz	r3, 80808b4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80808ae:	2203      	movs	r2, #3
 80808b0:	4601      	mov	r1, r0
 80808b2:	4798      	blx	r3
    }
 80808b4:	4620      	mov	r0, r4
 80808b6:	bd10      	pop	{r4, pc}

080808b8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80808b8:	2200      	movs	r2, #0
 80808ba:	6002      	str	r2, [r0, #0]
 80808bc:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80808c0:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80808c2:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80808c4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80808c8:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80808ca:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80808cc:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80808ce:	680c      	ldr	r4, [r1, #0]
 80808d0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80808d2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80808d4:	bd10      	pop	{r4, pc}

080808d6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80808d6:	b510      	push	{r4, lr}
 80808d8:	4604      	mov	r4, r0
    free((void*)msg_);
 80808da:	6800      	ldr	r0, [r0, #0]
 80808dc:	f7ff ff38 	bl	8080750 <free>
}
 80808e0:	4620      	mov	r0, r4
 80808e2:	bd10      	pop	{r4, pc}

080808e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80808e4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80808e6:	68c4      	ldr	r4, [r0, #12]
 80808e8:	b1f4      	cbz	r4, 8080928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80808ea:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80808ec:	2b02      	cmp	r3, #2
 80808ee:	d103      	bne.n	80808f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80808f0:	f104 000c 	add.w	r0, r4, #12
 80808f4:	f7ff ffef 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80808f8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80808fa:	b135      	cbz	r5, 808090a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80808fc:	4628      	mov	r0, r5
 80808fe:	f7ff ffd2 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
 8080902:	2110      	movs	r1, #16
 8080904:	4628      	mov	r0, r5
 8080906:	f000 fea2 	bl	808164e <_ZdlPvj>
 808090a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808090c:	b135      	cbz	r5, 808091c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808090e:	4628      	mov	r0, r5
 8080910:	f7ff ffc9 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
 8080914:	2110      	movs	r1, #16
 8080916:	4628      	mov	r0, r5
 8080918:	f000 fe99 	bl	808164e <_ZdlPvj>
 808091c:	4620      	mov	r0, r4
 808091e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080922:	2114      	movs	r1, #20
 8080924:	f000 be93 	b.w	808164e <_ZdlPvj>
 8080928:	bd38      	pop	{r3, r4, r5, pc}

0808092a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808092a:	b510      	push	{r4, lr}
 808092c:	b088      	sub	sp, #32
 808092e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8080930:	4668      	mov	r0, sp
 8080932:	f000 fc18 	bl	8081166 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8080936:	4669      	mov	r1, sp
 8080938:	a804      	add	r0, sp, #16
 808093a:	f000 fc36 	bl	80811aa <_ZN6StringC1ERKS_>
 808093e:	a804      	add	r0, sp, #16
 8080940:	47a0      	blx	r4
 8080942:	4604      	mov	r4, r0
 8080944:	a804      	add	r0, sp, #16
 8080946:	f000 fbc7 	bl	80810d8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808094a:	4668      	mov	r0, sp
 808094c:	f000 fbc4 	bl	80810d8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8080950:	4620      	mov	r0, r4
 8080952:	b008      	add	sp, #32
 8080954:	bd10      	pop	{r4, pc}

08080956 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8080956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080958:	4607      	mov	r7, r0
 808095a:	460e      	mov	r6, r1
 808095c:	4615      	mov	r5, r2
 808095e:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8080960:	2410      	movs	r4, #16
 8080962:	4622      	mov	r2, r4
 8080964:	2100      	movs	r1, #0
 8080966:	4668      	mov	r0, sp
 8080968:	f000 ffd7 	bl	808191a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808096c:	2200      	movs	r2, #0
 808096e:	4669      	mov	r1, sp
 8080970:	4610      	mov	r0, r2
         size = sizeof(*this);
 8080972:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8080976:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8080978:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808097a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808097c:	f7ff fe58 	bl	8080630 <spark_function>
}
 8080980:	b005      	add	sp, #20
 8080982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080984 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080984:	b513      	push	{r0, r1, r4, lr}
 8080986:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080988:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808098c:	2300      	movs	r3, #0
 808098e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080990:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080992:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080994:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080996:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080998:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808099a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808099c:	f7ff fc1c 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809a0:	4620      	mov	r0, r4
 80809a2:	b002      	add	sp, #8
 80809a4:	bd10      	pop	{r4, pc}

080809a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80809a6:	680b      	ldr	r3, [r1, #0]
 80809a8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80809aa:	b113      	cbz	r3, 80809b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80809ac:	685a      	ldr	r2, [r3, #4]
 80809ae:	3201      	adds	r2, #1
 80809b0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80809b2:	4770      	bx	lr

080809b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80809b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80809b6:	460c      	mov	r4, r1
 80809b8:	4606      	mov	r6, r0
 80809ba:	460f      	mov	r7, r1
 80809bc:	f854 3b04 	ldr.w	r3, [r4], #4
 80809c0:	ad02      	add	r5, sp, #8
 80809c2:	f845 3d08 	str.w	r3, [r5, #-8]!
 80809c6:	4621      	mov	r1, r4
 80809c8:	a801      	add	r0, sp, #4
 80809ca:	f7ff ffec 	bl	80809a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80809ce:	4629      	mov	r1, r5
 80809d0:	4630      	mov	r0, r6
 80809d2:	f7ff ffd7 	bl	8080984 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809d6:	a801      	add	r0, sp, #4
 80809d8:	f7ff fbfe 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809dc:	4620      	mov	r0, r4
 80809de:	f7ff fbfb 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80809e2:	4638      	mov	r0, r7
 80809e4:	2108      	movs	r1, #8
 80809e6:	f000 fe32 	bl	808164e <_ZdlPvj>
        return p;
    }
 80809ea:	4630      	mov	r0, r6
 80809ec:	b003      	add	sp, #12
 80809ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080809f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80809f0:	b513      	push	{r0, r1, r4, lr}
 80809f2:	460b      	mov	r3, r1
 80809f4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80809f6:	c803      	ldmia	r0, {r0, r1}
 80809f8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80809fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080a00:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080a04:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080a08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080a0c:	b002      	add	sp, #8
 8080a0e:	bd10      	pop	{r4, pc}

08080a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080a10:	b538      	push	{r3, r4, r5, lr}
 8080a12:	2300      	movs	r3, #0
 8080a14:	4604      	mov	r4, r0
 8080a16:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080a18:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080a1a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080a1c:	f7ff fb3d 	bl	808009a <_Znwj>
 8080a20:	b128      	cbz	r0, 8080a2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8080a22:	2301      	movs	r3, #1
 8080a24:	6043      	str	r3, [r0, #4]
 8080a26:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8080a28:	4b02      	ldr	r3, [pc, #8]	; (8080a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8080a2a:	60c5      	str	r5, [r0, #12]
 8080a2c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080a2e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8080a30:	4620      	mov	r0, r4
 8080a32:	bd38      	pop	{r3, r4, r5, pc}
 8080a34:	08081b98 	.word	0x08081b98

08080a38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080a3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a3c:	b90a      	cbnz	r2, 8080a42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080a3e:	f000 fe08 	bl	8081652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a42:	68c3      	ldr	r3, [r0, #12]
    }
 8080a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a48:	4718      	bx	r3

08080a4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080a4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080a4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080a4e:	f100 0110 	add.w	r1, r0, #16
 8080a52:	f7ff fff1 	bl	8080a38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080a56:	bd08      	pop	{r3, pc}

08080a58 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080a5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a5c:	b90a      	cbnz	r2, 8080a62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080a5e:	f000 fdf8 	bl	8081652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a62:	68c3      	ldr	r3, [r0, #12]
    }
 8080a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a68:	4718      	bx	r3

08080a6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080a6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080a6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080a6e:	f100 0110 	add.w	r1, r0, #16
 8080a72:	f7ff fff1 	bl	8080a58 <_ZNKSt8functionIFvRKbEEclES1_>
 8080a76:	bd08      	pop	{r3, pc}

08080a78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080a78:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080a7a:	2300      	movs	r3, #0
 8080a7c:	6083      	str	r3, [r0, #8]
 8080a7e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080a80:	4604      	mov	r4, r0
 8080a82:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080a84:	b12b      	cbz	r3, 8080a92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080a86:	2202      	movs	r2, #2
 8080a88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080a8a:	68eb      	ldr	r3, [r5, #12]
 8080a8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080a8e:	68ab      	ldr	r3, [r5, #8]
 8080a90:	60a3      	str	r3, [r4, #8]
	}
    }
 8080a92:	4620      	mov	r0, r4
 8080a94:	bd38      	pop	{r3, r4, r5, pc}
	...

08080a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8080a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080a9a:	b089      	sub	sp, #36	; 0x24
 8080a9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8080a9e:	4668      	mov	r0, sp
 8080aa0:	f7ff ff0a 	bl	80808b8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080aa4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080aa8:	2300      	movs	r3, #0
 8080aaa:	f88d 3008 	strb.w	r3, [sp, #8]
 8080aae:	e8d4 3f4f 	ldrexb	r3, [r4]
 8080ab2:	2b00      	cmp	r3, #0
 8080ab4:	d103      	bne.n	8080abe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8080ab6:	e8c4 2f41 	strexb	r1, r2, [r4]
 8080aba:	2900      	cmp	r1, #0
 8080abc:	d1f7      	bne.n	8080aae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8080abe:	d002      	beq.n	8080ac6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8080ac0:	f88d 3008 	strb.w	r3, [sp, #8]
 8080ac4:	e063      	b.n	8080b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8080ac6:	f114 050c 	adds.w	r5, r4, #12
 8080aca:	d003      	beq.n	8080ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8080acc:	4669      	mov	r1, sp
 8080ace:	4628      	mov	r0, r5
 8080ad0:	f7ff fef2 	bl	80808b8 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080ad4:	f3bf 8f5f 	dmb	sy
 8080ad8:	2301      	movs	r3, #1
 8080ada:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080adc:	f3bf 8f5f 	dmb	sy
 8080ae0:	f104 0308 	add.w	r3, r4, #8
 8080ae4:	2000      	movs	r0, #0
 8080ae6:	e853 6f00 	ldrex	r6, [r3]
 8080aea:	e843 0200 	strex	r2, r0, [r3]
 8080aee:	2a00      	cmp	r2, #0
 8080af0:	d1f9      	bne.n	8080ae6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8080af2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080af6:	2e00      	cmp	r6, #0
 8080af8:	d049      	beq.n	8080b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080afa:	f7ff fd6d 	bl	80805d8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080afe:	b120      	cbz	r0, 8080b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080b00:	4629      	mov	r1, r5
 8080b02:	4630      	mov	r0, r6
 8080b04:	f7ff ff98 	bl	8080a38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080b08:	e03a      	b.n	8080b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080b0a:	4631      	mov	r1, r6
 8080b0c:	a802      	add	r0, sp, #8
 8080b0e:	f7ff ffb3 	bl	8080a78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080b12:	68e0      	ldr	r0, [r4, #12]
 8080b14:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080b18:	b108      	cbz	r0, 8080b1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8080b1a:	f000 ff41 	bl	80819a0 <strdup>
 8080b1e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080b20:	2010      	movs	r0, #16
 8080b22:	f8ad 501c 	strh.w	r5, [sp, #28]
 8080b26:	f7ff fab8 	bl	808009a <_Znwj>
 8080b2a:	4605      	mov	r5, r0
 8080b2c:	b1e8      	cbz	r0, 8080b6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080b2e:	2700      	movs	r7, #0
 8080b30:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080b32:	2018      	movs	r0, #24
 8080b34:	f7ff fab1 	bl	808009a <_Znwj>
 8080b38:	4604      	mov	r4, r0
 8080b3a:	b188      	cbz	r0, 8080b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080b3c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080b3e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080b40:	a802      	add	r0, sp, #8
 8080b42:	f7ff ff55 	bl	80809f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080b46:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080b48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080b4a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080b4c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8080b4e:	9204      	str	r2, [sp, #16]
 8080b50:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080b52:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8080b54:	60e3      	str	r3, [r4, #12]
 8080b56:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080b5a:	9205      	str	r2, [sp, #20]
 8080b5c:	f7ff feac 	bl	80808b8 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080b60:	4b0d      	ldr	r3, [pc, #52]	; (8080b98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080b62:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080b64:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080b66:	4b0d      	ldr	r3, [pc, #52]	; (8080b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8080b68:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8080b6a:	a806      	add	r0, sp, #24
 8080b6c:	f7ff feb3 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080b70:	a802      	add	r0, sp, #8
 8080b72:	f7ff fe98 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080b76:	2200      	movs	r2, #0
 8080b78:	4629      	mov	r1, r5
 8080b7a:	4809      	ldr	r0, [pc, #36]	; (8080ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8080b7c:	f7ff fd34 	bl	80805e8 <application_thread_invoke>
 8080b80:	4630      	mov	r0, r6
 8080b82:	f7ff fe90 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080b86:	2110      	movs	r1, #16
 8080b88:	4630      	mov	r0, r6
 8080b8a:	f000 fd60 	bl	808164e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8080b8e:	4668      	mov	r0, sp
 8080b90:	f7ff fea1 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
    }
 8080b94:	b009      	add	sp, #36	; 0x24
 8080b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080b98:	08080a4b 	.word	0x08080a4b
 8080b9c:	08080cc1 	.word	0x08080cc1
 8080ba0:	08080791 	.word	0x08080791

08080ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080ba8:	b08b      	sub	sp, #44	; 0x2c
 8080baa:	4606      	mov	r6, r0
 8080bac:	460f      	mov	r7, r1
 8080bae:	4690      	mov	r8, r2
 8080bb0:	4699      	mov	r9, r3
 8080bb2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080bb6:	f7ff fd5b 	bl	8080670 <spark_cloud_flag_connected>
 8080bba:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8080bbc:	4683      	mov	fp, r0
 8080bbe:	bb30      	cbnz	r0, 8080c0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080bc0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8080bc4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080bc6:	a905      	add	r1, sp, #20
 8080bc8:	4628      	mov	r0, r5
 8080bca:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080bce:	f7ff fe73 	bl	80808b8 <_ZN8particle5ErrorC1EOS0_>
 8080bd2:	2014      	movs	r0, #20
 8080bd4:	f7ff fa61 	bl	808009a <_Znwj>
 8080bd8:	4604      	mov	r4, r0
 8080bda:	b158      	cbz	r0, 8080bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8080bdc:	2302      	movs	r3, #2
 8080bde:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080be0:	2301      	movs	r3, #1
 8080be2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080be4:	f8c0 b004 	str.w	fp, [r0, #4]
 8080be8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8080bec:	4629      	mov	r1, r5
 8080bee:	300c      	adds	r0, #12
 8080bf0:	f7ff fe62 	bl	80808b8 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8080bf4:	4630      	mov	r0, r6
 8080bf6:	4621      	mov	r1, r4
 8080bf8:	f840 4b04 	str.w	r4, [r0], #4
 8080bfc:	f7ff ff08 	bl	8080a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080c00:	4628      	mov	r0, r5
 8080c02:	f7ff fe68 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8080c06:	a805      	add	r0, sp, #20
 8080c08:	f7ff fe65 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
 8080c0c:	e052      	b.n	8080cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080c0e:	2400      	movs	r4, #0
 8080c10:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8080c12:	2014      	movs	r0, #20
 8080c14:	606c      	str	r4, [r5, #4]
 8080c16:	60ac      	str	r4, [r5, #8]
 8080c18:	9307      	str	r3, [sp, #28]
 8080c1a:	f7ff fa3e 	bl	808009a <_Znwj>
 8080c1e:	4601      	mov	r1, r0
 8080c20:	b118      	cbz	r0, 8080c2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8080c22:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080c24:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080c26:	6044      	str	r4, [r0, #4]
 8080c28:	6084      	str	r4, [r0, #8]
 8080c2a:	a804      	add	r0, sp, #16
 8080c2c:	9103      	str	r1, [sp, #12]
 8080c2e:	f7ff feef 	bl	8080a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8080c32:	4b22      	ldr	r3, [pc, #136]	; (8080cbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080c34:	2008      	movs	r0, #8
 8080c36:	9308      	str	r3, [sp, #32]
 8080c38:	f7ff fa2f 	bl	808009a <_Znwj>
 8080c3c:	4604      	mov	r4, r0
 8080c3e:	b128      	cbz	r0, 8080c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080c40:	9b03      	ldr	r3, [sp, #12]
 8080c42:	a904      	add	r1, sp, #16
 8080c44:	f840 3b04 	str.w	r3, [r0], #4
 8080c48:	f7ff fead 	bl	80809a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080c4c:	9500      	str	r5, [sp, #0]
 8080c4e:	fa5f f38a 	uxtb.w	r3, sl
 8080c52:	464a      	mov	r2, r9
 8080c54:	4641      	mov	r1, r8
 8080c56:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8080c58:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080c5a:	f7ff fd11 	bl	8080680 <spark_send_event>
 8080c5e:	b920      	cbnz	r0, 8080c6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8080c60:	9b03      	ldr	r3, [sp, #12]
 8080c62:	785b      	ldrb	r3, [r3, #1]
 8080c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8080c68:	b183      	cbz	r3, 8080c8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8080c6a:	9b03      	ldr	r3, [sp, #12]
 8080c6c:	a904      	add	r1, sp, #16
 8080c6e:	a806      	add	r0, sp, #24
 8080c70:	9305      	str	r3, [sp, #20]
 8080c72:	f7ff fe98 	bl	80809a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8080c76:	a905      	add	r1, sp, #20
 8080c78:	4630      	mov	r0, r6
 8080c7a:	f7ff fe83 	bl	8080984 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080c7e:	a806      	add	r0, sp, #24
 8080c80:	f7ff faaa 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080c84:	a804      	add	r0, sp, #16
 8080c86:	f7ff faa7 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080c8a:	e013      	b.n	8080cb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8080c8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8080c90:	a905      	add	r1, sp, #20
 8080c92:	a803      	add	r0, sp, #12
 8080c94:	9205      	str	r2, [sp, #20]
 8080c96:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080c9a:	f7ff fefd 	bl	8080a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080c9e:	a805      	add	r0, sp, #20
 8080ca0:	f7ff fe19 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080ca4:	a805      	add	r0, sp, #20
 8080ca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080ca8:	f7ff fe84 	bl	80809b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8080cac:	a806      	add	r0, sp, #24
 8080cae:	f7ff fa93 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cb2:	e7da      	b.n	8080c6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8080cb4:	4630      	mov	r0, r6
 8080cb6:	b00b      	add	sp, #44	; 0x2c
 8080cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080cbc:	08080e31 	.word	0x08080e31

08080cc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080cc0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080cc4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080cc6:	d006      	beq.n	8080cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8080cc8:	2a03      	cmp	r2, #3
 8080cca:	d017      	beq.n	8080cfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8080ccc:	2a01      	cmp	r2, #1
 8080cce:	d122      	bne.n	8080d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080cd0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080cd2:	6003      	str	r3, [r0, #0]
	      break;
 8080cd4:	e01f      	b.n	8080d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080cd6:	2018      	movs	r0, #24
 8080cd8:	680e      	ldr	r6, [r1, #0]
 8080cda:	f7ff f9de 	bl	808009a <_Znwj>
 8080cde:	4605      	mov	r5, r0
 8080ce0:	b150      	cbz	r0, 8080cf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080ce2:	4631      	mov	r1, r6
 8080ce4:	f7ff fec8 	bl	8080a78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080ce8:	6930      	ldr	r0, [r6, #16]
 8080cea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080cee:	b108      	cbz	r0, 8080cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8080cf0:	f000 fe56 	bl	80819a0 <strdup>
 8080cf4:	6128      	str	r0, [r5, #16]
 8080cf6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080cf8:	6025      	str	r5, [r4, #0]
 8080cfa:	e00c      	b.n	8080d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080cfc:	6804      	ldr	r4, [r0, #0]
 8080cfe:	b154      	cbz	r4, 8080d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8080d00:	f104 0010 	add.w	r0, r4, #16
 8080d04:	f7ff fde7 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080d08:	4620      	mov	r0, r4
 8080d0a:	f7ff fdcc 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d0e:	2118      	movs	r1, #24
 8080d10:	4620      	mov	r0, r4
 8080d12:	f000 fc9c 	bl	808164e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080d16:	2000      	movs	r0, #0
 8080d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080d1a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080d1c:	2300      	movs	r3, #0
 8080d1e:	6083      	str	r3, [r0, #8]
 8080d20:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080d22:	4604      	mov	r4, r0
 8080d24:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080d26:	b12b      	cbz	r3, 8080d34 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080d28:	2202      	movs	r2, #2
 8080d2a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080d2c:	68eb      	ldr	r3, [r5, #12]
 8080d2e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080d30:	68ab      	ldr	r3, [r5, #8]
 8080d32:	60a3      	str	r3, [r4, #8]
	}
    }
 8080d34:	4620      	mov	r0, r4
 8080d36:	bd38      	pop	{r3, r4, r5, pc}

08080d38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080d38:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080d3a:	b570      	push	{r4, r5, r6, lr}
 8080d3c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080d3e:	d006      	beq.n	8080d4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8080d40:	2a03      	cmp	r2, #3
 8080d42:	d011      	beq.n	8080d68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8080d44:	2a01      	cmp	r2, #1
 8080d46:	d118      	bne.n	8080d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080d48:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080d4a:	6003      	str	r3, [r0, #0]
	      break;
 8080d4c:	e015      	b.n	8080d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d4e:	2014      	movs	r0, #20
 8080d50:	680e      	ldr	r6, [r1, #0]
 8080d52:	f7ff f9a2 	bl	808009a <_Znwj>
 8080d56:	4605      	mov	r5, r0
 8080d58:	b120      	cbz	r0, 8080d64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080d5a:	4631      	mov	r1, r6
 8080d5c:	f7ff ffdd 	bl	8080d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080d60:	7c33      	ldrb	r3, [r6, #16]
 8080d62:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d64:	6025      	str	r5, [r4, #0]
 8080d66:	e008      	b.n	8080d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d68:	6804      	ldr	r4, [r0, #0]
 8080d6a:	b134      	cbz	r4, 8080d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080d6c:	4620      	mov	r0, r4
 8080d6e:	f7ff fd9a 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d72:	2114      	movs	r1, #20
 8080d74:	4620      	mov	r0, r4
 8080d76:	f000 fc6a 	bl	808164e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080d7a:	2000      	movs	r0, #0
 8080d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08080d80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8080d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080d82:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080d84:	f3bf 8f5f 	dmb	sy
 8080d88:	b087      	sub	sp, #28
 8080d8a:	2300      	movs	r3, #0
 8080d8c:	e850 6f00 	ldrex	r6, [r0]
 8080d90:	e840 3200 	strex	r2, r3, [r0]
 8080d94:	2a00      	cmp	r2, #0
 8080d96:	d1f9      	bne.n	8080d8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8080d98:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080d9c:	2e00      	cmp	r6, #0
 8080d9e:	d03f      	beq.n	8080e20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080da0:	4618      	mov	r0, r3
 8080da2:	f7ff fc19 	bl	80805d8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080da6:	4607      	mov	r7, r0
 8080da8:	b120      	cbz	r0, 8080db4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080daa:	4621      	mov	r1, r4
 8080dac:	4630      	mov	r0, r6
 8080dae:	f7ff fe53 	bl	8080a58 <_ZNKSt8functionIFvRKbEEclES1_>
 8080db2:	e02e      	b.n	8080e12 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080db4:	4631      	mov	r1, r6
 8080db6:	a801      	add	r0, sp, #4
 8080db8:	f7ff ffaf 	bl	8080d1a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080dbc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080dbe:	2010      	movs	r0, #16
 8080dc0:	f88d 3014 	strb.w	r3, [sp, #20]
 8080dc4:	f7ff f969 	bl	808009a <_Znwj>
 8080dc8:	4605      	mov	r5, r0
 8080dca:	b1d0      	cbz	r0, 8080e02 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080dcc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080dce:	2014      	movs	r0, #20
 8080dd0:	f7ff f963 	bl	808009a <_Znwj>
 8080dd4:	4604      	mov	r4, r0
 8080dd6:	b178      	cbz	r0, 8080df8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080dd8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080dda:	4601      	mov	r1, r0
 8080ddc:	a801      	add	r0, sp, #4
 8080dde:	f7ff fe07 	bl	80809f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080de2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080de4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080de6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080de8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080dea:	9203      	str	r2, [sp, #12]
 8080dec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080dee:	60e3      	str	r3, [r4, #12]
 8080df0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080df4:	9204      	str	r2, [sp, #16]
 8080df6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080df8:	4b0a      	ldr	r3, [pc, #40]	; (8080e24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080dfa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080dfc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080dfe:	4b0a      	ldr	r3, [pc, #40]	; (8080e28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8080e00:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080e02:	a801      	add	r0, sp, #4
 8080e04:	f7ff fd4f 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080e08:	2200      	movs	r2, #0
 8080e0a:	4629      	mov	r1, r5
 8080e0c:	4807      	ldr	r0, [pc, #28]	; (8080e2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8080e0e:	f7ff fbeb 	bl	80805e8 <application_thread_invoke>
 8080e12:	4630      	mov	r0, r6
 8080e14:	f7ff fd47 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080e18:	2110      	movs	r1, #16
 8080e1a:	4630      	mov	r0, r6
 8080e1c:	f000 fc17 	bl	808164e <_ZdlPvj>
        }
    }
 8080e20:	b007      	add	sp, #28
 8080e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080e24:	08080a6b 	.word	0x08080a6b
 8080e28:	08080d39 	.word	0x08080d39
 8080e2c:	08080791 	.word	0x08080791

08080e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080e30:	b530      	push	{r4, r5, lr}
 8080e32:	4604      	mov	r4, r0
 8080e34:	b085      	sub	sp, #20
 8080e36:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080e38:	4668      	mov	r0, sp
 8080e3a:	4611      	mov	r1, r2
 8080e3c:	f7ff fdba 	bl	80809b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080e40:	b17c      	cbz	r4, 8080e62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080e42:	b224      	sxth	r4, r4
 8080e44:	4628      	mov	r0, r5
 8080e46:	b10d      	cbz	r5, 8080e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8080e48:	f000 fdaa 	bl	80819a0 <strdup>
 8080e4c:	9002      	str	r0, [sp, #8]
 8080e4e:	a902      	add	r1, sp, #8
 8080e50:	4668      	mov	r0, sp
 8080e52:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080e56:	f7ff fe1f 	bl	8080a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080e5a:	a802      	add	r0, sp, #8
 8080e5c:	f7ff fd3b 	bl	80808d6 <_ZN8particle5ErrorD1Ev>
 8080e60:	e01d      	b.n	8080e9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080e62:	f04f 0201 	mov.w	r2, #1
 8080e66:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080e68:	f88d 4008 	strb.w	r4, [sp, #8]
 8080e6c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8080e70:	42a3      	cmp	r3, r4
 8080e72:	d103      	bne.n	8080e7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8080e74:	e8c0 2f41 	strexb	r1, r2, [r0]
 8080e78:	2900      	cmp	r1, #0
 8080e7a:	d1f7      	bne.n	8080e6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8080e7c:	d002      	beq.n	8080e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8080e7e:	f88d 3008 	strb.w	r3, [sp, #8]
 8080e82:	e00c      	b.n	8080e9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8080e84:	f110 010c 	adds.w	r1, r0, #12
 8080e88:	f04f 0301 	mov.w	r3, #1
 8080e8c:	bf18      	it	ne
 8080e8e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080e90:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8080e94:	3004      	adds	r0, #4
 8080e96:	f800 3c03 	strb.w	r3, [r0, #-3]
 8080e9a:	f7ff ff71 	bl	8080d80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8080e9e:	a801      	add	r0, sp, #4
 8080ea0:	f7ff f99a 	bl	80801d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8080ea4:	b005      	add	sp, #20
 8080ea6:	bd30      	pop	{r4, r5, pc}

08080ea8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080ea8:	4770      	bx	lr

08080eaa <_ZN9IPAddressD0Ev>:
 8080eaa:	b510      	push	{r4, lr}
 8080eac:	4604      	mov	r4, r0
 8080eae:	2108      	movs	r1, #8
 8080eb0:	f000 fbcd 	bl	808164e <_ZdlPvj>
 8080eb4:	4620      	mov	r0, r4
 8080eb6:	bd10      	pop	{r4, pc}

08080eb8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080eba:	460f      	mov	r7, r1
 8080ebc:	f100 0608 	add.w	r6, r0, #8
 8080ec0:	1d05      	adds	r5, r0, #4
 8080ec2:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8080ec4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080ec8:	220a      	movs	r2, #10
 8080eca:	4638      	mov	r0, r7
 8080ecc:	f000 f8d1 	bl	8081072 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080ed0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080ed2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080ed4:	d007      	beq.n	8080ee6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080ed6:	2c00      	cmp	r4, #0
 8080ed8:	d0f4      	beq.n	8080ec4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080eda:	212e      	movs	r1, #46	; 0x2e
 8080edc:	4638      	mov	r0, r7
 8080ede:	f000 f8c5 	bl	808106c <_ZN5Print5printEc>
 8080ee2:	4404      	add	r4, r0
 8080ee4:	e7ee      	b.n	8080ec4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080ee6:	4620      	mov	r0, r4
 8080ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080eec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8080eec:	4a02      	ldr	r2, [pc, #8]	; (8080ef8 <_ZN9IPAddressC1Ev+0xc>)
 8080eee:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080ef0:	2200      	movs	r2, #0
 8080ef2:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8080ef4:	4770      	bx	lr
 8080ef6:	bf00      	nop
 8080ef8:	08081bb4 	.word	0x08081bb4

08080efc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8080efc:	4a02      	ldr	r2, [pc, #8]	; (8080f08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080efe:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8080f00:	680a      	ldr	r2, [r1, #0]
 8080f02:	6042      	str	r2, [r0, #4]
}
 8080f04:	4770      	bx	lr
 8080f06:	bf00      	nop
 8080f08:	08081bb4 	.word	0x08081bb4

08080f0c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080f0c:	4a01      	ldr	r2, [pc, #4]	; (8080f14 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8080f0e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080f10:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8080f12:	4770      	bx	lr
 8080f14:	08081bb4 	.word	0x08081bb4

08080f18 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080f18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080f1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080f1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080f22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080f26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080f2a:	6041      	str	r1, [r0, #4]
 8080f2c:	bd10      	pop	{r4, pc}
	...

08080f30 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f32:	4d04      	ldr	r5, [pc, #16]	; (8080f44 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080f34:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080f36:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080f3a:	9500      	str	r5, [sp, #0]
 8080f3c:	f7ff ffec 	bl	8080f18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080f40:	b003      	add	sp, #12
 8080f42:	bd30      	pop	{r4, r5, pc}
 8080f44:	08081bb4 	.word	0x08081bb4

08080f48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080f48:	4a01      	ldr	r2, [pc, #4]	; (8080f50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080f4a:	4b02      	ldr	r3, [pc, #8]	; (8080f54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080f4c:	601a      	str	r2, [r3, #0]
 8080f4e:	4770      	bx	lr
 8080f50:	08081c36 	.word	0x08081c36
 8080f54:	200000c0 	.word	0x200000c0

08080f58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8080f58:	2300      	movs	r3, #0
 8080f5a:	461a      	mov	r2, r3
 8080f5c:	6840      	ldr	r0, [r0, #4]
 8080f5e:	f7ff bb9f 	b.w	80806a0 <network_connect>

08080f62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8080f62:	2200      	movs	r2, #0
 8080f64:	2102      	movs	r1, #2
 8080f66:	6840      	ldr	r0, [r0, #4]
 8080f68:	f7ff bbaa 	b.w	80806c0 <network_disconnect>

08080f6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8080f6c:	2200      	movs	r2, #0
 8080f6e:	4611      	mov	r1, r2
 8080f70:	6840      	ldr	r0, [r0, #4]
 8080f72:	f7ff bb9d 	b.w	80806b0 <network_connecting>

08080f76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8080f76:	2200      	movs	r2, #0
 8080f78:	4611      	mov	r1, r2
 8080f7a:	6840      	ldr	r0, [r0, #4]
 8080f7c:	f7ff bba8 	b.w	80806d0 <network_ready>

08080f80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8080f80:	2300      	movs	r3, #0
 8080f82:	461a      	mov	r2, r3
 8080f84:	4619      	mov	r1, r3
 8080f86:	6840      	ldr	r0, [r0, #4]
 8080f88:	f7ff bbaa 	b.w	80806e0 <network_on>

08080f8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8080f8c:	2300      	movs	r3, #0
 8080f8e:	461a      	mov	r2, r3
 8080f90:	4619      	mov	r1, r3
 8080f92:	6840      	ldr	r0, [r0, #4]
 8080f94:	f7ff bbac 	b.w	80806f0 <network_off>

08080f98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8080f98:	2200      	movs	r2, #0
 8080f9a:	f081 0101 	eor.w	r1, r1, #1
 8080f9e:	6840      	ldr	r0, [r0, #4]
 8080fa0:	f7ff bbae 	b.w	8080700 <network_listen>

08080fa4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8080fa4:	2200      	movs	r2, #0
 8080fa6:	6840      	ldr	r0, [r0, #4]
 8080fa8:	f7ff bbba 	b.w	8080720 <network_set_listen_timeout>

08080fac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8080fac:	2200      	movs	r2, #0
 8080fae:	4611      	mov	r1, r2
 8080fb0:	6840      	ldr	r0, [r0, #4]
 8080fb2:	f7ff bbbd 	b.w	8080730 <network_get_listen_timeout>

08080fb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8080fb6:	2200      	movs	r2, #0
 8080fb8:	4611      	mov	r1, r2
 8080fba:	6840      	ldr	r0, [r0, #4]
 8080fbc:	f7ff bba8 	b.w	8080710 <network_listening>

08080fc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8080fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080fc2:	4617      	mov	r7, r2
 8080fc4:	b087      	sub	sp, #28
 8080fc6:	4605      	mov	r5, r0
    IPAddress addr;
 8080fc8:	a804      	add	r0, sp, #16
 8080fca:	f7ff ff8f 	bl	8080eec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080fce:	2600      	movs	r6, #0
 8080fd0:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080fd2:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080fd4:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080fd8:	f000 fcfd 	bl	80819d6 <strlen>
 8080fdc:	4b0a      	ldr	r3, [pc, #40]	; (8081008 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8080fde:	9600      	str	r6, [sp, #0]
 8080fe0:	b281      	uxth	r1, r0
 8080fe2:	685b      	ldr	r3, [r3, #4]
 8080fe4:	4622      	mov	r2, r4
 8080fe6:	4638      	mov	r0, r7
 8080fe8:	f7ff fa4e 	bl	8080488 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080fec:	b120      	cbz	r0, 8080ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8080fee:	4631      	mov	r1, r6
 8080ff0:	4628      	mov	r0, r5
 8080ff2:	f7ff ff8b 	bl	8080f0c <_ZN9IPAddressC1Em>
 8080ff6:	e003      	b.n	8081000 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8080ff8:	4621      	mov	r1, r4
 8080ffa:	4628      	mov	r0, r5
 8080ffc:	f7ff ff7e 	bl	8080efc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8081000:	4628      	mov	r0, r5
 8081002:	b007      	add	sp, #28
 8081004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081006:	bf00      	nop
 8081008:	20000090 	.word	0x20000090

0808100c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808100c:	4b02      	ldr	r3, [pc, #8]	; (8081018 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808100e:	4a03      	ldr	r2, [pc, #12]	; (808101c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081010:	601a      	str	r2, [r3, #0]
 8081012:	2200      	movs	r2, #0
 8081014:	605a      	str	r2, [r3, #4]
 8081016:	4770      	bx	lr
 8081018:	200000c4 	.word	0x200000c4
 808101c:	08081cac 	.word	0x08081cac

08081020 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081022:	4606      	mov	r6, r0
 8081024:	460d      	mov	r5, r1
 8081026:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8081028:	2400      	movs	r4, #0
  while (size--) {
 808102a:	42bd      	cmp	r5, r7
 808102c:	d00c      	beq.n	8081048 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808102e:	6833      	ldr	r3, [r6, #0]
 8081030:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081034:	689b      	ldr	r3, [r3, #8]
 8081036:	4630      	mov	r0, r6
 8081038:	4798      	blx	r3
     if (chunk>=0)
 808103a:	2800      	cmp	r0, #0
 808103c:	db01      	blt.n	8081042 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808103e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081040:	e7f3      	b.n	808102a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081042:	2c00      	cmp	r4, #0
 8081044:	bf08      	it	eq
 8081046:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8081048:	4620      	mov	r0, r4
 808104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808104c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 808104c:	b570      	push	{r4, r5, r6, lr}
 808104e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081050:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081052:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081054:	b149      	cbz	r1, 808106a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081056:	f000 fcbe 	bl	80819d6 <strlen>
 808105a:	682b      	ldr	r3, [r5, #0]
 808105c:	4602      	mov	r2, r0
 808105e:	4621      	mov	r1, r4
 8081060:	4628      	mov	r0, r5
    }
 8081062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081066:	68db      	ldr	r3, [r3, #12]
 8081068:	4718      	bx	r3
    }
 808106a:	bd70      	pop	{r4, r5, r6, pc}

0808106c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808106c:	6803      	ldr	r3, [r0, #0]
 808106e:	689b      	ldr	r3, [r3, #8]
 8081070:	4718      	bx	r3

08081072 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081072:	2a01      	cmp	r2, #1
 8081074:	bf98      	it	ls
 8081076:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081078:	b530      	push	{r4, r5, lr}
 808107a:	460b      	mov	r3, r1
 808107c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808107e:	2100      	movs	r1, #0
 8081080:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081084:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8081088:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 808108c:	fb05 3312 	mls	r3, r5, r2, r3
 8081090:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081092:	2b09      	cmp	r3, #9
 8081094:	bf94      	ite	ls
 8081096:	3330      	addls	r3, #48	; 0x30
 8081098:	3337      	addhi	r3, #55	; 0x37
 808109a:	b2db      	uxtb	r3, r3
 808109c:	4621      	mov	r1, r4
 808109e:	f804 3901 	strb.w	r3, [r4], #-1
 80810a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80810a4:	2d00      	cmp	r5, #0
 80810a6:	d1ef      	bne.n	8081088 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80810a8:	f7ff ffd0 	bl	808104c <_ZN5Print5writeEPKc>
}
 80810ac:	b00b      	add	sp, #44	; 0x2c
 80810ae:	bd30      	pop	{r4, r5, pc}

080810b0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80810b0:	b510      	push	{r4, lr}
 80810b2:	4604      	mov	r4, r0
 80810b4:	f7ff fbf7 	bl	80808a6 <_ZNSt14_Function_baseD1Ev>
 80810b8:	4620      	mov	r0, r4
 80810ba:	bd10      	pop	{r4, pc}

080810bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80810bc:	4803      	ldr	r0, [pc, #12]	; (80810cc <_GLOBAL__sub_I_RGB+0x10>)
 80810be:	2300      	movs	r3, #0
 80810c0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80810c2:	4a03      	ldr	r2, [pc, #12]	; (80810d0 <_GLOBAL__sub_I_RGB+0x14>)
 80810c4:	4903      	ldr	r1, [pc, #12]	; (80810d4 <_GLOBAL__sub_I_RGB+0x18>)
 80810c6:	f000 babd 	b.w	8081644 <__aeabi_atexit>
 80810ca:	bf00      	nop
 80810cc:	200000cc 	.word	0x200000cc
 80810d0:	20000078 	.word	0x20000078
 80810d4:	080810b1 	.word	0x080810b1

080810d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80810d8:	b510      	push	{r4, lr}
 80810da:	4604      	mov	r4, r0
{
	free(buffer);
 80810dc:	6800      	ldr	r0, [r0, #0]
 80810de:	f7ff fb37 	bl	8080750 <free>
}
 80810e2:	4620      	mov	r0, r4
 80810e4:	bd10      	pop	{r4, pc}

080810e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80810e6:	b510      	push	{r4, lr}
 80810e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80810ea:	6800      	ldr	r0, [r0, #0]
 80810ec:	b108      	cbz	r0, 80810f2 <_ZN6String10invalidateEv+0xc>
 80810ee:	f7ff fb2f 	bl	8080750 <free>
	buffer = NULL;
 80810f2:	2300      	movs	r3, #0
 80810f4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80810f6:	60a3      	str	r3, [r4, #8]
 80810f8:	6063      	str	r3, [r4, #4]
 80810fa:	bd10      	pop	{r4, pc}

080810fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80810fc:	b538      	push	{r3, r4, r5, lr}
 80810fe:	4604      	mov	r4, r0
 8081100:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081102:	6800      	ldr	r0, [r0, #0]
 8081104:	3101      	adds	r1, #1
 8081106:	f7ff fb2b 	bl	8080760 <realloc>
	if (newbuffer) {
 808110a:	b110      	cbz	r0, 8081112 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808110c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081110:	2001      	movs	r0, #1
	}
	return 0;
}
 8081112:	bd38      	pop	{r3, r4, r5, pc}

08081114 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081114:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081116:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081118:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808111a:	b113      	cbz	r3, 8081122 <_ZN6String7reserveEj+0xe>
 808111c:	6843      	ldr	r3, [r0, #4]
 808111e:	428b      	cmp	r3, r1
 8081120:	d207      	bcs.n	8081132 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8081122:	4620      	mov	r0, r4
 8081124:	f7ff ffea 	bl	80810fc <_ZN6String12changeBufferEj>
 8081128:	b120      	cbz	r0, 8081134 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808112a:	68a3      	ldr	r3, [r4, #8]
 808112c:	b90b      	cbnz	r3, 8081132 <_ZN6String7reserveEj+0x1e>
 808112e:	6822      	ldr	r2, [r4, #0]
 8081130:	7013      	strb	r3, [r2, #0]
 8081132:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081134:	bd10      	pop	{r4, pc}

08081136 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081136:	b570      	push	{r4, r5, r6, lr}
 8081138:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808113a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808113c:	4604      	mov	r4, r0
 808113e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081140:	f7ff ffe8 	bl	8081114 <_ZN6String7reserveEj>
 8081144:	b918      	cbnz	r0, 808114e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081146:	4620      	mov	r0, r4
 8081148:	f7ff ffcd 	bl	80810e6 <_ZN6String10invalidateEv>
		return *this;
 808114c:	e009      	b.n	8081162 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808114e:	462a      	mov	r2, r5
 8081150:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8081152:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081154:	6820      	ldr	r0, [r4, #0]
 8081156:	f000 fbd5 	bl	8081904 <memcpy>
	buffer[len] = 0;
 808115a:	6822      	ldr	r2, [r4, #0]
 808115c:	68a3      	ldr	r3, [r4, #8]
 808115e:	2100      	movs	r1, #0
 8081160:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8081162:	4620      	mov	r0, r4
 8081164:	bd70      	pop	{r4, r5, r6, pc}

08081166 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081166:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081168:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808116a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808116c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808116e:	6043      	str	r3, [r0, #4]
	len = 0;
 8081170:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081172:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081174:	460d      	mov	r5, r1
 8081176:	b139      	cbz	r1, 8081188 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081178:	4608      	mov	r0, r1
 808117a:	f000 fc2c 	bl	80819d6 <strlen>
 808117e:	4629      	mov	r1, r5
 8081180:	4602      	mov	r2, r0
 8081182:	4620      	mov	r0, r4
 8081184:	f7ff ffd7 	bl	8081136 <_ZN6String4copyEPKcj>
}
 8081188:	4620      	mov	r0, r4
 808118a:	bd38      	pop	{r3, r4, r5, pc}

0808118c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808118c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808118e:	b510      	push	{r4, lr}
 8081190:	460b      	mov	r3, r1
 8081192:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081194:	d007      	beq.n	80811a6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081196:	6809      	ldr	r1, [r1, #0]
 8081198:	b119      	cbz	r1, 80811a2 <_ZN6StringaSERKS_+0x16>
 808119a:	689a      	ldr	r2, [r3, #8]
 808119c:	f7ff ffcb 	bl	8081136 <_ZN6String4copyEPKcj>
 80811a0:	e001      	b.n	80811a6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80811a2:	f7ff ffa0 	bl	80810e6 <_ZN6String10invalidateEv>

	return *this;
}
 80811a6:	4620      	mov	r0, r4
 80811a8:	bd10      	pop	{r4, pc}

080811aa <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80811aa:	b510      	push	{r4, lr}
 80811ac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80811ae:	2300      	movs	r3, #0
 80811b0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80811b2:	6043      	str	r3, [r0, #4]
	len = 0;
 80811b4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80811b6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80811b8:	f7ff ffe8 	bl	808118c <_ZN6StringaSERKS_>
}
 80811bc:	4620      	mov	r0, r4
 80811be:	bd10      	pop	{r4, pc}

080811c0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80811c0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80811c2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80811c4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80811c6:	b912      	cbnz	r2, 80811ce <_ZNK6String6equalsEPKc+0xe>
 80811c8:	b919      	cbnz	r1, 80811d2 <_ZNK6String6equalsEPKc+0x12>
 80811ca:	2001      	movs	r0, #1
 80811cc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80811ce:	b911      	cbnz	r1, 80811d6 <_ZNK6String6equalsEPKc+0x16>
 80811d0:	6803      	ldr	r3, [r0, #0]
 80811d2:	7818      	ldrb	r0, [r3, #0]
 80811d4:	e002      	b.n	80811dc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80811d6:	6800      	ldr	r0, [r0, #0]
 80811d8:	f000 fbd0 	bl	808197c <strcmp>
 80811dc:	fab0 f080 	clz	r0, r0
 80811e0:	0940      	lsrs	r0, r0, #5
}
 80811e2:	bd08      	pop	{r3, pc}

080811e4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80811e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80811e8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80811ea:	4c08      	ldr	r4, [pc, #32]	; (808120c <_GLOBAL__sub_I_System+0x28>)
 80811ec:	2000      	movs	r0, #0
 80811ee:	6020      	str	r0, [r4, #0]
 80811f0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80811f2:	71a0      	strb	r0, [r4, #6]
 80811f4:	8120      	strh	r0, [r4, #8]
 80811f6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80811f8:	f7ff f9de 	bl	80805b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80811fc:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80811fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8081202:	4a03      	ldr	r2, [pc, #12]	; (8081210 <_GLOBAL__sub_I_System+0x2c>)
 8081204:	4903      	ldr	r1, [pc, #12]	; (8081214 <_GLOBAL__sub_I_System+0x30>)
 8081206:	f000 ba1d 	b.w	8081644 <__aeabi_atexit>
 808120a:	bf00      	nop
 808120c:	200000dc 	.word	0x200000dc
 8081210:	20000078 	.word	0x20000078
 8081214:	080800b3 	.word	0x080800b3

08081218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081218:	4b02      	ldr	r3, [pc, #8]	; (8081224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808121a:	681a      	ldr	r2, [r3, #0]
 808121c:	4b02      	ldr	r3, [pc, #8]	; (8081228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808121e:	601a      	str	r2, [r3, #0]
 8081220:	4770      	bx	lr
 8081222:	bf00      	nop
 8081224:	20000010 	.word	0x20000010
 8081228:	200000e8 	.word	0x200000e8

0808122c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808122c:	4770      	bx	lr

0808122e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808122e:	7441      	strb	r1, [r0, #17]
 8081230:	4770      	bx	lr

08081232 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8081232:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8081234:	7c00      	ldrb	r0, [r0, #16]
 8081236:	f7ff f987 	bl	8080548 <HAL_USART_Available_Data_For_Write>
}
 808123a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808123e:	bd08      	pop	{r3, pc}

08081240 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081240:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8081242:	7c00      	ldrb	r0, [r0, #16]
 8081244:	f7ff f960 	bl	8080508 <HAL_USART_Available_Data>
}
 8081248:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808124c:	bd08      	pop	{r3, pc}

0808124e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808124e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8081250:	7c00      	ldrb	r0, [r0, #16]
 8081252:	f7ff f969 	bl	8080528 <HAL_USART_Peek_Data>
}
 8081256:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808125a:	bf28      	it	cs
 808125c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081260:	bd08      	pop	{r3, pc}

08081262 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081262:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8081264:	7c00      	ldrb	r0, [r0, #16]
 8081266:	f7ff f957 	bl	8080518 <HAL_USART_Read_Data>
}
 808126a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808126e:	bf28      	it	cs
 8081270:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081274:	bd08      	pop	{r3, pc}

08081276 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081276:	7c00      	ldrb	r0, [r0, #16]
 8081278:	f7ff b95e 	b.w	8080538 <HAL_USART_Flush_Data>

0808127c <_ZN11USARTSerialD0Ev>:
 808127c:	b510      	push	{r4, lr}
 808127e:	4604      	mov	r4, r0
 8081280:	2114      	movs	r1, #20
 8081282:	f000 f9e4 	bl	808164e <_ZdlPvj>
 8081286:	4620      	mov	r0, r4
 8081288:	bd10      	pop	{r4, pc}

0808128a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808128a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808128c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808128e:	4604      	mov	r4, r0
 8081290:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081292:	b925      	cbnz	r5, 808129e <_ZN11USARTSerial5writeEh+0x14>
 8081294:	7c00      	ldrb	r0, [r0, #16]
 8081296:	f7ff f957 	bl	8080548 <HAL_USART_Available_Data_For_Write>
 808129a:	2800      	cmp	r0, #0
 808129c:	dd05      	ble.n	80812aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808129e:	4631      	mov	r1, r6
 80812a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80812a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80812a6:	f7ff b927 	b.w	80804f8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80812aa:	4628      	mov	r0, r5
 80812ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080812b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80812b0:	b510      	push	{r4, lr}
 80812b2:	4604      	mov	r4, r0
 80812b4:	4608      	mov	r0, r1
 80812b6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80812b8:	2200      	movs	r2, #0
 80812ba:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80812bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80812c0:	60a2      	str	r2, [r4, #8]
 80812c2:	4a05      	ldr	r2, [pc, #20]	; (80812d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80812c4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80812c6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80812c8:	2201      	movs	r2, #1
 80812ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80812cc:	461a      	mov	r2, r3
 80812ce:	f7ff f90b 	bl	80804e8 <HAL_USART_Init>
}
 80812d2:	4620      	mov	r0, r4
 80812d4:	bd10      	pop	{r4, pc}
 80812d6:	bf00      	nop
 80812d8:	08081d0c 	.word	0x08081d0c

080812dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80812dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80812de:	4d0c      	ldr	r5, [pc, #48]	; (8081310 <_Z22__fetch_global_Serial1v+0x34>)
 80812e0:	6829      	ldr	r1, [r5, #0]
 80812e2:	f011 0401 	ands.w	r4, r1, #1
 80812e6:	d111      	bne.n	808130c <_Z22__fetch_global_Serial1v+0x30>
 80812e8:	4628      	mov	r0, r5
 80812ea:	f7fe feda 	bl	80800a2 <__cxa_guard_acquire>
 80812ee:	b168      	cbz	r0, 808130c <_Z22__fetch_global_Serial1v+0x30>
 80812f0:	4a08      	ldr	r2, [pc, #32]	; (8081314 <_Z22__fetch_global_Serial1v+0x38>)
 80812f2:	4621      	mov	r1, r4
 80812f4:	4b08      	ldr	r3, [pc, #32]	; (8081318 <_Z22__fetch_global_Serial1v+0x3c>)
 80812f6:	4809      	ldr	r0, [pc, #36]	; (808131c <_Z22__fetch_global_Serial1v+0x40>)
 80812f8:	f7ff ffda 	bl	80812b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80812fc:	4628      	mov	r0, r5
 80812fe:	f7fe fed5 	bl	80800ac <__cxa_guard_release>
 8081302:	4a07      	ldr	r2, [pc, #28]	; (8081320 <_Z22__fetch_global_Serial1v+0x44>)
 8081304:	4907      	ldr	r1, [pc, #28]	; (8081324 <_Z22__fetch_global_Serial1v+0x48>)
 8081306:	4805      	ldr	r0, [pc, #20]	; (808131c <_Z22__fetch_global_Serial1v+0x40>)
 8081308:	f000 f99c 	bl	8081644 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808130c:	4803      	ldr	r0, [pc, #12]	; (808131c <_Z22__fetch_global_Serial1v+0x40>)
 808130e:	bd38      	pop	{r3, r4, r5, pc}
 8081310:	20000184 	.word	0x20000184
 8081314:	20000188 	.word	0x20000188
 8081318:	20000100 	.word	0x20000100
 808131c:	200000ec 	.word	0x200000ec
 8081320:	20000078 	.word	0x20000078
 8081324:	0808122d 	.word	0x0808122d

08081328 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081328:	7441      	strb	r1, [r0, #17]
 808132a:	4770      	bx	lr

0808132c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808132c:	4770      	bx	lr

0808132e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808132e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081330:	2100      	movs	r1, #0
 8081332:	7c00      	ldrb	r0, [r0, #16]
 8081334:	f7ff f928 	bl	8080588 <HAL_USB_USART_Receive_Data>
}
 8081338:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808133c:	bf28      	it	cs
 808133e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081342:	bd08      	pop	{r3, pc}

08081344 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8081344:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081346:	2101      	movs	r1, #1
 8081348:	7c00      	ldrb	r0, [r0, #16]
 808134a:	f7ff f91d 	bl	8080588 <HAL_USB_USART_Receive_Data>
}
 808134e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081352:	bf28      	it	cs
 8081354:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8081358:	bd08      	pop	{r3, pc}

0808135a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808135a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808135c:	7c00      	ldrb	r0, [r0, #16]
 808135e:	f7ff f90b 	bl	8080578 <HAL_USB_USART_Available_Data_For_Write>
}
 8081362:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081366:	bd08      	pop	{r3, pc}

08081368 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8081368:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808136a:	7c00      	ldrb	r0, [r0, #16]
 808136c:	f7ff f8fc 	bl	8080568 <HAL_USB_USART_Available_Data>
}
 8081370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081374:	bd08      	pop	{r3, pc}

08081376 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081376:	7c00      	ldrb	r0, [r0, #16]
 8081378:	f7ff b916 	b.w	80805a8 <HAL_USB_USART_Flush_Data>

0808137c <_ZN9USBSerialD0Ev>:
 808137c:	b510      	push	{r4, lr}
 808137e:	4604      	mov	r4, r0
 8081380:	2114      	movs	r1, #20
 8081382:	f000 f964 	bl	808164e <_ZdlPvj>
 8081386:	4620      	mov	r0, r4
 8081388:	bd10      	pop	{r4, pc}

0808138a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808138a:	b538      	push	{r3, r4, r5, lr}
 808138c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808138e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081390:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081392:	f7ff f8f1 	bl	8080578 <HAL_USB_USART_Available_Data_For_Write>
 8081396:	2800      	cmp	r0, #0
 8081398:	dc01      	bgt.n	808139e <_ZN9USBSerial5writeEh+0x14>
 808139a:	7c60      	ldrb	r0, [r4, #17]
 808139c:	b128      	cbz	r0, 80813aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808139e:	4629      	mov	r1, r5
 80813a0:	7c20      	ldrb	r0, [r4, #16]
 80813a2:	f7ff f8f9 	bl	8080598 <HAL_USB_USART_Send_Data>
 80813a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80813aa:	bd38      	pop	{r3, r4, r5, pc}

080813ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80813ac:	b510      	push	{r4, lr}
 80813ae:	4604      	mov	r4, r0
 80813b0:	2300      	movs	r3, #0
 80813b2:	6063      	str	r3, [r4, #4]
 80813b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80813b8:	60a3      	str	r3, [r4, #8]
 80813ba:	4b05      	ldr	r3, [pc, #20]	; (80813d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80813bc:	4608      	mov	r0, r1
 80813be:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80813c0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80813c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80813c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80813c6:	4611      	mov	r1, r2
 80813c8:	f7ff f8c6 	bl	8080558 <HAL_USB_USART_Init>
}
 80813cc:	4620      	mov	r0, r4
 80813ce:	bd10      	pop	{r4, pc}
 80813d0:	08081d3c 	.word	0x08081d3c

080813d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80813d4:	b510      	push	{r4, lr}
 80813d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80813d8:	2214      	movs	r2, #20
 80813da:	2100      	movs	r1, #0
 80813dc:	f000 fa9d 	bl	808191a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813e0:	4b05      	ldr	r3, [pc, #20]	; (80813f8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80813e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80813e6:	4b05      	ldr	r3, [pc, #20]	; (80813fc <_Z19acquireSerialBufferv+0x28>)
 80813e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80813ea:	f240 1301 	movw	r3, #257	; 0x101
 80813ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80813f0:	2381      	movs	r3, #129	; 0x81
 80813f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80813f4:	bd10      	pop	{r4, pc}
 80813f6:	bf00      	nop
 80813f8:	20000291 	.word	0x20000291
 80813fc:	20000210 	.word	0x20000210

08081400 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081400:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081402:	4d0e      	ldr	r5, [pc, #56]	; (808143c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081404:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081406:	a801      	add	r0, sp, #4
 8081408:	f7ff ffe4 	bl	80813d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808140c:	6829      	ldr	r1, [r5, #0]
 808140e:	f011 0401 	ands.w	r4, r1, #1
 8081412:	d110      	bne.n	8081436 <_Z16_fetch_usbserialv+0x36>
 8081414:	4628      	mov	r0, r5
 8081416:	f7fe fe44 	bl	80800a2 <__cxa_guard_acquire>
 808141a:	b160      	cbz	r0, 8081436 <_Z16_fetch_usbserialv+0x36>
 808141c:	aa01      	add	r2, sp, #4
 808141e:	4621      	mov	r1, r4
 8081420:	4807      	ldr	r0, [pc, #28]	; (8081440 <_Z16_fetch_usbserialv+0x40>)
 8081422:	f7ff ffc3 	bl	80813ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081426:	4628      	mov	r0, r5
 8081428:	f7fe fe40 	bl	80800ac <__cxa_guard_release>
 808142c:	4a05      	ldr	r2, [pc, #20]	; (8081444 <_Z16_fetch_usbserialv+0x44>)
 808142e:	4906      	ldr	r1, [pc, #24]	; (8081448 <_Z16_fetch_usbserialv+0x48>)
 8081430:	4803      	ldr	r0, [pc, #12]	; (8081440 <_Z16_fetch_usbserialv+0x40>)
 8081432:	f000 f907 	bl	8081644 <__aeabi_atexit>
	return _usbserial;
}
 8081436:	4802      	ldr	r0, [pc, #8]	; (8081440 <_Z16_fetch_usbserialv+0x40>)
 8081438:	b007      	add	sp, #28
 808143a:	bd30      	pop	{r4, r5, pc}
 808143c:	2000020c 	.word	0x2000020c
 8081440:	20000394 	.word	0x20000394
 8081444:	20000078 	.word	0x20000078
 8081448:	0808132d 	.word	0x0808132d

0808144c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808144c:	b510      	push	{r4, lr}
 808144e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081450:	2214      	movs	r2, #20
 8081452:	2100      	movs	r1, #0
 8081454:	f000 fa61 	bl	808191a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081458:	4b05      	ldr	r3, [pc, #20]	; (8081470 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808145a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808145c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808145e:	4b05      	ldr	r3, [pc, #20]	; (8081474 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081460:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081462:	f240 1301 	movw	r3, #257	; 0x101
 8081466:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081468:	2381      	movs	r3, #129	; 0x81
 808146a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808146c:	bd10      	pop	{r4, pc}
 808146e:	bf00      	nop
 8081470:	20000444 	.word	0x20000444
 8081474:	200003ac 	.word	0x200003ac

08081478 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081478:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808147a:	4c0e      	ldr	r4, [pc, #56]	; (80814b4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808147c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808147e:	a801      	add	r0, sp, #4
 8081480:	f7ff ffe4 	bl	808144c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081484:	6823      	ldr	r3, [r4, #0]
 8081486:	07db      	lsls	r3, r3, #31
 8081488:	d410      	bmi.n	80814ac <_Z17_fetch_usbserial1v+0x34>
 808148a:	4620      	mov	r0, r4
 808148c:	f7fe fe09 	bl	80800a2 <__cxa_guard_acquire>
 8081490:	b160      	cbz	r0, 80814ac <_Z17_fetch_usbserial1v+0x34>
 8081492:	aa01      	add	r2, sp, #4
 8081494:	2101      	movs	r1, #1
 8081496:	4808      	ldr	r0, [pc, #32]	; (80814b8 <_Z17_fetch_usbserial1v+0x40>)
 8081498:	f7ff ff88 	bl	80813ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808149c:	4620      	mov	r0, r4
 808149e:	f7fe fe05 	bl	80800ac <__cxa_guard_release>
 80814a2:	4a06      	ldr	r2, [pc, #24]	; (80814bc <_Z17_fetch_usbserial1v+0x44>)
 80814a4:	4906      	ldr	r1, [pc, #24]	; (80814c0 <_Z17_fetch_usbserial1v+0x48>)
 80814a6:	4804      	ldr	r0, [pc, #16]	; (80814b8 <_Z17_fetch_usbserial1v+0x40>)
 80814a8:	f000 f8cc 	bl	8081644 <__aeabi_atexit>
  return _usbserial1;
}
 80814ac:	4802      	ldr	r0, [pc, #8]	; (80814b8 <_Z17_fetch_usbserial1v+0x40>)
 80814ae:	b006      	add	sp, #24
 80814b0:	bd10      	pop	{r4, pc}
 80814b2:	bf00      	nop
 80814b4:	200003a8 	.word	0x200003a8
 80814b8:	20000430 	.word	0x20000430
 80814bc:	20000078 	.word	0x20000078
 80814c0:	0808132d 	.word	0x0808132d

080814c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80814c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80814c6:	4b18      	ldr	r3, [pc, #96]	; (8081528 <serialEventRun+0x64>)
 80814c8:	b133      	cbz	r3, 80814d8 <serialEventRun+0x14>
 80814ca:	f7ff ff99 	bl	8081400 <_Z16_fetch_usbserialv>
 80814ce:	6803      	ldr	r3, [r0, #0]
 80814d0:	691b      	ldr	r3, [r3, #16]
 80814d2:	4798      	blx	r3
 80814d4:	2800      	cmp	r0, #0
 80814d6:	dc1e      	bgt.n	8081516 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80814d8:	4b14      	ldr	r3, [pc, #80]	; (808152c <serialEventRun+0x68>)
 80814da:	b133      	cbz	r3, 80814ea <serialEventRun+0x26>
 80814dc:	f7ff fefe 	bl	80812dc <_Z22__fetch_global_Serial1v>
 80814e0:	6803      	ldr	r3, [r0, #0]
 80814e2:	691b      	ldr	r3, [r3, #16]
 80814e4:	4798      	blx	r3
 80814e6:	2800      	cmp	r0, #0
 80814e8:	dc18      	bgt.n	808151c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80814ea:	4b11      	ldr	r3, [pc, #68]	; (8081530 <serialEventRun+0x6c>)
 80814ec:	b10b      	cbz	r3, 80814f2 <serialEventRun+0x2e>
 80814ee:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80814f2:	4b10      	ldr	r3, [pc, #64]	; (8081534 <serialEventRun+0x70>)
 80814f4:	b10b      	cbz	r3, 80814fa <serialEventRun+0x36>
 80814f6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80814fa:	4b0f      	ldr	r3, [pc, #60]	; (8081538 <serialEventRun+0x74>)
 80814fc:	b10b      	cbz	r3, 8081502 <serialEventRun+0x3e>
 80814fe:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081502:	4b0e      	ldr	r3, [pc, #56]	; (808153c <serialEventRun+0x78>)
 8081504:	b17b      	cbz	r3, 8081526 <serialEventRun+0x62>
 8081506:	f7ff ffb7 	bl	8081478 <_Z17_fetch_usbserial1v>
 808150a:	6803      	ldr	r3, [r0, #0]
 808150c:	691b      	ldr	r3, [r3, #16]
 808150e:	4798      	blx	r3
 8081510:	2800      	cmp	r0, #0
 8081512:	dc06      	bgt.n	8081522 <serialEventRun+0x5e>
 8081514:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081516:	f3af 8000 	nop.w
 808151a:	e7dd      	b.n	80814d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808151c:	f3af 8000 	nop.w
 8081520:	e7e3      	b.n	80814ea <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081522:	f3af 8000 	nop.w
 8081526:	bd08      	pop	{r3, pc}
	...

08081540 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081540:	b508      	push	{r3, lr}
	serialEventRun();
 8081542:	f7ff ffbf 	bl	80814c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081546:	f7fe ffb7 	bl	80804b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808154a:	4b01      	ldr	r3, [pc, #4]	; (8081550 <_post_loop+0x10>)
 808154c:	6018      	str	r0, [r3, #0]
 808154e:	bd08      	pop	{r3, pc}
 8081550:	20000550 	.word	0x20000550

08081554 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081554:	4802      	ldr	r0, [pc, #8]	; (8081560 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081556:	4a03      	ldr	r2, [pc, #12]	; (8081564 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081558:	4903      	ldr	r1, [pc, #12]	; (8081568 <_Z33system_initialize_user_backup_ramv+0x14>)
 808155a:	1a12      	subs	r2, r2, r0
 808155c:	f000 b9d2 	b.w	8081904 <memcpy>
 8081560:	40024000 	.word	0x40024000
 8081564:	40024004 	.word	0x40024004
 8081568:	08081e00 	.word	0x08081e00

0808156c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808156c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808156e:	2300      	movs	r3, #0
 8081570:	9300      	str	r3, [sp, #0]
 8081572:	461a      	mov	r2, r3
 8081574:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081578:	f7ff f848 	bl	808060c <system_ctrl_set_result>
}
 808157c:	b003      	add	sp, #12
 808157e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081584 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081584:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081586:	8843      	ldrh	r3, [r0, #2]
 8081588:	2b0a      	cmp	r3, #10
 808158a:	d008      	beq.n	808159e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808158c:	2b50      	cmp	r3, #80	; 0x50
 808158e:	d109      	bne.n	80815a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081590:	4b09      	ldr	r3, [pc, #36]	; (80815b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081592:	681b      	ldr	r3, [r3, #0]
 8081594:	b13b      	cbz	r3, 80815a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081596:	b003      	add	sp, #12
 8081598:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808159c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808159e:	f7ff ffe5 	bl	808156c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80815a2:	e006      	b.n	80815b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80815a4:	2300      	movs	r3, #0
 80815a6:	9300      	str	r3, [sp, #0]
 80815a8:	461a      	mov	r2, r3
 80815aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80815ae:	f7ff f82d 	bl	808060c <system_ctrl_set_result>
        break;
    }
}
 80815b2:	b003      	add	sp, #12
 80815b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80815b8:	20000548 	.word	0x20000548

080815bc <module_user_init_hook>:

void module_user_init_hook()
{
 80815bc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80815be:	4c10      	ldr	r4, [pc, #64]	; (8081600 <module_user_init_hook+0x44>)
 80815c0:	4d10      	ldr	r5, [pc, #64]	; (8081604 <module_user_init_hook+0x48>)
 80815c2:	6823      	ldr	r3, [r4, #0]
 80815c4:	42ab      	cmp	r3, r5
 80815c6:	4b10      	ldr	r3, [pc, #64]	; (8081608 <module_user_init_hook+0x4c>)
 80815c8:	bf0c      	ite	eq
 80815ca:	2201      	moveq	r2, #1
 80815cc:	2200      	movne	r2, #0
 80815ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80815d0:	d002      	beq.n	80815d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80815d2:	f7ff ffbf 	bl	8081554 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80815d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80815d8:	f7fe ff66 	bl	80804a8 <HAL_RNG_GetRandomNumber>
 80815dc:	4604      	mov	r4, r0
    srand(seed);
 80815de:	f000 f9a5 	bl	808192c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80815e2:	4b0a      	ldr	r3, [pc, #40]	; (808160c <module_user_init_hook+0x50>)
 80815e4:	b113      	cbz	r3, 80815ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80815e6:	4620      	mov	r0, r4
 80815e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80815ec:	2100      	movs	r1, #0
 80815ee:	4807      	ldr	r0, [pc, #28]	; (808160c <module_user_init_hook+0x50>)
 80815f0:	f7ff f84e 	bl	8080690 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80815f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80815f8:	2100      	movs	r1, #0
 80815fa:	4805      	ldr	r0, [pc, #20]	; (8081610 <module_user_init_hook+0x54>)
 80815fc:	f7fe bffc 	b.w	80805f8 <system_ctrl_set_app_request_handler>
 8081600:	40024000 	.word	0x40024000
 8081604:	9a271c1e 	.word	0x9a271c1e
 8081608:	2000054c 	.word	0x2000054c
 808160c:	00000000 	.word	0x00000000
 8081610:	08081585 	.word	0x08081585

08081614 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081614:	b513      	push	{r0, r1, r4, lr}
 8081616:	4c08      	ldr	r4, [pc, #32]	; (8081638 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081618:	2300      	movs	r3, #0
 808161a:	461a      	mov	r2, r3
 808161c:	4619      	mov	r1, r3
 808161e:	9300      	str	r3, [sp, #0]
 8081620:	4620      	mov	r0, r4
 8081622:	f7ff fc85 	bl	8080f30 <_ZN9IPAddressC1Ehhhh>
 8081626:	4620      	mov	r0, r4
 8081628:	4a04      	ldr	r2, [pc, #16]	; (808163c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808162a:	4905      	ldr	r1, [pc, #20]	; (8081640 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808162c:	b002      	add	sp, #8
 808162e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081632:	f000 b807 	b.w	8081644 <__aeabi_atexit>
 8081636:	bf00      	nop
 8081638:	20000554 	.word	0x20000554
 808163c:	20000078 	.word	0x20000078
 8081640:	08080ea9 	.word	0x08080ea9

08081644 <__aeabi_atexit>:
 8081644:	460b      	mov	r3, r1
 8081646:	4601      	mov	r1, r0
 8081648:	4618      	mov	r0, r3
 808164a:	f000 b94d 	b.w	80818e8 <__cxa_atexit>

0808164e <_ZdlPvj>:
 808164e:	f7fe bd26 	b.w	808009e <_ZdlPv>

08081652 <_ZSt25__throw_bad_function_callv>:
 8081652:	b508      	push	{r3, lr}
 8081654:	f7ff f88c 	bl	8080770 <abort>

08081658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081658:	4b24      	ldr	r3, [pc, #144]	; (80816ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808165a:	681a      	ldr	r2, [r3, #0]
 808165c:	07d0      	lsls	r0, r2, #31
 808165e:	bf5c      	itt	pl
 8081660:	2201      	movpl	r2, #1
 8081662:	601a      	strpl	r2, [r3, #0]
 8081664:	4b22      	ldr	r3, [pc, #136]	; (80816f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081666:	681a      	ldr	r2, [r3, #0]
 8081668:	07d1      	lsls	r1, r2, #31
 808166a:	bf5c      	itt	pl
 808166c:	2201      	movpl	r2, #1
 808166e:	601a      	strpl	r2, [r3, #0]
 8081670:	4b20      	ldr	r3, [pc, #128]	; (80816f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081672:	681a      	ldr	r2, [r3, #0]
 8081674:	07d2      	lsls	r2, r2, #31
 8081676:	bf5c      	itt	pl
 8081678:	2201      	movpl	r2, #1
 808167a:	601a      	strpl	r2, [r3, #0]
 808167c:	4b1e      	ldr	r3, [pc, #120]	; (80816f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808167e:	681a      	ldr	r2, [r3, #0]
 8081680:	07d0      	lsls	r0, r2, #31
 8081682:	bf5c      	itt	pl
 8081684:	2201      	movpl	r2, #1
 8081686:	601a      	strpl	r2, [r3, #0]
 8081688:	4b1c      	ldr	r3, [pc, #112]	; (80816fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808168a:	681a      	ldr	r2, [r3, #0]
 808168c:	07d1      	lsls	r1, r2, #31
 808168e:	bf5c      	itt	pl
 8081690:	2201      	movpl	r2, #1
 8081692:	601a      	strpl	r2, [r3, #0]
 8081694:	4b1a      	ldr	r3, [pc, #104]	; (8081700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081696:	681a      	ldr	r2, [r3, #0]
 8081698:	07d2      	lsls	r2, r2, #31
 808169a:	bf5c      	itt	pl
 808169c:	2201      	movpl	r2, #1
 808169e:	601a      	strpl	r2, [r3, #0]
 80816a0:	4b18      	ldr	r3, [pc, #96]	; (8081704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80816a2:	681a      	ldr	r2, [r3, #0]
 80816a4:	07d0      	lsls	r0, r2, #31
 80816a6:	bf5c      	itt	pl
 80816a8:	2201      	movpl	r2, #1
 80816aa:	601a      	strpl	r2, [r3, #0]
 80816ac:	4b16      	ldr	r3, [pc, #88]	; (8081708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80816ae:	681a      	ldr	r2, [r3, #0]
 80816b0:	07d1      	lsls	r1, r2, #31
 80816b2:	bf5c      	itt	pl
 80816b4:	2201      	movpl	r2, #1
 80816b6:	601a      	strpl	r2, [r3, #0]
 80816b8:	4b14      	ldr	r3, [pc, #80]	; (808170c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80816ba:	681a      	ldr	r2, [r3, #0]
 80816bc:	07d2      	lsls	r2, r2, #31
 80816be:	bf5c      	itt	pl
 80816c0:	2201      	movpl	r2, #1
 80816c2:	601a      	strpl	r2, [r3, #0]
 80816c4:	4b12      	ldr	r3, [pc, #72]	; (8081710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80816c6:	681a      	ldr	r2, [r3, #0]
 80816c8:	07d0      	lsls	r0, r2, #31
 80816ca:	bf5c      	itt	pl
 80816cc:	2201      	movpl	r2, #1
 80816ce:	601a      	strpl	r2, [r3, #0]
 80816d0:	4b10      	ldr	r3, [pc, #64]	; (8081714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80816d2:	681a      	ldr	r2, [r3, #0]
 80816d4:	07d1      	lsls	r1, r2, #31
 80816d6:	bf5c      	itt	pl
 80816d8:	2201      	movpl	r2, #1
 80816da:	601a      	strpl	r2, [r3, #0]
 80816dc:	4b0e      	ldr	r3, [pc, #56]	; (8081718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80816de:	681a      	ldr	r2, [r3, #0]
 80816e0:	07d2      	lsls	r2, r2, #31
 80816e2:	bf5c      	itt	pl
 80816e4:	2201      	movpl	r2, #1
 80816e6:	601a      	strpl	r2, [r3, #0]
 80816e8:	4770      	bx	lr
 80816ea:	bf00      	nop
 80816ec:	20000588 	.word	0x20000588
 80816f0:	20000584 	.word	0x20000584
 80816f4:	20000580 	.word	0x20000580
 80816f8:	2000057c 	.word	0x2000057c
 80816fc:	20000578 	.word	0x20000578
 8081700:	20000574 	.word	0x20000574
 8081704:	20000570 	.word	0x20000570
 8081708:	2000056c 	.word	0x2000056c
 808170c:	20000568 	.word	0x20000568
 8081710:	20000564 	.word	0x20000564
 8081714:	20000560 	.word	0x20000560
 8081718:	2000055c 	.word	0x2000055c

0808171c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808171c:	4b18      	ldr	r3, [pc, #96]	; (8081780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808171e:	681a      	ldr	r2, [r3, #0]
 8081720:	07d1      	lsls	r1, r2, #31
 8081722:	bf5c      	itt	pl
 8081724:	2201      	movpl	r2, #1
 8081726:	601a      	strpl	r2, [r3, #0]
 8081728:	4b16      	ldr	r3, [pc, #88]	; (8081784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808172a:	681a      	ldr	r2, [r3, #0]
 808172c:	07d2      	lsls	r2, r2, #31
 808172e:	bf5c      	itt	pl
 8081730:	2201      	movpl	r2, #1
 8081732:	601a      	strpl	r2, [r3, #0]
 8081734:	4b14      	ldr	r3, [pc, #80]	; (8081788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081736:	681a      	ldr	r2, [r3, #0]
 8081738:	07d0      	lsls	r0, r2, #31
 808173a:	bf5c      	itt	pl
 808173c:	2201      	movpl	r2, #1
 808173e:	601a      	strpl	r2, [r3, #0]
 8081740:	4b12      	ldr	r3, [pc, #72]	; (808178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081742:	681a      	ldr	r2, [r3, #0]
 8081744:	07d1      	lsls	r1, r2, #31
 8081746:	bf5c      	itt	pl
 8081748:	2201      	movpl	r2, #1
 808174a:	601a      	strpl	r2, [r3, #0]
 808174c:	4b10      	ldr	r3, [pc, #64]	; (8081790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808174e:	681a      	ldr	r2, [r3, #0]
 8081750:	07d2      	lsls	r2, r2, #31
 8081752:	bf5c      	itt	pl
 8081754:	2201      	movpl	r2, #1
 8081756:	601a      	strpl	r2, [r3, #0]
 8081758:	4b0e      	ldr	r3, [pc, #56]	; (8081794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808175a:	681a      	ldr	r2, [r3, #0]
 808175c:	07d0      	lsls	r0, r2, #31
 808175e:	bf5c      	itt	pl
 8081760:	2201      	movpl	r2, #1
 8081762:	601a      	strpl	r2, [r3, #0]
 8081764:	4b0c      	ldr	r3, [pc, #48]	; (8081798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081766:	681a      	ldr	r2, [r3, #0]
 8081768:	07d1      	lsls	r1, r2, #31
 808176a:	bf5c      	itt	pl
 808176c:	2201      	movpl	r2, #1
 808176e:	601a      	strpl	r2, [r3, #0]
 8081770:	4b0a      	ldr	r3, [pc, #40]	; (808179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081772:	681a      	ldr	r2, [r3, #0]
 8081774:	07d2      	lsls	r2, r2, #31
 8081776:	bf5c      	itt	pl
 8081778:	2201      	movpl	r2, #1
 808177a:	601a      	strpl	r2, [r3, #0]
 808177c:	4770      	bx	lr
 808177e:	bf00      	nop
 8081780:	200005a8 	.word	0x200005a8
 8081784:	200005a4 	.word	0x200005a4
 8081788:	200005a0 	.word	0x200005a0
 808178c:	2000059c 	.word	0x2000059c
 8081790:	20000598 	.word	0x20000598
 8081794:	20000594 	.word	0x20000594
 8081798:	20000590 	.word	0x20000590
 808179c:	2000058c 	.word	0x2000058c

080817a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80817a0:	4b18      	ldr	r3, [pc, #96]	; (8081804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80817a2:	681a      	ldr	r2, [r3, #0]
 80817a4:	07d1      	lsls	r1, r2, #31
 80817a6:	bf5c      	itt	pl
 80817a8:	2201      	movpl	r2, #1
 80817aa:	601a      	strpl	r2, [r3, #0]
 80817ac:	4b16      	ldr	r3, [pc, #88]	; (8081808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80817ae:	681a      	ldr	r2, [r3, #0]
 80817b0:	07d2      	lsls	r2, r2, #31
 80817b2:	bf5c      	itt	pl
 80817b4:	2201      	movpl	r2, #1
 80817b6:	601a      	strpl	r2, [r3, #0]
 80817b8:	4b14      	ldr	r3, [pc, #80]	; (808180c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80817ba:	681a      	ldr	r2, [r3, #0]
 80817bc:	07d0      	lsls	r0, r2, #31
 80817be:	bf5c      	itt	pl
 80817c0:	2201      	movpl	r2, #1
 80817c2:	601a      	strpl	r2, [r3, #0]
 80817c4:	4b12      	ldr	r3, [pc, #72]	; (8081810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80817c6:	681a      	ldr	r2, [r3, #0]
 80817c8:	07d1      	lsls	r1, r2, #31
 80817ca:	bf5c      	itt	pl
 80817cc:	2201      	movpl	r2, #1
 80817ce:	601a      	strpl	r2, [r3, #0]
 80817d0:	4b10      	ldr	r3, [pc, #64]	; (8081814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80817d2:	681a      	ldr	r2, [r3, #0]
 80817d4:	07d2      	lsls	r2, r2, #31
 80817d6:	bf5c      	itt	pl
 80817d8:	2201      	movpl	r2, #1
 80817da:	601a      	strpl	r2, [r3, #0]
 80817dc:	4b0e      	ldr	r3, [pc, #56]	; (8081818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80817de:	681a      	ldr	r2, [r3, #0]
 80817e0:	07d0      	lsls	r0, r2, #31
 80817e2:	bf5c      	itt	pl
 80817e4:	2201      	movpl	r2, #1
 80817e6:	601a      	strpl	r2, [r3, #0]
 80817e8:	4b0c      	ldr	r3, [pc, #48]	; (808181c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80817ea:	681a      	ldr	r2, [r3, #0]
 80817ec:	07d1      	lsls	r1, r2, #31
 80817ee:	bf5c      	itt	pl
 80817f0:	2201      	movpl	r2, #1
 80817f2:	601a      	strpl	r2, [r3, #0]
 80817f4:	4b0a      	ldr	r3, [pc, #40]	; (8081820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80817f6:	681a      	ldr	r2, [r3, #0]
 80817f8:	07d2      	lsls	r2, r2, #31
 80817fa:	bf5c      	itt	pl
 80817fc:	2201      	movpl	r2, #1
 80817fe:	601a      	strpl	r2, [r3, #0]
 8081800:	4770      	bx	lr
 8081802:	bf00      	nop
 8081804:	200005c8 	.word	0x200005c8
 8081808:	200005c4 	.word	0x200005c4
 808180c:	200005c0 	.word	0x200005c0
 8081810:	200005bc 	.word	0x200005bc
 8081814:	200005b8 	.word	0x200005b8
 8081818:	200005b4 	.word	0x200005b4
 808181c:	200005b0 	.word	0x200005b0
 8081820:	200005ac 	.word	0x200005ac

08081824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081824:	4b24      	ldr	r3, [pc, #144]	; (80818b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081826:	681a      	ldr	r2, [r3, #0]
 8081828:	07d0      	lsls	r0, r2, #31
 808182a:	bf5c      	itt	pl
 808182c:	2201      	movpl	r2, #1
 808182e:	601a      	strpl	r2, [r3, #0]
 8081830:	4b22      	ldr	r3, [pc, #136]	; (80818bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081832:	681a      	ldr	r2, [r3, #0]
 8081834:	07d1      	lsls	r1, r2, #31
 8081836:	bf5c      	itt	pl
 8081838:	2201      	movpl	r2, #1
 808183a:	601a      	strpl	r2, [r3, #0]
 808183c:	4b20      	ldr	r3, [pc, #128]	; (80818c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808183e:	681a      	ldr	r2, [r3, #0]
 8081840:	07d2      	lsls	r2, r2, #31
 8081842:	bf5c      	itt	pl
 8081844:	2201      	movpl	r2, #1
 8081846:	601a      	strpl	r2, [r3, #0]
 8081848:	4b1e      	ldr	r3, [pc, #120]	; (80818c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808184a:	681a      	ldr	r2, [r3, #0]
 808184c:	07d0      	lsls	r0, r2, #31
 808184e:	bf5c      	itt	pl
 8081850:	2201      	movpl	r2, #1
 8081852:	601a      	strpl	r2, [r3, #0]
 8081854:	4b1c      	ldr	r3, [pc, #112]	; (80818c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081856:	681a      	ldr	r2, [r3, #0]
 8081858:	07d1      	lsls	r1, r2, #31
 808185a:	bf5c      	itt	pl
 808185c:	2201      	movpl	r2, #1
 808185e:	601a      	strpl	r2, [r3, #0]
 8081860:	4b1a      	ldr	r3, [pc, #104]	; (80818cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081862:	681a      	ldr	r2, [r3, #0]
 8081864:	07d2      	lsls	r2, r2, #31
 8081866:	bf5c      	itt	pl
 8081868:	2201      	movpl	r2, #1
 808186a:	601a      	strpl	r2, [r3, #0]
 808186c:	4b18      	ldr	r3, [pc, #96]	; (80818d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808186e:	681a      	ldr	r2, [r3, #0]
 8081870:	07d0      	lsls	r0, r2, #31
 8081872:	bf5c      	itt	pl
 8081874:	2201      	movpl	r2, #1
 8081876:	601a      	strpl	r2, [r3, #0]
 8081878:	4b16      	ldr	r3, [pc, #88]	; (80818d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808187a:	681a      	ldr	r2, [r3, #0]
 808187c:	07d1      	lsls	r1, r2, #31
 808187e:	bf5c      	itt	pl
 8081880:	2201      	movpl	r2, #1
 8081882:	601a      	strpl	r2, [r3, #0]
 8081884:	4b14      	ldr	r3, [pc, #80]	; (80818d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081886:	681a      	ldr	r2, [r3, #0]
 8081888:	07d2      	lsls	r2, r2, #31
 808188a:	bf5c      	itt	pl
 808188c:	2201      	movpl	r2, #1
 808188e:	601a      	strpl	r2, [r3, #0]
 8081890:	4b12      	ldr	r3, [pc, #72]	; (80818dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081892:	681a      	ldr	r2, [r3, #0]
 8081894:	07d0      	lsls	r0, r2, #31
 8081896:	bf5c      	itt	pl
 8081898:	2201      	movpl	r2, #1
 808189a:	601a      	strpl	r2, [r3, #0]
 808189c:	4b10      	ldr	r3, [pc, #64]	; (80818e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808189e:	681a      	ldr	r2, [r3, #0]
 80818a0:	07d1      	lsls	r1, r2, #31
 80818a2:	bf5c      	itt	pl
 80818a4:	2201      	movpl	r2, #1
 80818a6:	601a      	strpl	r2, [r3, #0]
 80818a8:	4b0e      	ldr	r3, [pc, #56]	; (80818e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80818aa:	681a      	ldr	r2, [r3, #0]
 80818ac:	07d2      	lsls	r2, r2, #31
 80818ae:	bf5c      	itt	pl
 80818b0:	2201      	movpl	r2, #1
 80818b2:	601a      	strpl	r2, [r3, #0]
 80818b4:	4770      	bx	lr
 80818b6:	bf00      	nop
 80818b8:	200005f8 	.word	0x200005f8
 80818bc:	200005f4 	.word	0x200005f4
 80818c0:	200005f0 	.word	0x200005f0
 80818c4:	200005ec 	.word	0x200005ec
 80818c8:	200005e8 	.word	0x200005e8
 80818cc:	200005e4 	.word	0x200005e4
 80818d0:	200005e0 	.word	0x200005e0
 80818d4:	200005dc 	.word	0x200005dc
 80818d8:	200005d8 	.word	0x200005d8
 80818dc:	200005d4 	.word	0x200005d4
 80818e0:	200005d0 	.word	0x200005d0
 80818e4:	200005cc 	.word	0x200005cc

080818e8 <__cxa_atexit>:
 80818e8:	b510      	push	{r4, lr}
 80818ea:	4c05      	ldr	r4, [pc, #20]	; (8081900 <__cxa_atexit+0x18>)
 80818ec:	4613      	mov	r3, r2
 80818ee:	b12c      	cbz	r4, 80818fc <__cxa_atexit+0x14>
 80818f0:	460a      	mov	r2, r1
 80818f2:	4601      	mov	r1, r0
 80818f4:	2002      	movs	r0, #2
 80818f6:	f3af 8000 	nop.w
 80818fa:	bd10      	pop	{r4, pc}
 80818fc:	4620      	mov	r0, r4
 80818fe:	bd10      	pop	{r4, pc}
 8081900:	00000000 	.word	0x00000000

08081904 <memcpy>:
 8081904:	b510      	push	{r4, lr}
 8081906:	1e43      	subs	r3, r0, #1
 8081908:	440a      	add	r2, r1
 808190a:	4291      	cmp	r1, r2
 808190c:	d004      	beq.n	8081918 <memcpy+0x14>
 808190e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8081916:	e7f8      	b.n	808190a <memcpy+0x6>
 8081918:	bd10      	pop	{r4, pc}

0808191a <memset>:
 808191a:	4603      	mov	r3, r0
 808191c:	4402      	add	r2, r0
 808191e:	4293      	cmp	r3, r2
 8081920:	d002      	beq.n	8081928 <memset+0xe>
 8081922:	f803 1b01 	strb.w	r1, [r3], #1
 8081926:	e7fa      	b.n	808191e <memset+0x4>
 8081928:	4770      	bx	lr
	...

0808192c <srand>:
 808192c:	b538      	push	{r3, r4, r5, lr}
 808192e:	4b12      	ldr	r3, [pc, #72]	; (8081978 <srand+0x4c>)
 8081930:	4605      	mov	r5, r0
 8081932:	681c      	ldr	r4, [r3, #0]
 8081934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8081936:	b9d3      	cbnz	r3, 808196e <srand+0x42>
 8081938:	2018      	movs	r0, #24
 808193a:	f7fe ff01 	bl	8080740 <malloc>
 808193e:	f243 330e 	movw	r3, #13070	; 0x330e
 8081942:	63a0      	str	r0, [r4, #56]	; 0x38
 8081944:	8003      	strh	r3, [r0, #0]
 8081946:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808194a:	8043      	strh	r3, [r0, #2]
 808194c:	f241 2334 	movw	r3, #4660	; 0x1234
 8081950:	8083      	strh	r3, [r0, #4]
 8081952:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8081956:	80c3      	strh	r3, [r0, #6]
 8081958:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808195c:	8103      	strh	r3, [r0, #8]
 808195e:	2305      	movs	r3, #5
 8081960:	8143      	strh	r3, [r0, #10]
 8081962:	230b      	movs	r3, #11
 8081964:	8183      	strh	r3, [r0, #12]
 8081966:	2201      	movs	r2, #1
 8081968:	2300      	movs	r3, #0
 808196a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808196e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8081970:	2200      	movs	r2, #0
 8081972:	611d      	str	r5, [r3, #16]
 8081974:	615a      	str	r2, [r3, #20]
 8081976:	bd38      	pop	{r3, r4, r5, pc}
 8081978:	20000074 	.word	0x20000074

0808197c <strcmp>:
 808197c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8081980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8081984:	2a01      	cmp	r2, #1
 8081986:	bf28      	it	cs
 8081988:	429a      	cmpcs	r2, r3
 808198a:	d0f7      	beq.n	808197c <strcmp>
 808198c:	1ad0      	subs	r0, r2, r3
 808198e:	4770      	bx	lr

08081990 <strcpy>:
 8081990:	4603      	mov	r3, r0
 8081992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8081996:	f803 2b01 	strb.w	r2, [r3], #1
 808199a:	2a00      	cmp	r2, #0
 808199c:	d1f9      	bne.n	8081992 <strcpy+0x2>
 808199e:	4770      	bx	lr

080819a0 <strdup>:
 80819a0:	4b02      	ldr	r3, [pc, #8]	; (80819ac <strdup+0xc>)
 80819a2:	4601      	mov	r1, r0
 80819a4:	6818      	ldr	r0, [r3, #0]
 80819a6:	f000 b803 	b.w	80819b0 <_strdup_r>
 80819aa:	bf00      	nop
 80819ac:	20000074 	.word	0x20000074

080819b0 <_strdup_r>:
 80819b0:	b570      	push	{r4, r5, r6, lr}
 80819b2:	4606      	mov	r6, r0
 80819b4:	4608      	mov	r0, r1
 80819b6:	460c      	mov	r4, r1
 80819b8:	f000 f80d 	bl	80819d6 <strlen>
 80819bc:	1c45      	adds	r5, r0, #1
 80819be:	4629      	mov	r1, r5
 80819c0:	4630      	mov	r0, r6
 80819c2:	f7fe fedd 	bl	8080780 <_malloc_r>
 80819c6:	4606      	mov	r6, r0
 80819c8:	b118      	cbz	r0, 80819d2 <_strdup_r+0x22>
 80819ca:	462a      	mov	r2, r5
 80819cc:	4621      	mov	r1, r4
 80819ce:	f7ff ff99 	bl	8081904 <memcpy>
 80819d2:	4630      	mov	r0, r6
 80819d4:	bd70      	pop	{r4, r5, r6, pc}

080819d6 <strlen>:
 80819d6:	4603      	mov	r3, r0
 80819d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80819dc:	2a00      	cmp	r2, #0
 80819de:	d1fb      	bne.n	80819d8 <strlen+0x2>
 80819e0:	1a18      	subs	r0, r3, r0
 80819e2:	3801      	subs	r0, #1
 80819e4:	4770      	bx	lr

080819e6 <link_code_end>:
	...

080819e8 <dynalib_user>:
 80819e8:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80819f8:	0000 0000 6163 7272 6569 4d72 646f 0065     ....carrierMode.
 8081a08:	6573 4374 7261 6972 7265 6f4d 6564 4100     setCarrierMode.A
 8081a18:	2b54 4f43 5350 323d 0a0d 4100 2b54 4f43     T+COPS=2...AT+CO
 8081a28:	5350 303d 0a0d 4100 2b54 4f43 5350 343d     PS=0...AT+COPS=4
 8081a38:	322c 222c 3133 3430 3031 0d22 000a 5441     ,2,"310410"...AT
 8081a48:	432b 504f 3d53 2c34 2c32 3322 3031 3632     +COPS=4,2,"31026
 8081a58:	2230 0a0d 4100 2b54 4f43 5350 343d 322c     0"...AT+COPS=4,2
 8081a68:	222c 3336 3135 2234 0a0d 4100 2b54 4f43     ,"63514"...AT+CO
 8081a78:	5350 343d 322c 222c 3336 3135 2230 0a0d     PS=4,2,"63510"..
 8081a88:	4100 2b54 4f43 5350 343d 322c 222c 3336     .AT+COPS=4,2,"63
 8081a98:	3135 2233 0a0d 3000 4100 7475 6d6f 7461     513"...0.Automat
 8081aa8:	6369 4300 656c 7261 6465 4320 7261 6972     ic.Cleared Carri
 8081ab8:	7265 5320 6c65 6365 6974 6e6f 4d20 646f     er Selection Mod
 8081ac8:	0065 6143 7272 6569 2072 6f46 6372 6465     e.Carrier Forced
 8081ad8:	7420 206f 5441 5426 3200 4300 7261 6972      to AT&T.2.Carri
 8081ae8:	7265 4620 726f 6563 2064 6f74 5420 4d2d     er Forced to T-M
 8081af8:	626f 6c69 0065 0033 6143 7272 6569 2072     obile.3.Carrier 
 8081b08:	6f46 6372 6465 7420 206f 6941 7472 6c65     Forced to Airtel
 8081b18:	3400 4d00 4e54 4300 7261 6972 7265 4620     .4.MTN.Carrier F
 8081b28:	726f 6563 2064 6f74 4d20 4e54 522f 6177     orced to MTN/Rwa
 8081b38:	646e 4361 6c65 006c 0035 6143 7272 6569     ndaCell.5.Carrie
 8081b48:	2072 6f46 6372 6465 7420 206f 4954 4f47     r Forced to TIGO
 8081b58:	0000 0000                                   ....

08081b5c <_ZTVN5spark13CellularClassE>:
	...
 8081b64:	084f 0808 0845 0808 083b 0808 07b9 0808     O...E...;.......
 8081b74:	00c3 0808 082f 0808 0823 0808 081b 0808     ..../...#.......
 8081b84:	0811 0808 0807 0808 07c3 0808               ............

08081b90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8081b98:	0889 0808 088f 0808 08e5 0808 089d 0808     ................
 8081ba8:	088b 0808                                   ....

08081bac <_ZTV9IPAddress>:
	...
 8081bb4:	0eb9 0808 0ea9 0808 0eab 0808 6162 6475     ............baud
 8081bc4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8081bd4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8081be4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8081bf4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8081c04:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8081c14:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8081c24:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8081c34:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8081c44:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 8081c54:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 8081c64:	3d20 0020 0066 6e6c 6600 006e 6f63 6564      = .f.ln.fn.code
 8081c74:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 8081c84:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8081c94:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

08081ca4 <_ZTVN5spark12NetworkClassE>:
	...
 8081cac:	0f59 0808 0f63 0808 0f6d 0808 0f77 0808     Y...c...m...w...
 8081cbc:	0f81 0808 0f8d 0808 0f99 0808 0fa5 0808     ................
 8081ccc:	0fad 0808 0fb7 0808 0fc1 0808 005a 2b25     ............Z.%+
 8081cdc:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 8081cec:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 8081cfc:	6974 656d 0000 0000                         time....

08081d04 <_ZTV11USARTSerial>:
	...
 8081d0c:	122d 0808 127d 0808 128b 0808 1021 0808     -...}.......!...
 8081d1c:	1241 0808 1263 0808 124f 0808 1277 0808     A...c...O...w...
 8081d2c:	122f 0808 1233 0808                         /...3...

08081d34 <_ZTV9USBSerial>:
	...
 8081d3c:	132d 0808 137d 0808 138b 0808 1021 0808     -...}.......!...
 8081d4c:	1369 0808 132f 0808 1345 0808 1377 0808     i.../...E...w...
 8081d5c:	135b 0808 1329 0808                         [...)...

08081d64 <__sf_fake_stdin>:
	...

08081d84 <__sf_fake_stdout>:
	...

08081da4 <__sf_fake_stderr>:
	...
 8081dc4:	0043                                        C.

08081dc6 <link_const_variable_data_end>:
	...

08081dc8 <link_constructors_location>:
 8081dc8:	0808043d 	.word	0x0808043d
 8081dcc:	08080859 	.word	0x08080859
 8081dd0:	08080f49 	.word	0x08080f49
 8081dd4:	0808100d 	.word	0x0808100d
 8081dd8:	080810bd 	.word	0x080810bd
 8081ddc:	080811e5 	.word	0x080811e5
 8081de0:	08081219 	.word	0x08081219
 8081de4:	08081615 	.word	0x08081615
 8081de8:	08081659 	.word	0x08081659
 8081dec:	0808171d 	.word	0x0808171d
 8081df0:	080817a1 	.word	0x080817a1
 8081df4:	08081825 	.word	0x08081825

08081df8 <link_constructors_end>:
	...
